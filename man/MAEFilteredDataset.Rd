% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilteredDatasetMAE.R
\name{MAEFilteredDataset}
\alias{MAEFilteredDataset}
\title{\code{MAEFilteredDataset} R6 class}
\description{
\code{MAEFilteredDataset} R6 class

\code{MAEFilteredDataset} R6 class
}
\examples{

## ------------------------------------------------
## Method `MAEFilteredDataset$set_filter_state`
## ------------------------------------------------

utils::data(miniACC, package = "MultiAssayExperiment")
dataset <- teal.slice:::MAEFilteredDataset$new(miniACC, "MAE")
fs <- filter_settings(
  filter_var(
    dataname = "MAE", varname = "years_to_birth", selected = c(30, 50), keep_na = TRUE
  ),
  filter_var(
    dataname = "MAE", varname = "vital_status", selected = "1", keep_na = FALSE
  ),
  filter_var(
    dataname = "MAE", varname = "gender", selected = "female", keep_na = TRUE
  ),
  filter_var(
    dataname = "MAE", varname = "ARRAY_TYPE", selected = "", keep_na = TRUE
  )
)
dataset$set_filter_state(state = fs)
shiny::isolate(dataset$get_filter_state())

}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilteredDataset]{teal.slice::FilteredDataset}} -> \code{MAEFilteredDataset}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MAEFilteredDataset-get_call}{\code{MAEFilteredDataset$get_call()}}
\item \href{#method-MAEFilteredDataset-set_filter_state}{\code{MAEFilteredDataset$set_filter_state()}}
\item \href{#method-MAEFilteredDataset-srv_add}{\code{MAEFilteredDataset$srv_add()}}
\item \href{#method-MAEFilteredDataset-clone}{\code{MAEFilteredDataset$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="clear_filter_states"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-clear_filter_states'><code>teal.slice::FilteredDataset$clear_filter_states()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_dataname"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_dataname'><code>teal.slice::FilteredDataset$get_dataname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_dataset"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_dataset'><code>teal.slice::FilteredDataset$get_dataset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_dataset_label"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_dataset_label'><code>teal.slice::FilteredDataset$get_dataset_label()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_filter_count"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_filter_count'><code>teal.slice::FilteredDataset$get_filter_count()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_filter_overview"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_filter_overview'><code>teal.slice::FilteredDataset$get_filter_overview()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_filter_state"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_filter_state'><code>teal.slice::FilteredDataset$get_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_keys"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_keys'><code>teal.slice::FilteredDataset$get_keys()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_metadata"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_metadata'><code>teal.slice::FilteredDataset$get_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="initialize"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-initialize'><code>teal.slice::FilteredDataset$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="remove_filter_state"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-remove_filter_state'><code>teal.slice::FilteredDataset$remove_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="srv_active"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-srv_active'><code>teal.slice::FilteredDataset$srv_active()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="ui_active"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-ui_active'><code>teal.slice::FilteredDataset$ui_active()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilteredDataset-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilteredDataset-get_call}{}}}
\subsection{Method \code{get_call()}}{
Gets a filter expression

This functions returns filter calls equivalent to selected items
within each of \code{filter_states}. Configuration of the calls is constant and
depends on \code{filter_states} type and order which are set during initialization.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilteredDataset$get_call(sid = "")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{sid}}{(\code{character})\cr
when specified then method returns code containing filter conditions of
\code{FilterState} objects which \code{"sid"} attribute is different than this \code{sid} argument.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
filter \code{call} or \code{list} of filter calls
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilteredDataset-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilteredDataset-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilteredDataset$set_filter_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\verb{named list})\cr
names of the list should correspond to the names of the initialized \code{FilterStates}
kept in \code{private$filter_states}. For this object they are \code{"subjects"} and
names of the experiments. Values of initial state should be relevant
to the referred column.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{utils::data(miniACC, package = "MultiAssayExperiment")
dataset <- teal.slice:::MAEFilteredDataset$new(miniACC, "MAE")
fs <- filter_settings(
  filter_var(
    dataname = "MAE", varname = "years_to_birth", selected = c(30, 50), keep_na = TRUE
  ),
  filter_var(
    dataname = "MAE", varname = "vital_status", selected = "1", keep_na = FALSE
  ),
  filter_var(
    dataname = "MAE", varname = "gender", selected = "female", keep_na = TRUE
  ),
  filter_var(
    dataname = "MAE", varname = "ARRAY_TYPE", selected = "", keep_na = TRUE
  )
)
dataset$set_filter_state(state = fs)
shiny::isolate(dataset$get_filter_state())

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilteredDataset-srv_add"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilteredDataset-srv_add}{}}}
\subsection{Method \code{srv_add()}}{
Shiny server module to add filter variable.

This module controls available choices to select as a filter variable.
Once selected, a variable is removed from available choices.
Removing a filter variable adds it back to available choices.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilteredDataset$srv_add(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilteredDataset-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilteredDataset-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilteredDataset$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
