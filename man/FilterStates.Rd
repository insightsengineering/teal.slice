% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStates.R
\name{FilterStates}
\alias{FilterStates}
\title{\code{FilterStates} R6 class}
\description{
Abstract class that manages adding and removing \code{FilterState} objects
and builds a \emph{subset expression}.

A \code{FilterStates} object tracks all subsetting expressions
(logical predicates that limit observations) associated with a given dataset
and composes them into a single reproducible R expression
that will assign a subset of the original data to a new variable.
This expression is hereafter referred to as \emph{subset expression}.

The \emph{subset expression} is constructed differently for different
classes of the underlying data object and \code{FilterStates} subclasses.
Currently implemented for \code{data.frame}, \code{matrix},
\code{SummarizedExperiment}, and \code{MultiAssayExperiment}.
}
\examples{
library(shiny)
filter_states <- teal.slice:::DFFilterStates$new(
  dataname = "data",
  varlabels = c(x = "x variable", SEX = "Sex"),
  datalabel = character(0),
  keys = character(0)
)
filter_state <- teal.slice:::RangeFilterState$new(
  c(NA, Inf, seq(1:10)),
  varname = "x",
  varlabel = "x variable",
  dataname = "data",
  extract_type = "list"
)
isolate(filter_state$set_selected(c(3L, 8L)))

isolate(
  filter_states$state_list_push(
    x = filter_state,
    state_list_index = 1L,
    state_id = "x"
  )
)
isolate(filter_states$get_call())

}
\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FilterStates-new}{\code{FilterStates$new()}}
\item \href{#method-FilterStates-get_datalabel}{\code{FilterStates$get_datalabel()}}
\item \href{#method-FilterStates-format}{\code{FilterStates$format()}}
\item \href{#method-FilterStates-get_call}{\code{FilterStates$get_call()}}
\item \href{#method-FilterStates-print}{\code{FilterStates$print()}}
\item \href{#method-FilterStates-get_fun}{\code{FilterStates$get_fun()}}
\item \href{#method-FilterStates-state_list_get}{\code{FilterStates$state_list_get()}}
\item \href{#method-FilterStates-state_list_push}{\code{FilterStates$state_list_push()}}
\item \href{#method-FilterStates-state_list_remove}{\code{FilterStates$state_list_remove()}}
\item \href{#method-FilterStates-state_list_empty}{\code{FilterStates$state_list_empty()}}
\item \href{#method-FilterStates-get_filter_count}{\code{FilterStates$get_filter_count()}}
\item \href{#method-FilterStates-remove_filter_state}{\code{FilterStates$remove_filter_state()}}
\item \href{#method-FilterStates-ui}{\code{FilterStates$ui()}}
\item \href{#method-FilterStates-get_filter_state}{\code{FilterStates$get_filter_state()}}
\item \href{#method-FilterStates-set_filter_state}{\code{FilterStates$set_filter_state()}}
\item \href{#method-FilterStates-ui_add_filter_state}{\code{FilterStates$ui_add_filter_state()}}
\item \href{#method-FilterStates-srv_add_filter_state}{\code{FilterStates$srv_add_filter_state()}}
\item \href{#method-FilterStates-clone}{\code{FilterStates$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-new"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-new}{}}}
\subsection{Method \code{new()}}{
Initializes \code{FilterStates} object.

Initializes \code{FilterStates} object by setting
\code{dataname}, and \code{datalabel}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$new(dataname, datalabel)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character(1)})\cr
name of the data used in the expression
specified to the function argument attached to this \code{FilterStates}}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-get_datalabel"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-get_datalabel}{}}}
\subsection{Method \code{get_datalabel()}}{
Returns the label of the dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$get_datalabel()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)} the data label
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-format"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{FilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$format(indent)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces prepended to each line of the output}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-get_call}{}}}
\subsection{Method \code{get_call()}}{
Filter call

Builds \emph{subset expression} from condition calls stored in \code{FilterState}
objects selection. The \code{lhs} of the expression is \code{private$dataname}.
The \code{rhs} is a call to \code{self$get_fun()} with \code{private$dataname}
as argument and a list of condition calls from \code{FilterState} objects
stored in \code{private$state_list}.
If no filters are applied,
\code{NULL} is returned to avoid no-op calls such as \code{x <- x}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$get_call()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{call} or \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-print"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-print}{}}}
\subsection{Method \code{print()}}{
Prints this \code{FilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{additional arguments to this method}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-get_fun"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-get_fun}{}}}
\subsection{Method \code{get_fun()}}{
Gets the name of the function used to filter the data in this \code{FilterStates}.

Get name of function used to create the \emph{subset expression}.
Defaults to "subset" but can be overridden by child class method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$get_fun()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)} the name of the function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-state_list_get"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-state_list_get}{}}}
\subsection{Method \code{state_list_get()}}{
Returns a list of \code{FilterState} objects stored in this \code{FilterStates}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$state_list_get(state_list_index, state_id = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_list_index}}{(\code{character(1)}, \code{integer(1)})\cr
index on the list in \code{private$state_list} where filter states are kept}

\item{\code{state_id}}{(\code{character(1)})\cr
name of element in a filter state (which is a \code{reactiveVal} containing a list)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{list} of \code{FilterState} objects
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-state_list_push"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-state_list_push}{}}}
\subsection{Method \code{state_list_push()}}{
Adds a new \code{FilterState} object to this \code{FilterStates}.\cr
Raises error if the length of \code{x} does not match the length of \code{state_id}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$state_list_push(x, state_list_index, state_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{FilterState})\cr
object to be added to filter state list}

\item{\code{state_list_index}}{(\code{character(1)}, \code{integer(1)})\cr
index on the list in \code{private$state_list} where filter states are kept}

\item{\code{state_id}}{(\code{character(1)})\cr
name of element in a filter state (which is a \code{reactiveVal} containing a list)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-state_list_remove"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-state_list_remove}{}}}
\subsection{Method \code{state_list_remove()}}{
Removes a single filter state with all associated shiny elements:\cr
\itemize{
\item specified \code{FilterState} from \code{private$state_list}
\item UI card created for this filter
\item observers tracking the selection and remove button
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$state_list_remove(state_list_index, state_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_list_index}}{(\code{character(1)}, \code{integer(1)})\cr
index on the list in \code{private$state_list} where filter states are kept}

\item{\code{state_id}}{(\code{character(1)})\cr
name of element in a filter state (which is a \code{reactiveVal} containing a list)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-state_list_empty"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-state_list_empty}{}}}
\subsection{Method \code{state_list_empty()}}{
Remove all \code{FilterState} objects from this \code{FilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$state_list_empty()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-get_filter_count"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-get_filter_count}{}}}
\subsection{Method \code{get_filter_count()}}{
Gets the number of active \code{FilterState} objects in this \code{FilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$get_filter_count()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{integer(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Remove a single \code{FilterState} from \code{state_list}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$remove_filter_state(state_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(\code{character})\cr
name of variable for which to remove \code{FilterState}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-ui"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-ui}{}}}
\subsection{Method \code{ui()}}{
Shiny module UI

Shiny UI element that stores \code{FilterState} UI elements.
Populated with elements created with \code{renderUI} in the module server.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny element (module instance) id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{shiny.tag}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Gets reactive values from active \code{FilterState} objects.

Get active filter state from \code{FilterState} objects stored in \code{state_list}(s).
The output is a list compatible with input to \code{self$set_filter_state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} containing \code{list} per \code{FilterState} in the \code{state_list}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Sets active \code{FilterState} objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$set_filter_state(data, state, filtered_dataset)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{data.frame})\cr
data object for which to define a subset}

\item{\code{state}}{(\verb{named list})\cr
should contain values of initial selections in the \code{FilterState};
\code{list} names must correspond to column names in \code{data}}

\item{\code{filtered_dataset}}{data object for which to define a subset(?)}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-ui_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-ui_add_filter_state}{}}}
\subsection{Method \code{ui_add_filter_state()}}{
Shiny module UI that adds a filter variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$ui_add_filter_state(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny element (module instance) id}

\item{\code{data}}{(\code{data.frame}, \code{MultiAssayExperiment}, \code{SummarizedExperiment}, \code{matrix})\cr
data object for which to define a subset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{shiny.tag}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-srv_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-srv_add_filter_state}{}}}
\subsection{Method \code{srv_add_filter_state()}}{
Shiny module server that adds a filter variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$srv_add_filter_state(id, data, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny module instance id}

\item{\code{data}}{(\code{data.frame}, \code{MultiAssayExperiment}, \code{SummarizedExperiment}, \code{matrix})\cr
data object for which to define a subset}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStates-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStates-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
