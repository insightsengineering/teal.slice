% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_overview.R
\name{get_filter_overview}
\alias{get_filter_overview}
\title{Get filter overview}
\usage{
get_filter_overview(data_unfiltered, data_filtered, dataname)
}
\arguments{
\item{data_unfiltered, data_filtered}{(\code{object})\cr
unfiltered and filtered data.}

\item{dataname}{(\code{character})\cr
name of the dataset}
}
\value{
\code{data_frame} with columns \code{dataname} and usually \code{obs}, \code{obs_filtered}.
}
\description{
Summary of the dataset in the filter panel
}
\details{
Supported data types
\code{teal.slice} provide \code{get_filter_overview.default} method for
\code{data.frame}, \code{SummarizedExperiment} and \code{MultiAssayExperiment}. Datasets which don't inherit
from these classes will return \verb{data.frame(dataname = dataname, obs = NA, obs_filtered = NA))}
and they will be denoted as "Unsupported dataset" in UI of the filter panel overview.

To extend the \code{get_filter_overview} function to support custom data types,
you need to define a new method for your custom class. This method should be named
\code{get_filter_overview.your_class_name}.

Here's a general example:

\if{html}{\out{<div class="sourceCode">}}\preformatted{get_filter_overview.your_class_name <- function(data_unfiltered, data_filtered, dataname) \{
  'Your implementation here.
   'The function must return a data.frame with columns `dataname`, `obs`, and `obs_filtered`.
\}
}\if{html}{\out{</div>}}

Replace your_class_name with the name of your custom class. Inside the function,
implement the logic to generate the required data frame for your specific data type.
Remember, the returned \code{data.frame} must have the columns \code{"dataname"}, \code{"obs"}, and \code{"obs_filtered"}.
The \code{"dataname"} should be the name of the dataset, \code{"obs"} should be the number of observations in
the \code{unfiltered_data}, and \code{"obs_filtered"} should be the number of observations in the \code{filtered_data}.
}
\keyword{internal}
