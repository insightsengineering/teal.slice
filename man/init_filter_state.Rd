% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterState-utils.R
\name{init_filter_state}
\alias{init_filter_state}
\title{Initializes \code{FilterState}}
\usage{
init_filter_state(
  x,
  x_reactive = reactive(NULL),
  slice,
  extract_type = character(0)
)
}
\arguments{
\item{x}{(\code{vector})
values of the variable used in filter}

\item{x_reactive}{(\code{reactive})
returning vector of the same type as \code{x}. Is used to update
counts following the change in values of the filtered dataset.
If it is set to \code{reactive(NULL)} then counts based on filtered
dataset are not shown.}

\item{slice}{(\code{teal_slice})
object created using \code{\link[=teal_slice]{teal_slice()}}.}

\item{extract_type}{(\code{character})
specifying whether condition calls should be prefixed by \code{dataname}. Possible values:
\itemize{
\item \code{character(0)} (default) \code{varname} in the condition call will not be prefixed
\item \code{"list"} \code{varname} in the condition call will be returned as \verb{<dataname>$<varname>}
\item \code{"matrix"} \code{varname} in the condition call will be returned as \verb{<dataname>[, <varname>]}
}}

\item{...}{additional arguments to be saved as a list in \code{private$extras} field}
}
\value{
\code{FilterState} object
}
\description{
Initializes \code{FilterState} depending on a variable class.
}
\examples{
# use non-exported function from teal.slice
include_js_files <- getFromNamespace("include_js_files", "teal.slice")
init_filter_state <- getFromNamespace("init_filter_state", "teal.slice")

filter_state <- init_filter_state(
  x = c(1:10, NA, Inf),
  x_reactive = reactive(c(1:10, NA, Inf)),
  slice = teal_slice(
    varname = "x",
    dataname = "dataname"
  ),
  extract_type = "matrix"
)

isolate(filter_state$get_call())

ui <- fluidPage(
  filter_state$ui(id = "app"),
  verbatimTextOutput("call")
)
server <- function(input, output, session) {
  filter_state$server("app")

  output$call <- renderText(
    deparse1(filter_state$get_call(), collapse = "\n")
  )
}

if (interactive()) {
  shinyApp(ui, server)
}

}
\keyword{internal}
