% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterState-utils.R
\name{init_filter_state}
\alias{init_filter_state}
\title{Initializes \code{FilterState}}
\usage{
init_filter_state(x, x_reactive = reactive(NULL), slice)
}
\arguments{
\item{x}{(\code{vector})\cr
values of the variable used in filter}

\item{x_reactive}{(\code{reactive})\cr
returning vector of the same type as \code{x}. Is used to update
counts following the change in values of the filtered dataset.
If it is set to \code{reactive(NULL)} then counts based on filtered
dataset are not shown.}

\item{slice}{(\code{teal_slice})\cr
object created using \code{\link[=teal_slice]{teal_slice()}}.}

\item{...}{additional arguments to be saved as a list in \code{private$extras} field}
}
\value{
\code{FilterState} object
}
\description{
Initializes \code{FilterState} depending on a variable class.\cr
}
\examples{
filter_state <- teal.slice:::init_filter_state(
  x = c(1:10, NA, Inf),
  x_reactive = reactive(c(1:10, NA, Inf)),
  slice = teal_slice(
    varname = "x",
    dataname = "dataname"
  )
)

shiny::isolate(filter_state$get_call())
app <- shinyApp(
  ui = fluidPage(
    filter_state$ui(id = "app"),
    verbatimTextOutput("call")
  ),
  server = function(input, output, session) {
    filter_state$server("app")

    output$call <- renderText(
      deparse1(filter_state$get_call(), collapse = "\n")
    )
  }
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}
}
\keyword{internal}
