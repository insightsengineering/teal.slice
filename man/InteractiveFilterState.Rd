% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterState.R
\docType{class}
\name{InteractiveFilterState}
\alias{InteractiveFilterState}
\title{\code{InteractiveFilterState} Abstract Class}
\description{
Abstract class to encapsulate single filter state
}
\details{
This class is responsible for managing single filter item within
\code{FilteredData} class. Filter states depend on the variable type:
(\code{logical}, \code{integer}, \code{numeric}, \code{factor}, \code{character}, \code{Date}, \code{POSIXct}, \code{POSIXlt})
and returns \code{InteractiveFilterState} object with class corresponding to input variable.
Class controls single filter entry in \code{module_single_filter_item} and returns
code relevant to selected values.
\itemize{
\item \code{factor}, \code{character}: \code{class = ChoicesFilterState}
\item \code{numeric}: \code{class = RangeFilterState}
\item \code{logical}: \code{class = LogicalFilterState}
\item \code{Date}: \code{class = DateFilterState}
\item \code{POSIXct}, \code{POSIXlt}: \code{class = DatetimeFilterState}
\item all \code{NA} entries: \code{class: FilterState}, cannot be filtered
\item default: \code{FilterState}, cannot be filtered
\cr
Each variable's filter state is an \code{R6} object which contains \code{choices},
\code{selected}, \code{varname}, \code{dataname}, \code{labels}, \code{na_count}, \code{keep_na} and other
variable type specific fields (\code{keep_inf}, \code{inf_count}, \code{timezone}).
Object contains also shiny module (\code{ui} and \code{server}) which manages
state of the filter through reactive values \code{selected}, \code{keep_na}, \code{keep_inf}
which trigger \code{get_call()} and every R function call up in reactive chain.
\cr
\cr
}
}
\section{Modifying state}{

Modifying a \code{InteractiveFilterState} object is possible in three scenarios:
\itemize{
\item In the interactive session by passing an appropriate \code{teal_slice}
to the \code{set_state} method, or using
\code{set_selected}, \code{set_keep_na} or \code{set_keep_inf} methods.
\item In a running application by changing appropriate inputs.
\item In a running application by using \link{filter_state_api} which directly uses
\code{set_state} method of the \code{InteractiveFilterState} object.
}
}

\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterState]{teal.slice::FilterState}} -> \code{InteractiveFilterState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-InteractiveFilterState-new}{\code{InteractiveFilterState$new()}}
\item \href{#method-InteractiveFilterState-destroy_observers}{\code{InteractiveFilterState$destroy_observers()}}
\item \href{#method-InteractiveFilterState-format}{\code{InteractiveFilterState$format()}}
\item \href{#method-InteractiveFilterState-get_call}{\code{InteractiveFilterState$get_call()}}
\item \href{#method-InteractiveFilterState-get_dataname}{\code{InteractiveFilterState$get_dataname()}}
\item \href{#method-InteractiveFilterState-get_keep_na}{\code{InteractiveFilterState$get_keep_na()}}
\item \href{#method-InteractiveFilterState-get_keep_inf}{\code{InteractiveFilterState$get_keep_inf()}}
\item \href{#method-InteractiveFilterState-get_varlabel}{\code{InteractiveFilterState$get_varlabel()}}
\item \href{#method-InteractiveFilterState-get_varname}{\code{InteractiveFilterState$get_varname()}}
\item \href{#method-InteractiveFilterState-get_selected}{\code{InteractiveFilterState$get_selected()}}
\item \href{#method-InteractiveFilterState-get_state}{\code{InteractiveFilterState$get_state()}}
\item \href{#method-InteractiveFilterState-print}{\code{InteractiveFilterState$print()}}
\item \href{#method-InteractiveFilterState-set_keep_na}{\code{InteractiveFilterState$set_keep_na()}}
\item \href{#method-InteractiveFilterState-set_keep_inf}{\code{InteractiveFilterState$set_keep_inf()}}
\item \href{#method-InteractiveFilterState-set_na_rm}{\code{InteractiveFilterState$set_na_rm()}}
\item \href{#method-InteractiveFilterState-set_selected}{\code{InteractiveFilterState$set_selected()}}
\item \href{#method-InteractiveFilterState-set_state}{\code{InteractiveFilterState$set_state()}}
\item \href{#method-InteractiveFilterState-server}{\code{InteractiveFilterState$server()}}
\item \href{#method-InteractiveFilterState-ui}{\code{InteractiveFilterState$ui()}}
\item \href{#method-InteractiveFilterState-clone}{\code{InteractiveFilterState$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-new"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{InteractiveFilterState} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$new(
  x,
  x_reactive = reactive(NULL),
  dataname,
  varname,
  choices = NULL,
  selected = NULL,
  keep_na = NULL,
  keep_inf = NULL,
  fixed = FALSE,
  extract_type = character(0),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{vector})\cr
values of the variable used in filter}

\item{\code{x_reactive}}{(\code{reactive})\cr
returning vector of the same type as \code{x}. Is used to update
counts following the change in values of the filtered dataset.
If it is set to \code{reactive(NULL)} then counts based on filtered
dataset are not shown.}

\item{\code{dataname}}{(\code{character(1)})\cr
optional name of dataset where \code{x} is taken from. Must be specified
if \code{extract_type} argument is not empty.}

\item{\code{varname}}{(\code{character(1)})\cr
name of the variable.}

\item{\code{choices}}{(\code{atomic}, \code{NULL})\cr
vector specifying allowed selection values}

\item{\code{selected}}{(\code{atomic}, \code{NULL})\cr
vector specifying selection}

\item{\code{keep_na}}{(\code{logical(1)}, \code{NULL})\cr
flag specifying whether to keep missing values}

\item{\code{keep_inf}}{(\code{logical(1)}, \code{NULL})\cr
flag specifying whether to keep infinite values}

\item{\code{fixed}}{(\code{logical(1)})\cr
flag specifying whether the \code{FilterState} is initiated fixed}

\item{\code{extract_type}}{(\code{character(0)}, \code{character(1)})\cr
whether condition calls should be prefixed by dataname. Possible values:
\itemize{
\item{\code{character(0)} (default)}{ \code{varname} in the condition call will not be prefixed}
\item{\code{"list"}}{ \code{varname} in the condition call will be returned as \verb{<dataname>$<varname>}}
\item{\code{"matrix"}}{ \code{varname} in the condition call will be returned as \verb{<dataname>[, <varname>]}}
}}

\item{\code{...}}{additional arguments to be saved as a list in \code{private$extras} field}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-destroy_observers"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-destroy_observers}{}}}
\subsection{Method \code{destroy_observers()}}{
Destroy observers stored in \code{private$observers}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$destroy_observers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-format"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{FilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$format(indent = 0L, wrap_width = 76L)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)})
number of spaces before after each new line character of the formatted string;
defaults to 0}

\item{\code{wrap_width}}{(\code{numeric(1)})
number of characters to wrap lines at in the printed output;
allowed range is 30 to 120; defaults to 76}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection relevant
for selected variable type.
Method is using internal reactive values which makes it reactive
and must be executed in reactive or isolated context.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$get_call()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-get_dataname"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-get_dataname}{}}}
\subsection{Method \code{get_dataname()}}{
Returns dataname or "NULL" if dataname is NULL.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$get_dataname()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-get_keep_na"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-get_keep_na}{}}}
\subsection{Method \code{get_keep_na()}}{
Returns current \code{keep_na} selection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$get_keep_na()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{logical(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-get_keep_inf"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-get_keep_inf}{}}}
\subsection{Method \code{get_keep_inf()}}{
Returns current \code{keep_inf} selection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$get_keep_inf()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{logical(1)})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-get_varlabel"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-get_varlabel}{}}}
\subsection{Method \code{get_varlabel()}}{
Returns variable label.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$get_varlabel()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-get_varname"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-get_varname}{}}}
\subsection{Method \code{get_varname()}}{
Get variable name.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$get_varname()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-get_selected"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-get_selected}{}}}
\subsection{Method \code{get_selected()}}{
Get selected values from \code{FilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$get_selected()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
class of the returned object depends of class of the \code{FilterState}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-get_state"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-get_state}{}}}
\subsection{Method \code{get_state()}}{
Returns filtering state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$get_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{teal_slice} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-print"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-print}{}}}
\subsection{Method \code{print()}}{
Prints this \code{FilterState} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{additional arguments to this method}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-set_keep_na"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-set_keep_na}{}}}
\subsection{Method \code{set_keep_na()}}{
Set whether to keep NAs.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$set_keep_na(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{\code{logical(1)}\cr
value(s) which come from the filter selection. Value is set in \code{server}
modules after selecting check-box-input in the shiny interface. Values are set to
\code{private$keep_na} which is reactive.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-set_keep_inf"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-set_keep_inf}{}}}
\subsection{Method \code{set_keep_inf()}}{
Set whether to keep Infs
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$set_keep_inf(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{logical(1)})\cr
Value(s) which come from the filter selection. Value is set in \code{server}
modules after selecting check-box-input in the shiny interface. Values are set to
\code{private$keep_inf} which is reactive.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-set_na_rm"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-set_na_rm}{}}}
\subsection{Method \code{set_na_rm()}}{
Some methods need an additional \code{!is.na(varame)} condition to drop
missing values. When \code{private$na_rm = TRUE}, \code{self$get_call} returns
condition extended by \code{!is.na}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$set_na_rm(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{\code{logical(1)}\cr
when \code{TRUE}, \code{FilterState$get_call} appends an expression
removing \code{NA} values to the filter expression returned by \code{get_call}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-set_selected"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-set_selected}{}}}
\subsection{Method \code{set_selected()}}{
Set selection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$set_selected(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{vector})\cr
value(s) that come from filter selection; values are set in the
module server after a selection is made in the app interface;
values are stored in \code{private$selected} which is reactive;
value types have to be the same as \code{private$choices}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-set_state"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-set_state}{}}}
\subsection{Method \code{set_state()}}{
Sets filtering state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$set_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{a (\code{teal_slice}) object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-server"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-server}{}}}
\subsection{Method \code{server()}}{
Shiny module server.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny module instance id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns reactive value
signaling that remove button has been clicked
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-ui"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-ui}{}}}
\subsection{Method \code{ui()}}{
Shiny module UI.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$ui(id, parent_id = "cards")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny element (module instance) id;
the UI for this class contains simple message stating that it is not supported}

\item{\code{parent_id}}{(\code{character(1)}) id of the FilterStates card container
module with inputs}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-InteractiveFilterState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-InteractiveFilterState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{InteractiveFilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
