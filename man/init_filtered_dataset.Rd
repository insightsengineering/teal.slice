% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilteredDataset.R
\name{init_filtered_dataset}
\alias{init_filtered_dataset}
\title{Initializes \code{FilteredDataset}}
\usage{
init_filtered_dataset(
  dataset,
  dataname,
  keys = character(0),
  label = attr(dataset, "label"),
  metadata = NULL
)
}
\arguments{
\item{dataset}{(\code{data.frame} or \code{MultiAssayExperiment})\cr}

\item{dataname}{(\code{character})\cr
A given name for the dataset it may not contain spaces}

\item{keys}{optional, (\code{character})\cr
Vector with primary keys}

\item{label}{(\code{character})\cr
Label to describe the dataset}

\item{metadata}{(named \code{list} or \code{NULL}) \cr
Field containing metadata about the dataset. Each element of the list
should be atomic and length one.}
}
\description{
Initializes \code{FilteredDataset}
}
\note{
Although this function is exported for use in other packages, it may be changed or removed in a future release
at which point any code which relies on this exported function will need to be changed.
}
\examples{
# DefaultFilteredDataset example
iris_fd <- teal.slice:::init_filtered_dataset(
  iris,
  dataname = "iris",
  metadata = list(type = "teal")
)
\dontrun{
shinyApp(
  ui = fluidPage(
    iris_fd$ui_add_filter_state(id = "add"),
    iris_fd$ui("dataset"),
    verbatimTextOutput("call"),
    verbatimTextOutput("metadata")
  ),
  server = function(input, output, session) {
    iris_fd$srv_add_filter_state(id = "add")
    iris_fd$server(id = "dataset")

    output$metadata <- renderText({
      paste("Type =", iris_fd$get_metadata()$type)
    })

    output$call <- renderText({
      paste(
        vapply(iris_fd$get_call(), deparse1, character(1), collapse = "\n"),
        collapse = "\n"
      )
    })
  }
)
}

# MAEFilteredDataset example
library(MultiAssayExperiment)
data(miniACC)
MAE_fd <- teal.slice:::init_filtered_dataset(miniACC, "MAE", metadata = list(type = "MAE"))
\dontrun{
shinyApp(
  ui = fluidPage(
    MAE_fd$ui_add_filter_state(id = "add"),
    MAE_fd$ui("dataset"),
    verbatimTextOutput("call"),
    verbatimTextOutput("metadata")
  ),
  server = function(input, output, session) {
    MAE_fd$srv_add_filter_state(id = "add")
    MAE_fd$server(id = "dataset")
    output$metadata <- renderText({
      paste("Type =", MAE_fd$get_metadata()$type)
    })
    output$call <- renderText({
      paste(
        vapply(MAE_fd$get_call(), deparse1, character(1), collapse = "\n"),
        collapse = "\n"
      )
    })
  }
)
}
}
\keyword{internal}
