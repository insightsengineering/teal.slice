% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStateExpr.R
\docType{class}
\name{FilterStateExpr}
\alias{FilterStateExpr}
\title{\code{FilterStateExpr} Class}
\description{
Class to handle filter expression.
}
\details{
This class is responsible for displaying filter card and returning filter expression
}
\examples{
filter_state <- teal.slice:::FilterStateExpr$new(
  slice = filter_expr(
    dataname = "x",
    id = "FA",
    title = "Adult females",
    expr = "sex == 'F' & age >= 18"
  )
)
filter_state$get_call()

\dontrun{
# working filter in an app
library(shiny)
library(shinyjs)

ui <- fluidPage(
  useShinyjs(),
  include_css_files(pattern = "filter-panel"),
  include_js_files(pattern = "count-bar-labels"),
  column(4, div(
    h4("ChoicesFilterState"),
    filter_state$ui("fs")
  )),
  column(8, div(
    h4("Condition (i.e. call)"), # display the subsetting call generated by this FilterState
    textOutput("condition_choices"), br(),
    h4("Unformatted state"), # display raw filter state
    textOutput("unformatted_choices"), br(),
    h4("Formatted state"), # display human readable filter state
    textOutput("formatted_choices"), br()
  ))
)

server <- function(input, output, session) {
  filter_state$server("fs")
  output$condition_choices <- renderPrint(filter_state$get_call())
  output$formatted_choices <- renderText(filter_state$format())
  output$unformatted_choices <- renderPrint(filter_state$get_state())
}

if (interactive()) {
  shinyApp(ui, server)
}
}
}
\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FilterStateExpr-new}{\code{FilterStateExpr$new()}}
\item \href{#method-FilterStateExpr-format}{\code{FilterStateExpr$format()}}
\item \href{#method-FilterStateExpr-print}{\code{FilterStateExpr$print()}}
\item \href{#method-FilterStateExpr-get_state}{\code{FilterStateExpr$get_state()}}
\item \href{#method-FilterStateExpr-set_state}{\code{FilterStateExpr$set_state()}}
\item \href{#method-FilterStateExpr-get_call}{\code{FilterStateExpr$get_call()}}
\item \href{#method-FilterStateExpr-destroy_observers}{\code{FilterStateExpr$destroy_observers()}}
\item \href{#method-FilterStateExpr-server}{\code{FilterStateExpr$server()}}
\item \href{#method-FilterStateExpr-ui}{\code{FilterStateExpr$ui()}}
\item \href{#method-FilterStateExpr-clone}{\code{FilterStateExpr$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-new"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilterStateExpr} object
\subsection{Usage}{
<<<<<<< HEAD
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$new(slice)}\if{html}{\out{</div>}}
=======
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$new(
  dataname,
  id,
  title,
  expr,
  disabled = FALSE,
  locked = FALSE,
  ...
)}\if{html}{\out{</div>}}
>>>>>>> filter_panel_refactor@main
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
<<<<<<< HEAD
\item{\code{slice}}{(\code{teal_slice_expr})\cr
object created using \code{\link[=filter_expr]{filter_expr()}} functions. \code{teal_slice} is stored
in the class and \code{set_state} directly manipulates values within \code{teal_slice}. \code{get_state}
returns \code{teal_slice} object which can be reused in other places. Beware, that \code{teal_slice}
is an immutable object which means that changes in particular object are automatically
reflected in all places which refer to the same \code{teal_slice}.}
=======
\item{\code{dataname}}{(\code{character(1)})\cr
name of the dataset where \code{expr} could be executed on.}

\item{\code{id}}{(\code{character(1)})\cr
identifier of the filter}

\item{\code{title}}{(\code{character(1)})\cr
title of the filter
logical expression written in executable way. By "executable" means
that \code{subset} call should be able to evaluate this without failure. For
example \code{MultiAssayExperiment::subsetByColData} requires variable names prefixed
by dataname (e.g. \code{data$var1 == "x" & data$var2 > 0}). For \code{data.frame} call
can be written without prefixing \code{var1 == "x" & var2 > 0}.}

\item{\code{expr}}{(\code{character(1)})\cr}

\item{\code{disabled}}{(\code{logical(1)})\cr
flag specifying whether the \code{FilterState} is initiated disabled}

\item{\code{locked}}{(\code{logical(1)}) \cr
flag specifying whether the \code{FilterState} is initiated locked}

\item{\code{...}}{additional arguments to be saved as a list in \code{private$extras} field}
>>>>>>> filter_panel_refactor@main
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{FilterStateExpr}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-format"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{FilterStateExpr} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$format(show_all = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{show_all}}{\code{logical(1)} passed to \code{format.teal_slice}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-print"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-print}{}}}
\subsection{Method \code{print()}}{
Prints this \code{FilterStateExpr} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{additional arguments}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-get_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-get_state}{}}}
\subsection{Method \code{get_state()}}{
Returns filtering state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$get_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{teal_slice} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-set_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-set_state}{}}}
\subsection{Method \code{set_state()}}{
Sets filtering state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$set_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{a \code{teal_slice} object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{self} invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-get_call}{}}}
\subsection{Method \code{get_call()}}{
Get reproducible call
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$get_call(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{ignored}) for a consistency with \code{FilterState}

Returns reproducible condition call for current selection relevant
for selected variable type.
Method is using internal reactive values which makes it reactive
and must be executed in reactive or isolated context.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{language}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-destroy_observers"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-destroy_observers}{}}}
\subsection{Method \code{destroy_observers()}}{
Destroy observers stored in \code{private$observers}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$destroy_observers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-server"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-server}{}}}
\subsection{Method \code{server()}}{
Shiny module server.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny module instance id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns reactive value
signaling that remove button has been clicked
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-ui"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-ui}{}}}
\subsection{Method \code{ui()}}{
Shiny module UI.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$ui(id, parent_id = "cards")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny element (module instance) id;
the UI for this class contains simple message stating that it is not supported}

\item{\code{parent_id}}{(\code{character(1)}) id of the FilterStates card container}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterStateExpr-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FilterStateExpr-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStateExpr$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
