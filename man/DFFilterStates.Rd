% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStatesDF.R
\name{DFFilterStates}
\alias{DFFilterStates}
\title{\code{DFFFilterStates}}
\description{
Specialization of \code{FilterStates} for a base \code{data.frame}.
}
\examples{

## ------------------------------------------------
## Method `DFFilterStates$set_filter_state`
## ------------------------------------------------

dffs <- teal.slice:::DFFilterStates$new(
  input_dataname = "iris",
  output_dataname = "iris_filtered",
  datalabel = character(0),
  varlabels = character(0),
  keys = character(0)
)
fs <- list(
  Sepal.Length = list(selected = c(5.1, 6.4), keep_na = TRUE, keep_inf = TRUE),
  Species = list(selected = c("setosa", "versicolor"), keep_na = FALSE)
)
shiny::isolate(dffs$set_filter_state(state = fs, data = iris))
shiny::isolate(dffs$get_filter_state())

}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterStates]{teal.slice::FilterStates}} -> \code{DFFilterStates}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DFFilterStates-new}{\code{DFFilterStates$new()}}
\item \href{#method-DFFilterStates-format}{\code{DFFilterStates$format()}}
\item \href{#method-DFFilterStates-get_fun}{\code{DFFilterStates$get_fun()}}
\item \href{#method-DFFilterStates-server}{\code{DFFilterStates$server()}}
\item \href{#method-DFFilterStates-get_filter_state}{\code{DFFilterStates$get_filter_state()}}
\item \href{#method-DFFilterStates-set_filter_state}{\code{DFFilterStates$set_filter_state()}}
\item \href{#method-DFFilterStates-remove_filter_state}{\code{DFFilterStates$remove_filter_state()}}
\item \href{#method-DFFilterStates-ui_add_filter_state}{\code{DFFilterStates$ui_add_filter_state()}}
\item \href{#method-DFFilterStates-srv_add_filter_state}{\code{DFFilterStates$srv_add_filter_state()}}
\item \href{#method-DFFilterStates-clone}{\code{DFFilterStates$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_call"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_call'><code>teal.slice::FilterStates$get_call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_datalabel"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_datalabel'><code>teal.slice::FilterStates$get_datalabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_filter_count"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_filter_count'><code>teal.slice::FilterStates$get_filter_count()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="print"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-print'><code>teal.slice::FilterStates$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="state_list_empty"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-state_list_empty'><code>teal.slice::FilterStates$state_list_empty()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="state_list_get"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-state_list_get'><code>teal.slice::FilterStates$state_list_get()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="state_list_push"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-state_list_push'><code>teal.slice::FilterStates$state_list_push()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="state_list_remove"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-state_list_remove'><code>teal.slice::FilterStates$state_list_remove()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="ui"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-ui'><code>teal.slice::FilterStates$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-new"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-new}{}}}
\subsection{Method \code{new()}}{
Initializes \code{DFFilterStates} object.

Initializes \code{DFFilterStates} object by setting \code{input_dataname},
\code{output_dataname} and initializing \code{state_list} (\code{shiny::reactiveVal}).
This class contains a single \code{state_list} with no specified name,
which means that when calling the subset function associated with this class
(\code{dplyr::filter}), a list of conditions is passed to unnamed arguments (\code{...}).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$new(input_dataname, output_dataname, datalabel, varlabels, keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the data used on \code{rhs} of the \emph{subset expression}
specified to the function argument attached to this \code{FilterStates}}

\item{\code{output_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the output data on the \code{lhs} of the \emph{subset expression}}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value}

\item{\code{varlabels}}{(\code{character})\cr
labels of the variables used in this object}

\item{\code{keys}}{(\code{character})\cr
key columns names}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-format"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{FilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces prepended to each line of the output}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-get_fun"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-get_fun}{}}}
\subsection{Method \code{get_fun()}}{
Gets the name of the function used to filter the data in this \code{FilterStates}.

Get name of  function used to create the \emph{subset expression}.
For \code{DFFilterStates} this is \code{dplyr::filter}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$get_fun()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-server"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-server}{}}}
\subsection{Method \code{server()}}{
Shiny server module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny module instance id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Gets the reactive values from the active \code{FilterState} objects.

Get active filter state from the \code{FilterState} objects kept in \code{state_list}.
The output list is a compatible input to \code{self$set_filter_state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} with named elements corresponding to \code{FilterState} in the \code{state_list}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$set_filter_state(
  data,
  state,
  vars_include = get_supported_filter_varnames(data = data),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{data.frame})\cr
data object for which to define a subset}

\item{\code{state}}{(\verb{named list})\cr
should contain values of initial selections in the \code{FilterState};
\code{list} names must correspond to column names in \code{data}}

\item{\code{vars_include}}{(\code{character(n)})\cr
optional, vector of column names to be included}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{dffs <- teal.slice:::DFFilterStates$new(
  input_dataname = "iris",
  output_dataname = "iris_filtered",
  datalabel = character(0),
  varlabels = character(0),
  keys = character(0)
)
fs <- list(
  Sepal.Length = list(selected = c(5.1, 6.4), keep_na = TRUE, keep_inf = TRUE),
  Species = list(selected = c("setosa", "versicolor"), keep_na = FALSE)
)
shiny::isolate(dffs$set_filter_state(state = fs, data = iris))
shiny::isolate(dffs$get_filter_state())

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Remove a \code{FilterState} from the \code{state_list}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$remove_filter_state(state_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(\code{character(1)})\cr name of \code{state_list} element}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-ui_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-ui_add_filter_state}{}}}
\subsection{Method \code{ui_add_filter_state()}}{
Shiny UI module to add filter variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$ui_add_filter_state(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny element (module instance) id}

\item{\code{data}}{(\code{data.frame})\cr
data object for which to define a subset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{shiny.tag}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-srv_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-srv_add_filter_state}{}}}
\subsection{Method \code{srv_add_filter_state()}}{
Shiny server module to add filter variable.

This module controls available choices to select as a filter variable.
Once selected, a variable is removed from available choices.
Removing a filter variable adds it back to available choices.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$srv_add_filter_state(
  id,
  data,
  vars_include = get_supported_filter_varnames(data = data),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny module instance id}

\item{\code{data}}{(\code{data.frame})\cr
data object for which to define a subset}

\item{\code{vars_include}}{(\code{character(n)})\cr
optional, vector of column names to be included}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
