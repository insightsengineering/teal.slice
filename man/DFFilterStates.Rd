% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStates.R
\name{DFFilterStates}
\alias{DFFilterStates}
\title{\code{DFFFilterStates}}
\description{
Specialization of \code{FilterStates} for a base \code{data.frame}.
}
\examples{

## ------------------------------------------------
## Method `DFFilterStates$set_filter_state`
## ------------------------------------------------

dffs <- teal.slice:::DFFilterStates$new(
  input_dataname = "iris",
  output_dataname = "iris_filtered",
  datalabel = character(0),
  varlabels = character(0),
  keys = character(0)
)
fs <- list(
  Sepal.Length = list(selected = c(5.1, 6.4), keep_na = TRUE, keep_inf = TRUE),
  Species = list(selected = c("setosa", "versicolor"), keep_na = FALSE)
)
dffs$set_filter_state(state = fs, data = iris)
shiny::isolate(dffs$get_filter_state())

}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterStates]{teal.slice::FilterStates}} -> \code{DFFilterStates}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DFFilterStates-new}{\code{DFFilterStates$new()}}
\item \href{#method-DFFilterStates-format}{\code{DFFilterStates$format()}}
\item \href{#method-DFFilterStates-get_fun}{\code{DFFilterStates$get_fun()}}
\item \href{#method-DFFilterStates-server}{\code{DFFilterStates$server()}}
\item \href{#method-DFFilterStates-get_filter_state}{\code{DFFilterStates$get_filter_state()}}
\item \href{#method-DFFilterStates-set_filter_state}{\code{DFFilterStates$set_filter_state()}}
\item \href{#method-DFFilterStates-remove_filter_state}{\code{DFFilterStates$remove_filter_state()}}
\item \href{#method-DFFilterStates-ui_add_filter_state}{\code{DFFilterStates$ui_add_filter_state()}}
\item \href{#method-DFFilterStates-srv_add_filter_state}{\code{DFFilterStates$srv_add_filter_state()}}
\item \href{#method-DFFilterStates-clone}{\code{DFFilterStates$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_call"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_call'><code>teal.slice::FilterStates$get_call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_datalabel"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_datalabel'><code>teal.slice::FilterStates$get_datalabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="print"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-print'><code>teal.slice::FilterStates$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_empty"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_empty'><code>teal.slice::FilterStates$queue_empty()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_get"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_get'><code>teal.slice::FilterStates$queue_get()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_initialize"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_initialize'><code>teal.slice::FilterStates$queue_initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_push"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_push'><code>teal.slice::FilterStates$queue_push()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_remove"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_remove'><code>teal.slice::FilterStates$queue_remove()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="ui"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-ui'><code>teal.slice::FilterStates$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-new"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-new}{}}}
\subsection{Method \code{new()}}{
Initializes \code{DFFilterStates} object

Initializes \code{DFFilterStates} object by setting \code{input_dataname},
\code{output_dataname} and initializing \code{ReactiveQueue}. This class contains a
single \code{ReactiveQueue} with no specified name which means that
when calling the function associated to this class (\code{dplyr::filter}), a list of
conditions are passed to unnamed arguments (\code{...}).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$new(input_dataname, output_dataname, datalabel, varlabels, keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the data used on lhs of the expression
specified to the function argument attached to this \code{FilterStates}.}

\item{\code{output_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the output data on the lhs of the assignment expression.}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value.}

\item{\code{varlabels}}{(\code{character})\cr
labels of the variables used in this object}

\item{\code{keys}}{(\code{character})\cr
key columns names}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-format"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-format}{}}}
\subsection{Method \code{format()}}{
Returns the formatted string representing this \code{FilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces before each line of the representation}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-get_fun"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-get_fun}{}}}
\subsection{Method \code{get_fun()}}{
Get function name

Get function name used to create filter call.
For \code{DFFilterStates} \code{dplyr::filter} is used
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$get_fun()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-server"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-server}{}}}
\subsection{Method \code{server()}}{
Server module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Gets the reactive values from the active \code{FilterState} objects.

Get active filter state from the \code{FilterState} objects kept in \code{ReactiveQueue}.
The output list is a compatible input to \code{self$set_filter_state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} with named elements corresponding to \code{FilterState} in the \code{ReactiveQueue}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$set_filter_state(
  data,
  state,
  vars_include = get_filterable_varnames(data = data),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{data.frame})\cr
data which are supposed to be filtered.}

\item{\code{state}}{(\verb{named list})\cr
should contain values which are initial selection in the \code{FilterState}.
Names of the \code{list} element should correspond to the name of the
column in \code{data}.}

\item{\code{vars_include}}{(\code{character(n)})\cr
optional, vector of column names to be included.}

\item{\code{...}}{ignored.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{dffs <- teal.slice:::DFFilterStates$new(
  input_dataname = "iris",
  output_dataname = "iris_filtered",
  datalabel = character(0),
  varlabels = character(0),
  keys = character(0)
)
fs <- list(
  Sepal.Length = list(selected = c(5.1, 6.4), keep_na = TRUE, keep_inf = TRUE),
  Species = list(selected = c("setosa", "versicolor"), keep_na = FALSE)
)
dffs$set_filter_state(state = fs, data = iris)
shiny::isolate(dffs$get_filter_state())

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Remove a \code{FilterState} from the \code{ReactiveQueue}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$remove_filter_state(element_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{element_id}}{(\code{character(1)})\cr name of \code{ReactiveQueue} element.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-ui_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-ui_add_filter_state}{}}}
\subsection{Method \code{ui_add_filter_state()}}{
Shiny UI module to add filter variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$ui_add_filter_state(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny module}

\item{\code{data}}{(\code{data.frame})\cr
object which columns are used to choose filter variables.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny.tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-srv_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-srv_add_filter_state}{}}}
\subsection{Method \code{srv_add_filter_state()}}{
Shiny server module to add filter variable

Module controls available choices to select as a filter variable.
Selected filter variable is being removed from available choices.
Removed filter variable gets back to available choices.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$srv_add_filter_state(
  id,
  data,
  vars_include = get_filterable_varnames(data = data),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{data}}{(\code{data.frame})\cr
object which columns are used to choose filter variables.}

\item{\code{vars_include}}{(\code{character(n)})\cr
optional, vector of column names to be included.}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
description
Get label of specific variable. In case when variable label is missing
name of the variable is returned.
parameter variable (\code{character})\cr
name of the variable for which label should be returned
return \code{character}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
