% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStatesDF.R
\name{DFFilterStates}
\alias{DFFilterStates}
\title{\code{FilterStates} subclass for data frames}
\description{
Handles filter states in a \code{data.frame}
}
\examples{
# working filters in an app

library(shiny)
library(shinyjs)

# create data frame to filter
data_df <- data.frame(
  NUM1 = 1:100,
  NUM2 = round(runif(100, min = 20, max = 23)),
  CHAR1 = sample(LETTERS[1:6], size = 100, replace = TRUE),
  CHAR2 = sample(c("M", "F"), size = 100, replace = TRUE),
  DATE = seq(as.Date("2020-01-01"), by = 1, length.out = 100),
  DATETIME = as.POSIXct(seq(as.Date("2020-01-01"), by = 1, length.out = 100))
)
data_na <- data.frame(
  NUM1 = NA,
  NUM2 = NA,
  CHAR1 = NA,
  CHAR2 = NA,
  DATE = NA,
  DATETIME = NA
)
data_df <- rbind(data_df, data_na)


# initiate FilterStates object
filter_states_df <- init_filter_states(
  data = data_df,
  dataname = "dataset",
  datalabel = ("label"),
  varlabels = c("long", "short", "long", "short", "long", "long")
)

ui <- fluidPage(
  useShinyjs(),
  teal.slice:::include_css_files(pattern = "filter-panel"),
  teal.slice:::include_js_files(pattern = "count-bar-labels"),
  column(4, div(
    h4("Active filters"),
    filter_states_df$ui_active("fsdf")
  )),
  column(4, div(
    h4("Manual filter control"),
    filter_states_df$ui_add("add_filters"), br(),
    h4("Condition (i.e. call)"), # display the subsetting call generated by this FilterStates
    textOutput("call_df"), br(),
    h4("Formatted state"), # display human readable filter state
    textOutput("formatted_df"), br()
  )),
  column(4, div(
    h4("Programmatic filter control"),
    actionButton("button1_df", "set NUM1 < 30", width = "100\%"), br(),
    actionButton("button2_df", "set NUM2 \%in\% c(20, 21)", width = "100\%"), br(),
    actionButton("button3_df", "set CHAR1 \%in\% c(\"B\", \"C\", \"D\")", width = "100\%"), br(),
    actionButton("button4_df", "set CHAR2 == \"F\"", width = "100\%"), br(),
    actionButton("button5_df", "set DATE <= 2020-02-02", width = "100\%"), br(),
    actionButton("button6_df", "set DATETIME <= 2020-02-02", width = "100\%"), br(),
    hr(),
    actionButton("button7_df", "remove NUM1", width = "100\%"), br(),
    actionButton("button8_df", "remove NUM2", width = "100\%"), br(),
    actionButton("button9_df", "remove CHAR1", width = "100\%"), br(),
    actionButton("button10_df", "remove CHAR2", width = "100\%"), br(),
    actionButton("button11_df", "remove DATE", width = "100\%"), br(),
    actionButton("button12_df", "remove DATETIME", width = "100\%"), br(),
    hr(),
    actionButton("button0_df", "clear all filters", width = "100\%"), br()
  ))
)

server <- function(input, output, session) {
  filter_states_df$srv_add("add_filters")
  filter_states_df$srv_active("fsdf")

  output$call_df <- renderPrint(filter_states_df$get_call())
  output$formatted_df <- renderText(filter_states_df$format())

  observeEvent(input$button1_df, {
    filter_state <- filter_settings(filter_var("dataset", "NUM1", selected = c(0, 30)))
    filter_states_df$set_filter_state(state = filter_state)
  })
  observeEvent(input$button2_df, {
    filter_state <- filter_settings(filter_var("dataset", "NUM2", selected = c(20, 21)))
    filter_states_df$set_filter_state(state = filter_state)
  })
  observeEvent(input$button3_df, {
    filter_state <- filter_settings(filter_var("dataset", "CHAR1", selected = c("B", "C", "D")))
    filter_states_df$set_filter_state(state = filter_state)
  })
  observeEvent(input$button4_df, {
    filter_state <- filter_settings(filter_var("dataset", "CHAR2", selected = c("F")))
    filter_states_df$set_filter_state(state = filter_state)
  })
  observeEvent(input$button5_df, {
    filter_state <- filter_settings(
      filter_var("dataset", "DATE", selected = c("2020-01-01", "2020-02-02"))
    )
    filter_states_df$set_filter_state(state = filter_state)
  })
  observeEvent(input$button6_df, {
    filter_state <- filter_settings(
      filter_var("dataset", "DATETIME", selected = as.POSIXct(c("2020-01-01", "2020-02-02")))
    )
    filter_states_df$set_filter_state(state = filter_state)
  })
  observeEvent(input$button7_df, filter_states_df$remove_filter_state(state_id = "NUM1"))
  observeEvent(input$button8_df, filter_states_df$remove_filter_state(state_id = "NUM2"))
  observeEvent(input$button9_df, filter_states_df$remove_filter_state(state_id = "CHAR1"))
  observeEvent(input$button10_df, filter_states_df$remove_filter_state(state_id = "CHAR2"))
  observeEvent(input$button11_df, filter_states_df$remove_filter_state(state_id = "DATE"))
  observeEvent(input$button12_df, filter_states_df$remove_filter_state(state_id = "DATETIME"))
  observeEvent(input$button0_df, filter_states_df$clear_filter_states())
}
\dontrun{
if (interactive()) {
  shinyApp(ui, server)
}
}


## ------------------------------------------------
## Method `DFFilterStates$set_filter_state`
## ------------------------------------------------

df <- data.frame(
  character = letters,
  numeric = seq_along(letters),
  date = seq(Sys.Date(), length.out = length(letters), by = "1 day"),
  datetime = seq(Sys.time(), length.out = length(letters), by = "33.33 hours")
)
filter_states <- teal.slice:::DFFilterStates$new(
  data = df,
  dataname = "data",
  datalabel = character(0),
  keys = character(0)
)
filter_states$set_filter_state(
  filter_settings(
    filter_var(dataname = "data", varname = "character", selected = "a")
  )
)
isolate(filter_states$get_call())

}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterStates]{teal.slice::FilterStates}} -> \code{DFFilterStates}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DFFilterStates-new}{\code{DFFilterStates$new()}}
\item \href{#method-DFFilterStates-format}{\code{DFFilterStates$format()}}
\item \href{#method-DFFilterStates-get_fun}{\code{DFFilterStates$get_fun()}}
\item \href{#method-DFFilterStates-get_filter_state}{\code{DFFilterStates$get_filter_state()}}
\item \href{#method-DFFilterStates-set_filter_state}{\code{DFFilterStates$set_filter_state()}}
\item \href{#method-DFFilterStates-remove_filter_state}{\code{DFFilterStates$remove_filter_state()}}
\item \href{#method-DFFilterStates-set_filterable_varnames}{\code{DFFilterStates$set_filterable_varnames()}}
\item \href{#method-DFFilterStates-srv_active}{\code{DFFilterStates$srv_active()}}
\item \href{#method-DFFilterStates-ui_add}{\code{DFFilterStates$ui_add()}}
\item \href{#method-DFFilterStates-srv_add}{\code{DFFilterStates$srv_add()}}
\item \href{#method-DFFilterStates-clone}{\code{DFFilterStates$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="clear_filter_states"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-clear_filter_states'><code>teal.slice::FilterStates$clear_filter_states()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_call"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_call'><code>teal.slice::FilterStates$get_call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_datalabel"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_datalabel'><code>teal.slice::FilterStates$get_datalabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_filter_count"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_filter_count'><code>teal.slice::FilterStates$get_filter_count()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="print"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-print'><code>teal.slice::FilterStates$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="ui_active"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-ui_active'><code>teal.slice::FilterStates$ui_active()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-new"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-new}{}}}
\subsection{Method \code{new()}}{
Initializes \code{DFFilterStates} object.

Initializes \code{DFFilterStates} object by setting \code{dataname}
and initializing \code{state_list} (\code{shiny::reactiveVal}).
This class contains a single \code{state_list} with no specified name,
which means that when calling the subset function associated with this class
(\code{dplyr::filter}), a list of conditions is passed to unnamed arguments (\code{...}).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$new(
  data,
  data_reactive = function(sid = "") NULL,
  dataname,
  datalabel = character(0),
  varlabels = character(0),
  excluded_varnames = character(0),
  count_type = c("all", "none"),
  keys = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{data.frame})\cr
the R object which \code{dplyr::filter} function is applied on.}

\item{\code{data_reactive}}{(\verb{function(sid)})\cr
should return a \code{data.frame} object or \code{NULL}.
This object is needed for the \code{FilterState} counts being updated
on a change in filters. If function returns \code{NULL} then filtered counts are not shown.
Function has to have \code{sid} argument being a character.}

\item{\code{dataname}}{(\code{character})\cr
name of the data used in the \emph{subset expression}
specified to the function argument attached to this \code{FilterStates}}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value}

\item{\code{varlabels}}{(\code{character})\cr
labels of the variables used in this object.}

\item{\code{excluded_varnames}}{(\code{character})\cr
names of variables that can \strong{not} be filtered on.}

\item{\code{count_type}}{\code{character(1)}\cr
specifying how observations are tallied.}

\item{\code{keys}}{(\code{character})\cr
key columns names}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-format"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{FilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces prepended to each line of the output}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-get_fun"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-get_fun}{}}}
\subsection{Method \code{get_fun()}}{
Gets the name of the function used to filter the data in this \code{FilterStates}.

Get name of  function used to create the \emph{subset expression}.
For \code{DFFilterStates} this is \code{dplyr::filter}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$get_fun()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Returns active \code{FilterState} objects.

Gets all filter state information from this dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{teal_slices}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$set_filter_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{teal_slices})}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} invisibly
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{df <- data.frame(
  character = letters,
  numeric = seq_along(letters),
  date = seq(Sys.Date(), length.out = length(letters), by = "1 day"),
  datetime = seq(Sys.time(), length.out = length(letters), by = "33.33 hours")
)
filter_states <- teal.slice:::DFFilterStates$new(
  data = df,
  dataname = "data",
  datalabel = character(0),
  keys = character(0)
)
filter_states$set_filter_state(
  filter_settings(
    filter_var(dataname = "data", varname = "character", selected = "a")
  )
)
isolate(filter_states$get_call())

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Remove one or more \code{FilterState}s from the \code{state_list} along with their UI elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$remove_filter_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{teal_slices})\cr
specifying \code{FilterState} objects to remove;
\code{teal_slice}s may contain only \code{dataname} and \code{varname}, other elements are ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-set_filterable_varnames"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-set_filterable_varnames}{}}}
\subsection{Method \code{set_filterable_varnames()}}{
Set the allowed filterable variables
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$set_filterable_varnames(varnames)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{varnames}}{(\code{character} or \code{NULL}) The variables which can be filtered}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
When retrieving the filtered variables only
those which have filtering supported (i.e. are of the permitted types)
are included.
}

\subsection{Returns}{
NULL invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-srv_active"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-srv_active}{}}}
\subsection{Method \code{srv_active()}}{
Shiny server module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$srv_active(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny module instance id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-ui_add"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-ui_add}{}}}
\subsection{Method \code{ui_add()}}{
Shiny UI module to add filter variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$ui_add(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
shiny element (module instance) id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{shiny.tag}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-srv_add"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-srv_add}{}}}
\subsection{Method \code{srv_add()}}{
Shiny server module to add filter variable.

This module controls available choices to select as a filter variable.
Once selected, a variable is removed from available choices.
Removing a filter variable adds it back to available choices.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$srv_add(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DFFilterStates-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DFFilterStates-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DFFilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
