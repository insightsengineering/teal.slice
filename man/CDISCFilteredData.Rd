% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CDISCFilteredData.R
\docType{class}
\name{CDISCFilteredData}
\alias{CDISCFilteredData}
\title{Class to encapsulate relational filtered datasets with its parents.}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
}
\details{
The \code{CDISCFilteredData} class implements logic to filter a relational
dataset by inheriting from \code{FilteredData}.
A dataset can have up to one parent dataset. Rows are identified by the foreign
key and only those rows that appear in the parent dataset are kept in the filtered
dataset.

The teal UI works with objects of class \code{FilteredData} which may mix CDISC and other
data (e.g. \code{iris}).
}
\examples{
library(scda)
library(teal.data)

ADSL <- synthetic_cdisc_data("latest")$adsl
ADTTE <- synthetic_cdisc_data("latest")$adtte
datasets <- teal.slice:::CDISCFilteredData$new(
  list(
    ADSL = list(dataset = ADSL, keys = c("STUDYID", "USUBJID")),
    ADTTE = list(dataset = ADTTE, keys = c("STUDYID", "USUBJID", "PARAMCD"), parent = "ADSL")
  ),
  check = FALSE,
  join_keys = join_keys(join_key("ADSL", "ADTTE", c("STUDYID", "USUBJID")))
)

# to avoid using isolate(), you can provide a default isolate context by calling
# options(shiny.suppressMissingContextError = TRUE) #nolint
# don't forget to deactivate this option at the end
# options(shiny.suppressMissingContextError = FALSE) #nolint

isolate({
  datasets$datanames()

  # number observations and subjects of filtered/non-filtered dataset
  datasets$get_filter_overview("ADSL")

  print(datasets$get_call("ADSL"))
  print(datasets$get_call("ADTTE"))

  df <- datasets$get_data("ADSL", filtered = FALSE)
  print(df)
})


datasets$set_filter_state(list(ADTTE = list(PARAMCD = "OS")))
isolate(datasets$get_filter_state())
}
\seealso{
\code{FilteredData} class
}
\section{Super class}{
\code{\link[teal.slice:FilteredData]{teal.slice::FilteredData}} -> \code{CDISCFilteredData}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-CDISCFilteredData-datanames}{\code{CDISCFilteredData$datanames()}}
\item \href{#method-CDISCFilteredData-get_call}{\code{CDISCFilteredData$get_call()}}
\item \href{#method-CDISCFilteredData-get_filterable_datanames}{\code{CDISCFilteredData$get_filterable_datanames()}}
\item \href{#method-CDISCFilteredData-get_filterable_varnames}{\code{CDISCFilteredData$get_filterable_varnames()}}
\item \href{#method-CDISCFilteredData-get_filter_overview}{\code{CDISCFilteredData$get_filter_overview()}}
\item \href{#method-CDISCFilteredData-get_parentname}{\code{CDISCFilteredData$get_parentname()}}
\item \href{#method-CDISCFilteredData-set_dataset}{\code{CDISCFilteredData$set_dataset()}}
\item \href{#method-CDISCFilteredData-clone}{\code{CDISCFilteredData$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_check"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_check'><code>teal.slice::FilteredData$get_check()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_code"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_code'><code>teal.slice::FilteredData$get_code()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_data"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_data'><code>teal.slice::FilteredData$get_data()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_datalabel"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_datalabel'><code>teal.slice::FilteredData$get_datalabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_filter_state"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_filter_state'><code>teal.slice::FilteredData$get_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_filtered_dataset"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_filtered_dataset'><code>teal.slice::FilteredData$get_filtered_dataset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_formatted_filter_state"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_formatted_filter_state'><code>teal.slice::FilteredData$get_formatted_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_join_keys"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_join_keys'><code>teal.slice::FilteredData$get_join_keys()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_keys"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_keys'><code>teal.slice::FilteredData$get_keys()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_metadata"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_metadata'><code>teal.slice::FilteredData$get_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_varlabels"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_varlabels'><code>teal.slice::FilteredData$get_varlabels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="get_varnames"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-get_varnames'><code>teal.slice::FilteredData$get_varnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="handle_active_datanames"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-handle_active_datanames'><code>teal.slice::FilteredData$handle_active_datanames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="initialize"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-initialize'><code>teal.slice::FilteredData$initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="remove_all_filter_states"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-remove_all_filter_states'><code>teal.slice::FilteredData$remove_all_filter_states()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="remove_filter_state"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-remove_filter_state'><code>teal.slice::FilteredData$remove_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="restore_state_from_bookmark"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-restore_state_from_bookmark'><code>teal.slice::FilteredData$restore_state_from_bookmark()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="set_check"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-set_check'><code>teal.slice::FilteredData$set_check()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="set_code"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-set_code'><code>teal.slice::FilteredData$set_code()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="set_filter_state"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-set_filter_state'><code>teal.slice::FilteredData$set_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="set_filterable_varnames"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-set_filterable_varnames'><code>teal.slice::FilteredData$set_filterable_varnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="set_join_keys"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-set_join_keys'><code>teal.slice::FilteredData$set_join_keys()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="srv_filter_overview"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-srv_filter_overview'><code>teal.slice::FilteredData$srv_filter_overview()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="srv_filter_panel"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-srv_filter_panel'><code>teal.slice::FilteredData$srv_filter_panel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="ui_filter_overview"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-ui_filter_overview'><code>teal.slice::FilteredData$ui_filter_overview()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredData" data-id="ui_filter_panel"><a href='../../teal.slice/html/FilteredData.html#method-FilteredData-ui_filter_panel'><code>teal.slice::FilteredData$ui_filter_panel()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CDISCFilteredData-datanames"></a>}}
\if{latex}{\out{\hypertarget{method-CDISCFilteredData-datanames}{}}}
\subsection{Method \code{datanames()}}{
Get datanames

The datanames are returned in the order in which they must be
evaluated (in case of dependencies).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CDISCFilteredData$datanames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{character} vector) of datanames
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CDISCFilteredData-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-CDISCFilteredData-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns the filter \code{call} to filter a single dataset including the \code{inner_join}
with its parent dataset. It assumes that the filtered datasets it depends
on are available.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CDISCFilteredData$get_call(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character(1)}) name of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{call} or \code{list} of calls ) to filter dataset
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CDISCFilteredData-get_filterable_datanames"></a>}}
\if{latex}{\out{\hypertarget{method-CDISCFilteredData-get_filterable_datanames}{}}}
\subsection{Method \code{get_filterable_datanames()}}{
Get names of datasets available for filtering
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CDISCFilteredData$get_filterable_datanames(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character} vector) names of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character} vector) of dataset names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CDISCFilteredData-get_filterable_varnames"></a>}}
\if{latex}{\out{\hypertarget{method-CDISCFilteredData-get_filterable_varnames}{}}}
\subsection{Method \code{get_filterable_varnames()}}{
Gets variable names of a given dataname for the filtering. This excludes parent dataset variable names.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CDISCFilteredData$get_filterable_varnames(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character(1)}) name of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character} vector) of variable names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CDISCFilteredData-get_filter_overview"></a>}}
\if{latex}{\out{\hypertarget{method-CDISCFilteredData-get_filter_overview}{}}}
\subsection{Method \code{get_filter_overview()}}{
Get filter overview table in form of X (filtered) / Y (non-filtered)

This is intended to be presented in the application.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CDISCFilteredData$get_filter_overview(datanames)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datanames}}{(\code{character} vector) names of the dataset (or "all")}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{matrix}) matrix of observations and subjects of all datasets
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CDISCFilteredData-get_parentname"></a>}}
\if{latex}{\out{\hypertarget{method-CDISCFilteredData-get_parentname}{}}}
\subsection{Method \code{get_parentname()}}{
Get parent dataset name
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CDISCFilteredData$get_parentname(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character(1)}) name of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character}) name of parent dataset
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CDISCFilteredData-set_dataset"></a>}}
\if{latex}{\out{\hypertarget{method-CDISCFilteredData-set_dataset}{}}}
\subsection{Method \code{set_dataset()}}{
Add dataset

Add dataset and preserve all attributes attached to this object.
Technically \code{set_dataset} created \code{FilteredDataset} which keeps
\code{dataset} for filtering purpose.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CDISCFilteredData$set_dataset(dataset_args, dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset_args}}{(\code{list})\cr
containing the arguments except (\code{dataname})
needed by \code{init_filtered_dataset} (can also
include \code{parent} which will be ignored)}

\item{\code{dataname}}{(\code{character(1)})\cr
the name of the \code{dataset} to be added to this object}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) object of this class
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-CDISCFilteredData-clone"></a>}}
\if{latex}{\out{\hypertarget{method-CDISCFilteredData-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CDISCFilteredData$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
