% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/teal_slices.R
\name{teal_slices}
\alias{teal_slices}
\alias{is.teal_slices}
\alias{as.teal_slices}
\alias{[.teal_slices}
\alias{c.teal_slices}
\alias{format.teal_slices}
\alias{print.teal_slices}
\title{Complete filter specification.}
\usage{
teal_slices(
  ...,
  exclude_varnames = NULL,
  include_varnames = NULL,
  count_type = NULL,
  allow_add = TRUE
)

is.teal_slices(x)

as.teal_slices(x)

\method{[}{teal_slices}(x, i)

\method{c}{teal_slices}(...)

\method{format}{teal_slices}(x, show_all = FALSE, trim_lines = TRUE, ...)

\method{print}{teal_slices}(x, ...)
}
\arguments{
\item{...}{any number of \code{teal_slice} objects. For \code{print} and \code{format},
additional arguments passed to other functions.}

\item{include_varnames, exclude_varnames}{(\verb{named list}s of \code{character}) where list names
match names of data sets and vector elements match variable names in respective data sets;
specify which variables are allowed to be filtered; see \code{Details}}

\item{count_type}{(\code{character(1)}) string specifying how observations are tallied by these filter states.
Possible options:
\itemize{
\item \code{"none"} (default) to have counts of single \code{FilterState} to show unfiltered number only.
\item \code{"all"} to have counts of single \code{FilterState} to show number of observation in filtered
and unfiltered dataset. Note, that issues were reported when using this option with \code{MultiAssayExperiment}.
Please make sure that adding new filters doesn't fail on target platform before deploying for production.
}}

\item{allow_add}{(\code{logical(1)}) logical flag specifying whether the user will be able to add new filters}

\item{x}{(\code{teal_slices}) object.}

\item{i}{(\code{character} or \code{numeric} or \code{logical}) indicating which elements to extract}

\item{show_all}{(\code{logical(1)}) whether to display non-null elements of constituent \code{teal_slice} objects}

\item{trim_lines}{(\code{logical(1)}) whether to trim lines}
}
\value{
\code{teal_slices}, which is an unnamed list of \code{teal_slice} objects.
}
\description{
Create \code{teal_slices} object to package multiple filters and additional settings.
}
\details{
\code{teal_slices()} collates multiple \code{teal_slice} objects into a \code{teal_slices} object,
a complete filter specification. This is used by all classes above \code{FilterState}
as well as \code{filter_panel_api} wrapper functions.
\code{teal_slices} has attributes that modify the behavior of the filter panel, which are resolved by different classes.

\code{include_varnames} and \code{exclude_varnames} determine which variables can have filters assigned.
The former enumerates allowed variables, the latter enumerates forbidden values.
Since these can be mutually exclusive in some cases, they cannot both be set in one \code{teal_slices} object.
}
\examples{
filter_1 <- teal_slice(
  dataname = "dataname1",
  varname = "varname1",
  choices = letters,
  selected = "b",
  keep_na = TRUE,
  fixed = FALSE,
  extra1 = "extraone"
)
filter_2 <- teal_slice(
  dataname = "dataname1",
  varname = "varname2",
  choices = 1:10,
  keep_na = TRUE,
  selected = 2,
  fixed = TRUE,
  anchored = FALSE,
  extra2 = "extratwo"
)
filter_3 <- teal_slice(
  dataname = "dataname2",
  varname = "varname3",
  choices = 1:10 / 10,
  keep_na = TRUE,
  selected = 0.2,
  fixed = TRUE,
  anchored = FALSE,
  extra1 = "extraone",
  extra2 = "extratwo"
)

all_filters <- teal_slices(
  filter_1,
  filter_2,
  filter_3,
  exclude_varnames = list(
    "dataname1" = "varname2"
  )
)

is.teal_slices(all_filters)
all_filters[1:2]
c(all_filters[1], all_filters[2])
print(all_filters)
print(all_filters, trim_lines = FALSE)

}
\seealso{
\code{\link{teal_slice}}
}
\keyword{internal}
