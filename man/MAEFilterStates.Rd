% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStates.R
\name{MAEFilterStates}
\alias{MAEFilterStates}
\title{\code{MAEFilterStates}}
\description{
Specialization of \code{FilterStates} for \code{MultiAssayExperiment}.
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterStates]{teal.slice::FilterStates}} -> \code{MAEFilterStates}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MAEFilterStates-new}{\code{MAEFilterStates$new()}}
\item \href{#method-MAEFilterStates-format}{\code{MAEFilterStates$format()}}
\item \href{#method-MAEFilterStates-get_fun}{\code{MAEFilterStates$get_fun()}}
\item \href{#method-MAEFilterStates-server}{\code{MAEFilterStates$server()}}
\item \href{#method-MAEFilterStates-get_filter_state}{\code{MAEFilterStates$get_filter_state()}}
\item \href{#method-MAEFilterStates-set_filter_state}{\code{MAEFilterStates$set_filter_state()}}
\item \href{#method-MAEFilterStates-remove_filter_state}{\code{MAEFilterStates$remove_filter_state()}}
\item \href{#method-MAEFilterStates-ui_add_filter_state}{\code{MAEFilterStates$ui_add_filter_state()}}
\item \href{#method-MAEFilterStates-srv_add_filter_state}{\code{MAEFilterStates$srv_add_filter_state()}}
\item \href{#method-MAEFilterStates-clone}{\code{MAEFilterStates$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_call"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_call'><code>teal.slice::FilterStates$get_call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_datalabel"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_datalabel'><code>teal.slice::FilterStates$get_datalabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="print"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-print'><code>teal.slice::FilterStates$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_empty"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_empty'><code>teal.slice::FilterStates$queue_empty()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_get"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_get'><code>teal.slice::FilterStates$queue_get()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_initialize"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_initialize'><code>teal.slice::FilterStates$queue_initialize()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_push"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_push'><code>teal.slice::FilterStates$queue_push()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="queue_remove"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-queue_remove'><code>teal.slice::FilterStates$queue_remove()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="ui"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-ui'><code>teal.slice::FilterStates$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-new"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-new}{}}}
\subsection{Method \code{new()}}{
Initializes \code{MAEFilterStates} object

Initialize \code{MAEFilterStates} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$new(
  input_dataname,
  output_dataname,
  datalabel,
  varlabels,
  keys
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the data used on lhs of the expression
specified to the function argument attached to this \code{FilterStates}.}

\item{\code{output_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the output data on the lhs of the assignment expression.}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value.}

\item{\code{varlabels}}{(\code{character})\cr
labels of the variables used in this object}

\item{\code{keys}}{(\code{character})\cr
key columns names}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-format"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-format}{}}}
\subsection{Method \code{format()}}{
Returns the formatted string representing this \code{MAEFilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces before each line of the representation}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-get_fun"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-get_fun}{}}}
\subsection{Method \code{get_fun()}}{
Returns function name used to create filter call.
For \code{MAEFilterStates} \code{MultiAssayExperiment::subsetByColData} is used.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$get_fun()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-server"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-server}{}}}
\subsection{Method \code{server()}}{
Server module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Returns active \code{FilterState} objects.

Gets all active filters from this dataset in form of the nested list.
The output list can be used as input to \code{self$set_filter_state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} with elements number equal number of \code{FilterStates}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$set_filter_state(data, state, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{MultiAssayExperiment})\cr
data which are supposed to be filtered.}

\item{\code{state}}{(\verb{named list})\cr
should contain values which are initial selection in the \code{FilterState}.
Names of the \code{list} element should correspond to the name of the
column in \code{colData(data)}.}

\item{\code{...}}{ignored.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Removes a variable from the \code{ReactiveQueue} and its corresponding UI element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$remove_filter_state(element_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{element_id}}{(\code{character(1)})\cr name of \code{ReactiveQueue} element.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-ui_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-ui_add_filter_state}{}}}
\subsection{Method \code{ui_add_filter_state()}}{
Shiny UI module to add filter variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$ui_add_filter_state(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny module}

\item{\code{data}}{(\code{MultiAssayExperiment})\cr
object containing \code{colData} which columns are used to be used
to choose filter variables.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny.tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-srv_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-srv_add_filter_state}{}}}
\subsection{Method \code{srv_add_filter_state()}}{
Shiny server module to add filter variable.

Module controls available choices to select as a filter variable.
Selected filter variable is being removed from available choices.
Removed filter variable gets back to available choices.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$srv_add_filter_state(id, data, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{data}}{(\code{MultiAssayExperiment})\cr
object containing \code{colData} which columns are used to choose filter variables in
\code{\link[teal.widgets:optionalSelectInput]{teal.widgets::optionalSelectInput()}}.}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
description
Get label of specific variable. In case when variable label is missing
name of the variable is returned.
parameter variable (\code{character})\cr
name of the variable for which label should be returned
return \code{character}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
