% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStatesMAE.R
\name{MAEFilterStates}
\alias{MAEFilterStates}
\title{\code{FilterStates} subclass for MultiAssayExperiments}
\description{
Handles filter states in a \code{MultiAssayExperiment}
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterStates]{teal.slice::FilterStates}} -> \code{MAEFilterStates}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-MAEFilterStates-new}{\code{MAEFilterStates$new()}}
\item \href{#method-MAEFilterStates-format}{\code{MAEFilterStates$format()}}
<<<<<<< HEAD
\item \href{#method-MAEFilterStates-get_fun}{\code{MAEFilterStates$get_fun()}}
\item \href{#method-MAEFilterStates-get_filter_state}{\code{MAEFilterStates$get_filter_state()}}
\item \href{#method-MAEFilterStates-set_filter_state}{\code{MAEFilterStates$set_filter_state()}}
\item \href{#method-MAEFilterStates-remove_filter_state}{\code{MAEFilterStates$remove_filter_state()}}
=======
>>>>>>> filter_panel_refactor@main
\item \href{#method-MAEFilterStates-ui_add}{\code{MAEFilterStates$ui_add()}}
\item \href{#method-MAEFilterStates-clone}{\code{MAEFilterStates$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="clear_filter_states"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-clear_filter_states'><code>teal.slice::FilterStates$clear_filter_states()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_call"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_call'><code>teal.slice::FilterStates$get_call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_filter_state"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_filter_state'><code>teal.slice::FilterStates$get_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="print"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-print'><code>teal.slice::FilterStates$print()</code></a></span></li>
<<<<<<< HEAD
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="set_filterable_varnames"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-set_filterable_varnames'><code>teal.slice::FilterStates$set_filterable_varnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="srv_active"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-srv_active'><code>teal.slice::FilterStates$srv_active()</code></a></span></li>
=======
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="remove_filter_state"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-remove_filter_state'><code>teal.slice::FilterStates$remove_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="set_filter_state"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-set_filter_state'><code>teal.slice::FilterStates$set_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="srv_active"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-srv_active'><code>teal.slice::FilterStates$srv_active()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="srv_add"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-srv_add'><code>teal.slice::FilterStates$srv_add()</code></a></span></li>
>>>>>>> filter_panel_refactor@main
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="ui_active"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-ui_active'><code>teal.slice::FilterStates$ui_active()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-new"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-new}{}}}
\subsection{Method \code{new()}}{
Initializes \code{MAEFilterStates} object

Initialize \code{MAEFilterStates} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$new(
  data,
  data_reactive = function(sid = "") NULL,
  dataname,
  datalabel = "subjects",
  keys = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{MultiAssayExperiment})\cr
the R object which \code{MultiAssayExperiment::subsetByColData} function is applied on.}

\item{\code{data_reactive}}{(\verb{function(sid)})\cr
should return a \code{MultiAssayExperiment} object or \code{NULL}.
This object is needed for the \code{FilterState} counts being updated
on a change in filters. If function returns \code{NULL} then filtered counts are not shown.
Function has to have \code{sid} argument being a character.}

\item{\code{dataname}}{(\code{character(1)})\cr
name of the data used in the expression
specified to the function argument attached to this \code{FilterStates}.}

\item{\code{datalabel}}{(\code{NULL} or \code{character(1)})\cr
text label value}

\item{\code{keys}}{(\code{character})\cr
key columns names}

\item{\code{varlabels}}{(\code{character})\cr
labels of the variables used in this object}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-format"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-format}{}}}
\subsection{Method \code{format()}}{
Returns the formatted string representing this \code{MAEFilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces before each line of the representation}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
<<<<<<< HEAD
\if{html}{\out{<a id="method-MAEFilterStates-get_fun"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-get_fun}{}}}
\subsection{Method \code{get_fun()}}{
Returns function name used to create filter call.
For \code{MAEFilterStates} \code{MultiAssayExperiment::subsetByColData} is used.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$get_fun()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Returns active \code{FilterState} objects.

Gets all active filters from this dataset in form of the nested list.
The output list can be used as input to \code{self$set_filter_state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} with elements number equal number of \code{FilterStates}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$set_filter_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\verb{named list})\cr
should contain values which are initial selection in the \code{FilterState}.
Names of the \code{list} element should correspond to the name of the
column in \code{colData(data)}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Removes a variable from the \code{ReactiveQueue} and its corresponding UI element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$remove_filter_state(state_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(\code{character(1)})\cr name of \code{ReactiveQueue} element.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
=======
>>>>>>> filter_panel_refactor@main
\if{html}{\out{<a id="method-MAEFilterStates-ui_add"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-ui_add}{}}}
\subsection{Method \code{ui_add()}}{
Shiny UI module to add filter variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$ui_add(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny module}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny.tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-MAEFilterStates-clone"></a>}}
\if{latex}{\out{\hypertarget{method-MAEFilterStates-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{MAEFilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
