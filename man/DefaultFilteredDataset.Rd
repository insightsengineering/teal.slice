% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilteredDatasetDefault.R
\name{DefaultFilteredDataset}
\alias{DefaultFilteredDataset}
\title{The \code{DefaultFilteredDataset} R6 class}
\description{
The \code{DefaultFilteredDataset} R6 class

The \code{DefaultFilteredDataset} R6 class
}
\examples{
library(shiny)
ds <- teal.slice:::DefaultFilteredDataset$new(iris, "iris")
isolate(
  ds$set_filter_state(
    state = list(
      Species = list(selected = "virginica"),
      Petal.Length = list(selected = c(2.0, 5))
    )
  )
)
isolate(ds$get_filter_state())
isolate(ds$get_call())

## ------------------------------------------------
## Method `DefaultFilteredDataset$set_filter_state`
## ------------------------------------------------

dataset <- teal.slice:::DefaultFilteredDataset$new(iris, "iris")
fs <- list(
  Sepal.Length = list(selected = c(5.1, 6.4), keep_na = TRUE, keep_inf = TRUE),
  Species = list(selected = c("setosa", "versicolor"), keep_na = FALSE)
)
shiny::isolate(dataset$set_filter_state(state = fs))
shiny::isolate(dataset$get_filter_state())

}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilteredDataset]{teal.slice::FilteredDataset}} -> \code{DefaultFilteredDataset}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DefaultFilteredDataset-new}{\code{DefaultFilteredDataset$new()}}
\item \href{#method-DefaultFilteredDataset-get_call}{\code{DefaultFilteredDataset$get_call()}}
\item \href{#method-DefaultFilteredDataset-get_filter_state}{\code{DefaultFilteredDataset$get_filter_state()}}
\item \href{#method-DefaultFilteredDataset-set_filter_state}{\code{DefaultFilteredDataset$set_filter_state()}}
\item \href{#method-DefaultFilteredDataset-remove_filter_state}{\code{DefaultFilteredDataset$remove_filter_state()}}
\item \href{#method-DefaultFilteredDataset-ui_add_filter_state}{\code{DefaultFilteredDataset$ui_add_filter_state()}}
\item \href{#method-DefaultFilteredDataset-srv_add_filter_state}{\code{DefaultFilteredDataset$srv_add_filter_state()}}
\item \href{#method-DefaultFilteredDataset-get_filter_overview_nsubjs}{\code{DefaultFilteredDataset$get_filter_overview_nsubjs()}}
\item \href{#method-DefaultFilteredDataset-clone}{\code{DefaultFilteredDataset$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_dataname"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_dataname'><code>teal.slice::FilteredDataset$get_dataname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_dataset"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_dataset'><code>teal.slice::FilteredDataset$get_dataset()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_dataset_label"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_dataset_label'><code>teal.slice::FilteredDataset$get_dataset_label()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_filter_count"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_filter_count'><code>teal.slice::FilteredDataset$get_filter_count()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_filter_overview_info"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_filter_overview_info'><code>teal.slice::FilteredDataset$get_filter_overview_info()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_filter_states"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_filter_states'><code>teal.slice::FilteredDataset$get_filter_states()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_filterable_varnames"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_filterable_varnames'><code>teal.slice::FilteredDataset$get_filterable_varnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_formatted_filter_state"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_formatted_filter_state'><code>teal.slice::FilteredDataset$get_formatted_filter_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_keys"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_keys'><code>teal.slice::FilteredDataset$get_keys()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_metadata"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_metadata'><code>teal.slice::FilteredDataset$get_metadata()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_varlabels"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_varlabels'><code>teal.slice::FilteredDataset$get_varlabels()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="get_varnames"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-get_varnames'><code>teal.slice::FilteredDataset$get_varnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="server"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-server'><code>teal.slice::FilteredDataset$server()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="set_filterable_varnames"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-set_filterable_varnames'><code>teal.slice::FilteredDataset$set_filterable_varnames()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="state_lists_empty"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-state_lists_empty'><code>teal.slice::FilteredDataset$state_lists_empty()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilteredDataset" data-id="ui"><a href='../../teal.slice/html/FilteredDataset.html#method-FilteredDataset-ui'><code>teal.slice::FilteredDataset$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-new"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-new}{}}}
\subsection{Method \code{new()}}{
Initializes this \code{DefaultFilteredDataset} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$new(
  dataset,
  dataname,
  keys = character(0),
  label = character(0),
  metadata = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{(\code{data.frame})\cr
single data.frame for which filters are rendered}

\item{\code{dataname}}{(\code{character})\cr
A given name for the dataset it may not contain spaces}

\item{\code{keys}}{optional, (\code{character})\cr
Vector with primary keys}

\item{\code{label}}{(\code{character})\cr
Label to describe the dataset}

\item{\code{metadata}}{(named \code{list} or \code{NULL}) \cr
Field containing metadata about the dataset. Each element of the list
should be atomic and length one.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-get_call}{}}}
\subsection{Method \code{get_call()}}{
Gets the filter expression

This functions returns filter calls equivalent to selected items
within each of \code{filter_states}. Configuration of the calls is constant and
depends on \code{filter_states} type and order which are set during initialization.
This class contains single \code{FilterStates}
which contains single \code{state_list} and all \code{FilterState} objects
applies to one argument (\code{...}) in \code{dplyr::filter} call.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$get_call()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
filter \code{call} or \code{list} of filter calls
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Gets the reactive values from the active \code{FilterState} objects.

Get all active filters from this dataset in form of the nested list.
The output list is a compatible input to \code{self$set_filter_state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} with named elements corresponding to \code{FilterState} objects
(active filters).
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$set_filter_state(state, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\verb{named list})\cr
containing values of the initial filter. Values should be relevant
to the referred column.}

\item{\code{...}}{Additional arguments. Note that this is currently not used}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{dataset <- teal.slice:::DefaultFilteredDataset$new(iris, "iris")
fs <- list(
  Sepal.Length = list(selected = c(5.1, 6.4), keep_na = TRUE, keep_inf = TRUE),
  Species = list(selected = c("setosa", "versicolor"), keep_na = FALSE)
)
shiny::isolate(dataset$set_filter_state(state = fs))
shiny::isolate(dataset$get_filter_state())

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Remove one or more \code{FilterState} of a \code{FilteredDataset}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$remove_filter_state(state_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(\code{character})\cr
Vector of character names of variables to remove their \code{FilterState}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-ui_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-ui_add_filter_state}{}}}
\subsection{Method \code{ui_add_filter_state()}}{
UI module to add filter variable for this dataset

UI module to add filter variable for this dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$ui_add_filter_state(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
identifier of the element - preferably containing dataset name}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
function - shiny UI module
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-srv_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-srv_add_filter_state}{}}}
\subsection{Method \code{srv_add_filter_state()}}{
Server module to add filter variable for this dataset

Server module to add filter variable for this dataset.
For this class \code{srv_add_filter_state} calls single module
\code{srv_add_filter_state} from \code{FilterStates} (\code{DefaultFilteredDataset}
contains single \code{FilterStates})
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$srv_add_filter_state(id, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{...}}{other arguments passed on to child \code{FilterStates} methods.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-get_filter_overview_nsubjs"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-get_filter_overview_nsubjs}{}}}
\subsection{Method \code{get_filter_overview_nsubjs()}}{
Get number of observations based on given keys
The output shows the comparison between \code{filtered_dataset}
function parameter and the dataset inside self
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$get_filter_overview_nsubjs(
  filtered_dataset = self$get_dataset(),
  subject_keys = NULL
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{filtered_dataset}}{comparison object, of the same class
as \code{self$get_dataset()}, if \code{NULL} then \code{self$get_dataset()}
is used.}

\item{\code{subject_keys}}{(\code{character} or \code{NULL}) columns denoting unique subjects when
calculating the filtering.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{list} containing character \verb{#filtered/#not_filtered}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DefaultFilteredDataset-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DefaultFilteredDataset-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DefaultFilteredDataset$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
