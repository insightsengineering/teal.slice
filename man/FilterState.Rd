% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterState.R
\docType{class}
\name{FilterState}
\alias{FilterState}
\title{\code{FilterState} abstract Class}
\description{
Abstract class to encapsulate single filter state.
}
\details{
This class is responsible for managing single filter item within
\code{FilteredData} class object. Filter states depend on the variable type:
(\code{logical}, \code{integer}, \code{numeric}, \code{factor}, \code{character}, \code{Date}, \code{POSIXct}, \code{POSIXlt})
and returns \code{FilterState} object with class corresponding to input variable.
Class controls single filter entry in \code{module_single_filter_item} and returns
code relevant to selected values.
\itemize{
\item \code{factor}, \code{character}: \code{class = ChoicesFilterState}
\item \code{numeric}: \code{class = RangeFilterState}
\item \code{logical}: \code{class = LogicalFilterState}
\item \code{Date}: \code{class = DateFilterState}
\item \code{POSIXct}, \code{POSIXlt}: \code{class = DatetimeFilterState}
\item all \code{NA} entries: \code{class: FilterState}, cannot be filtered
\item default: \code{FilterState}, cannot be filtered
}

Each variable's filter state is an \code{R6} object which contains \code{choices},
\code{selected}, \code{varname}, \code{dataname}, \code{labels}, \code{na_count}, \code{keep_na} and other
variable type specific fields (\code{keep_inf}, \code{inf_count}, \code{timezone}).
Object also contains a \code{shiny} module (UI and server) which manages the
state of the filter through reactive values \code{selected}, \code{keep_na}, \code{keep_inf}
which trigger \code{get_call()} and every \code{R} function call up in reactive chain.
}
\section{Modifying state}{

Modifying a \code{FilterState} object is possible in three scenarios:
\itemize{
\item In the interactive session by passing an appropriate \code{teal_slice}
to the \code{set_state} method, or using
\code{set_selected}, \code{set_keep_na} or \code{set_keep_inf} methods.
\item In a running application by changing appropriate inputs.
\item In a running application by using \link{filter_state_api} which directly uses
\code{set_state} method of the \code{InteractiveFilterState} object.
}
}

\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-FilterState-new}{\code{FilterState$new()}}
\item \href{#method-FilterState-format}{\code{FilterState$format()}}
\item \href{#method-FilterState-print}{\code{FilterState$print()}}
\item \href{#method-FilterState-set_state}{\code{FilterState$set_state()}}
\item \href{#method-FilterState-get_state}{\code{FilterState$get_state()}}
\item \href{#method-FilterState-get_call}{\code{FilterState$get_call()}}
\item \href{#method-FilterState-server}{\code{FilterState$server()}}
\item \href{#method-FilterState-ui}{\code{FilterState$ui()}}
\item \href{#method-FilterState-destroy_observers}{\code{FilterState$destroy_observers()}}
\item \href{#method-FilterState-clone}{\code{FilterState$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-new"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilterState} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$new(
  x,
  x_reactive = reactive(NULL),
  slice,
  extract_type = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{vector})
values of the variable used in filter}

\item{\code{x_reactive}}{(\code{reactive})
returning vector of the same type as \code{x}. Is used to update
counts following the change in values of the filtered dataset.
If it is set to \code{reactive(NULL)} then counts based on filtered
dataset are not shown.}

\item{\code{slice}}{(\code{teal_slice})
object created by \code{\link[=teal_slice]{teal_slice()}}}

\item{\code{extract_type}}{(\code{character})
specifying whether condition calls should be prefixed by \code{dataname}. Possible values:
\itemize{
\item \code{character(0)} (default) \code{varname} in the condition call will not be prefixed
\item \code{"list"} \code{varname} in the condition call will be returned as \verb{<dataname>$<varname>}
\item \code{"matrix"} \code{varname} in the condition call will be returned as \verb{<dataname>[, <varname>]}
}}

\item{\code{...}}{additional arguments to be saved as a list in \code{private$extras} field}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{self} invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-format"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{FilterState} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$format(show_all = FALSE, trim_lines = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{show_all}}{(\code{logical(1)}) passed to \code{format.teal_slice}}

\item{\code{trim_lines}}{(\code{logical(1)}) passed to \code{format.teal_slice}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-print"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-print}{}}}
\subsection{Method \code{print()}}{
Prints this \code{FilterState} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{additional arguments}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-set_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-set_state}{}}}
\subsection{Method \code{set_state()}}{
Sets filtering state.
\itemize{
\item \code{fixed} state is prevented from changing state
\item \code{anchored} state is prevented from removing state
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$set_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{teal_slice})}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{self} invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-get_state"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-get_state}{}}}
\subsection{Method \code{get_state()}}{
Returns filtering state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$get_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
A \code{teal_slice} object.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection relevant
for selected variable type.
Method is using internal reactive values which makes it reactive
and must be executed in reactive or isolated context.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$get_call()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-server"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-server}{}}}
\subsection{Method \code{server()}}{
\code{shiny} module server.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})
\code{shiny} module instance id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns reactive value
signaling that remove button has been clicked
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-ui"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-ui}{}}}
\subsection{Method \code{ui()}}{
\code{shiny} UI module.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$ui(id, parent_id = "cards")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})
\code{shiny} element (module instance) id;
the UI for this class contains simple message stating that it is not supported}

\item{\code{parent_id}}{(\code{character(1)}) id of the \code{FilterStates} card container}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-destroy_observers"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-destroy_observers}{}}}
\subsection{Method \code{destroy_observers()}}{
Destroy observers stored in \code{private$observers}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$destroy_observers()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-FilterState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-FilterState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
