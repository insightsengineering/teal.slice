% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStateDate.R
\docType{class}
\name{DateFilterState}
\alias{DateFilterState}
\title{\code{FilterState} object for Date variable}
\description{
\code{FilterState} object for Date variable

\code{FilterState} object for Date variable
}
\note{
Casts the passed object to \code{Date} before validating the input
making it possible to pass any object coercible to \code{Date} to this method.
}
\examples{
filter_state <- teal.slice:::DateFilterState$new(
  c(Sys.Date() + seq(1:10), NA),
  varname = "x",
  input_dataname = as.name("data"),
  extract_type = character(0)
)
isolate(filter_state$get_call())

isolate(filter_state$set_selected(c(Sys.Date() + 3L, Sys.Date() + 8L)))
isolate(filter_state$set_keep_na(TRUE))
isolate(filter_state$get_call())

## ------------------------------------------------
## Method `DateFilterState$set_selected`
## ------------------------------------------------

date <- as.Date("13/09/2021")
filter <- teal.slice:::DateFilterState$new(
  c(date, date + 1, date + 2, date + 3),
  varname = "name"
)
filter$set_selected(c(date + 1, date + 2))
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterState]{teal.slice::FilterState}} -> \code{DateFilterState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DateFilterState-new}{\code{DateFilterState$new()}}
\item \href{#method-DateFilterState-format}{\code{DateFilterState$format()}}
\item \href{#method-DateFilterState-is_any_filtered}{\code{DateFilterState$is_any_filtered()}}
\item \href{#method-DateFilterState-get_call}{\code{DateFilterState$get_call()}}
\item \href{#method-DateFilterState-ui}{\code{DateFilterState$ui()}}
\item \href{#method-DateFilterState-server}{\code{DateFilterState$server()}}
\item \href{#method-DateFilterState-set_selected}{\code{DateFilterState$set_selected()}}
\item \href{#method-DateFilterState-clone}{\code{DateFilterState$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="destroy_observers"><a href='../../teal.slice/html/FilterState.html#method-FilterState-destroy_observers'><code>teal.slice::FilterState$destroy_observers()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_dataname"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_dataname'><code>teal.slice::FilterState$get_dataname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_keep_na"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_keep_na'><code>teal.slice::FilterState$get_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_selected"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_selected'><code>teal.slice::FilterState$get_selected()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_state"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_state'><code>teal.slice::FilterState$get_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_varlabel"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_varlabel'><code>teal.slice::FilterState$get_varlabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_varname"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_varname'><code>teal.slice::FilterState$get_varname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="print"><a href='../../teal.slice/html/FilterState.html#method-FilterState-print'><code>teal.slice::FilterState$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_keep_na"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_keep_na'><code>teal.slice::FilterState$set_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_keep_na_reactive"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_keep_na_reactive'><code>teal.slice::FilterState$set_keep_na_reactive()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_na_rm"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_na_rm'><code>teal.slice::FilterState$set_na_rm()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_selected_reactive"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_selected_reactive'><code>teal.slice::FilterState$set_selected_reactive()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_state"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_state'><code>teal.slice::FilterState$set_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_state_reactive"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_state_reactive'><code>teal.slice::FilterState$set_state_reactive()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DateFilterState-new"></a>}}
\if{latex}{\out{\hypertarget{method-DateFilterState-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilterState} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DateFilterState$new(
  x,
  varname,
  varlabel = character(0),
  input_dataname = NULL,
  extract_type = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{Date})\cr
values of the variable used in filter}

\item{\code{varname}}{(\code{character}, \code{name})\cr
name of the variable}

\item{\code{varlabel}}{(\code{character(1)})\cr
label of the variable (optional).}

\item{\code{input_dataname}}{(\code{name} or \code{call})\cr
name of dataset where \code{x} is taken from}

\item{\code{extract_type}}{(\code{character(0)}, \code{character(1)})\cr
whether condition calls should be prefixed by dataname. Possible values:
\itemize{
\item{\code{character(0)} (default)}{ \code{varname} in the condition call will not be prefixed}
\item{\code{"list"}}{ \code{varname} in the condition call will be returned as \verb{<input_dataname>$<varname>}}
\item{\code{"matrix"}}{ \code{varname} in the condition call will be returned as \verb{<input_dataname>[, <varname>]}}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DateFilterState-format"></a>}}
\if{latex}{\out{\hypertarget{method-DateFilterState-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{DateFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DateFilterState$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces before after each new line character of the formatted string.
Default: 0}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DateFilterState-is_any_filtered"></a>}}
\if{latex}{\out{\hypertarget{method-DateFilterState-is_any_filtered}{}}}
\subsection{Method \code{is_any_filtered()}}{
Answers the question of whether the current settings and values selected actually filters out any values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DateFilterState$is_any_filtered()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical scalar
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DateFilterState-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-DateFilterState-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection.
For this class returned call looks like
\verb{<varname> >= <min value> & <varname> <= <max value>} with
optional \verb{is.na(<varname>)}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DateFilterState$get_call()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{call})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DateFilterState-ui"></a>}}
\if{latex}{\out{\hypertarget{method-DateFilterState-ui}{}}}
\subsection{Method \code{ui()}}{
UI Module for \code{DateFilterState}.
This UI element contains two date selections for \code{min} and \code{max}
of the range and a checkbox whether to keep the \code{NA} values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DateFilterState$ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DateFilterState-server"></a>}}
\if{latex}{\out{\hypertarget{method-DateFilterState-server}{}}}
\subsection{Method \code{server()}}{
Server module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DateFilterState$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DateFilterState-set_selected"></a>}}
\if{latex}{\out{\hypertarget{method-DateFilterState-set_selected}{}}}
\subsection{Method \code{set_selected()}}{
Sets the selected time frame of this \code{DateFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DateFilterState$set_selected(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{Date(2)}) the lower and the upper bound of the selected
time frame. Must not contain NA values.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly \code{NULL}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{date <- as.Date("13/09/2021")
filter <- teal.slice:::DateFilterState$new(
  c(date, date + 1, date + 2, date + 3),
  varname = "name"
)
filter$set_selected(c(date + 1, date + 2))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DateFilterState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DateFilterState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DateFilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
