% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/methods-module_active.R
\name{module_active}
\alias{module_active}
\alias{ui_active}
\alias{ui_active-ANY-method}
\alias{ui_active-data.frame-method}
\alias{ui_active-DataFrame-method}
\alias{ui_active-array-method}
\alias{ui_active-Matrix-method}
\alias{ui_active-MultiAssayExperiment-method}
\alias{srv_active}
\alias{srv_active-ANY-method}
\alias{srv_active-data.frame-method}
\alias{srv_active-DataFrame-method}
\alias{srv_active-array-method}
\alias{srv_active-Matrix-method}
\alias{srv_active-MultiAssayExperiment-method}
\title{Filter panel module active}
\usage{
ui_active(id, data, label = character(0))
}
\arguments{
\item{id}{(\code{character}) Module id}

\item{data}{(\code{object}) Object of any class}

\item{label}{(\code{character(1)})\cr
Label of the dataset in the filter panel. Will be displayed along with dataname in the section with active filters.}

\item{reactive_state_list}{(\code{reactive})\cr
Should return a list of \code{FilterState} objects.}

\item{remove_state_callback}{(\verb{function(state)})\cr
It should be a \code{FilteredData} function that removes a filter state from the \code{state_list}. When the remove button
is clicked this method fill be called. \code{state} argument in the function is a \code{teal_slices} object containing
\code{teal_slice} to be removed.}
}
\value{
\itemize{
\item \code{ui_active} returns \code{shiny.tag}
\item \code{srv_active} returns \code{moduleServer}
}
}
\description{
Filter panel module active
}
\section{Supported data types}{
\code{teal.slice} provide methods for:
\itemize{
\item \code{data.frame}
\item \code{DataFrame}
\item \code{matrix}
\item \code{Matrix}
\item \code{SummarizedExperiment}
\item \code{MultiAssayExperiment}
}

Datasets which don't inherit from these classes will trigger default methods which in most of the
cases do nothing. Methods for unsupported data types are made in a way that they don't break the app.
If you want to extend filter panel for your custom data type, you can register S3 methods for
any of these methods. For example, if you want to extend filter panel for \code{custom_class}, you can
register a new S3 methods \verb{<method>.custom_class} where \verb{<method>} is one of the exported \code{teal.slice} methods.

Same applies to supported data types. If you want to override default methods for any of the supported
data types, say data.frame, you can register a new S3 methods \verb{<method>.data.frame}.
}

