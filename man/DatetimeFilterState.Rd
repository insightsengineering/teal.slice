% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStateDatettime.R
\docType{class}
\name{DatetimeFilterState}
\alias{DatetimeFilterState}
\title{\code{FilterState} object for \code{POSIXct} variable}
\description{
Manages choosing a range of date-times
}
\note{
Casts the passed object to \code{POSIXct} before validating the input
making it possible to pass any object coercible to \code{POSIXct} to this method.
}
\examples{
filter_state <- teal.slice:::DatetimeFilterState$new(
  c(Sys.time() + seq(0, by = 3600, length.out = 10), NA),
  varname = "x",
  dataname = "data",
  extract_type = character(0)
)

isolate(filter_state$get_call())
isolate(filter_state$set_selected(c(Sys.time() + 3L, Sys.time() + 8L)))
isolate(filter_state$set_keep_na(TRUE))
isolate(filter_state$get_call())

\dontrun{
# working filter in an app
library(shiny)

datetimes <- as.POSIXct(c("2012-01-01 12:00:00", "2020-01-01 12:00:00"))
data_datetime <- c(seq(from = datetimes[1], to = datetimes[2], length.out = 100), NA)
filter_state_datetime <- DatetimeFilterState$new(
  x = data_datetime,
  varname = "variable",
  varlabel = "label"
)
filter_state_datetime$set_state(list(selected = data_datetime[c(47, 98)], keep_na = TRUE))

ui <- fluidPage(
  column(4, div(
    h4("DatetimeFilterState"),
    isolate(filter_state_datetime$ui("fs"))
  )),
  column(4, div(
    id = "outputs", # div id is needed for toggling the element
    h4("Condition (i.e. call)"), # display the subsetting call generated by this FilterState
    textOutput("condition_datetime"), br(),
    h4("Unformatted state"), # display raw filter state
    textOutput("unformatted_datetime"), br(),
    h4("Formatted state"), # display human readable filter state
    textOutput("formatted_datetime"), br()
  )),
  column(4, div(
    h4("Programmatic filter control"),
    actionButton("button1_datetime", "set drop NA", width = "100\%"), br(),
    actionButton("button2_datetime", "set keep NA", width = "100\%"), br(),
    actionButton("button3_datetime", "set a range", width = "100\%"), br(),
    actionButton("button4_datetime", "set full range", width = "100\%"), br(),
    actionButton("button0_datetime", "set initial state", width = "100\%"), br()
  ))
)

server <- function(input, output, session) {
  filter_state_datetime$server("fs")
  output$condition_datetime <- renderPrint(filter_state_datetime$get_call())
  output$formatted_datetime <- renderText(filter_state_datetime$format())
  output$unformatted_datetime <- renderPrint(filter_state_datetime$get_state())
  # modify filter state programmatically
  observeEvent(input$button1_datetime, filter_state_datetime$set_keep_na(FALSE))
  observeEvent(input$button2_datetime, filter_state_datetime$set_keep_na(TRUE))
  observeEvent(
    input$button3_datetime,
    filter_state_datetime$set_selected(data_datetime[c(34, 56)])
  )
  observeEvent(input$button4_datetime, filter_state_datetime$set_selected(datetimes))
  observeEvent(
    input$button0_datetime,
    filter_state_datetime$set_state(list(selected = data_datetime[c(47, 98)], keep_na = TRUE))
  )
}

if (interactive()) {
  shinyApp(ui, server)
}
}


## ------------------------------------------------
## Method `DatetimeFilterState$set_selected`
## ------------------------------------------------

date <- as.POSIXct(1, origin = "01/01/1970")
filter <- teal.slice:::DatetimeFilterState$new(
  c(date, date + 1, date + 2, date + 3),
  varname = "name"
)
filter$set_selected(c(date + 1, date + 2))
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterState]{teal.slice::FilterState}} -> \code{DatetimeFilterState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-DatetimeFilterState-new}{\code{DatetimeFilterState$new()}}
\item \href{#method-DatetimeFilterState-format}{\code{DatetimeFilterState$format()}}
\item \href{#method-DatetimeFilterState-is_any_filtered}{\code{DatetimeFilterState$is_any_filtered()}}
\item \href{#method-DatetimeFilterState-get_call}{\code{DatetimeFilterState$get_call()}}
\item \href{#method-DatetimeFilterState-set_selected}{\code{DatetimeFilterState$set_selected()}}
\item \href{#method-DatetimeFilterState-clone}{\code{DatetimeFilterState$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="destroy_observers"><a href='../../teal.slice/html/FilterState.html#method-FilterState-destroy_observers'><code>teal.slice::FilterState$destroy_observers()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_dataname"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_dataname'><code>teal.slice::FilterState$get_dataname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_keep_na"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_keep_na'><code>teal.slice::FilterState$get_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_selected"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_selected'><code>teal.slice::FilterState$get_selected()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_state"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_state'><code>teal.slice::FilterState$get_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_varlabel"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_varlabel'><code>teal.slice::FilterState$get_varlabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_varname"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_varname'><code>teal.slice::FilterState$get_varname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="print"><a href='../../teal.slice/html/FilterState.html#method-FilterState-print'><code>teal.slice::FilterState$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="server"><a href='../../teal.slice/html/FilterState.html#method-FilterState-server'><code>teal.slice::FilterState$server()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_keep_na"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_keep_na'><code>teal.slice::FilterState$set_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_na_rm"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_na_rm'><code>teal.slice::FilterState$set_na_rm()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_state"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_state'><code>teal.slice::FilterState$set_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="ui"><a href='../../teal.slice/html/FilterState.html#method-FilterState-ui'><code>teal.slice::FilterState$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatetimeFilterState-new"></a>}}
\if{latex}{\out{\hypertarget{method-DatetimeFilterState-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilterState} object. This class
has an extra field, \code{private$timezone}, which is set to \code{Sys.timezone()} by
default. However, in case when using this module in \code{teal} app, one needs
timezone of the app user. App user timezone is taken from \code{session$userData$timezone}
and is set only if object is initialized in \code{shiny}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeFilterState$new(
  x,
  varname,
  varlabel = character(0),
  dataname = NULL,
  extract_type = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{POSIXct} or \code{POSIXlt})\cr
values of the variable used in filter}

\item{\code{varname}}{(\code{character}, \code{name})\cr
name of the variable}

\item{\code{varlabel}}{(\code{character(1)})\cr
label of the variable (optional).}

\item{\code{dataname}}{(\code{character(1)})\cr
optional name of dataset where \code{x} is taken from}

\item{\code{extract_type}}{(\code{character(0)}, \code{character(1)})\cr
whether condition calls should be prefixed by dataname. Possible values:
\itemize{
\item{\code{character(0)} (default)}{ \code{varname} in the condition call will not be prefixed}
\item{\code{"list"}}{ \code{varname} in the condition call will be returned as \verb{<dataname>$<varname>}}
\item{\code{"matrix"}}{ \code{varname} in the condition call will be returned as \verb{<dataname>[, <varname>]}}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatetimeFilterState-format"></a>}}
\if{latex}{\out{\hypertarget{method-DatetimeFilterState-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{DatetimeFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeFilterState$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces before after each new line character of the formatted string.
Default: 0}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatetimeFilterState-is_any_filtered"></a>}}
\if{latex}{\out{\hypertarget{method-DatetimeFilterState-is_any_filtered}{}}}
\subsection{Method \code{is_any_filtered()}}{
Answers the question of whether the current settings and values selected actually filters out any values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeFilterState$is_any_filtered()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical scalar
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatetimeFilterState-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-DatetimeFilterState-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection.
For this class returned call looks like
\verb{<varname> >= as.POSIXct(<min>) & <varname> <= <max>)}
with optional \verb{is.na(<varname>)}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeFilterState$get_call()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatetimeFilterState-set_selected"></a>}}
\if{latex}{\out{\hypertarget{method-DatetimeFilterState-set_selected}{}}}
\subsection{Method \code{set_selected()}}{
Sets the selected time frame of this \code{DatetimeFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeFilterState$set_selected(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{POSIX(2)}) the lower and the upper bound of the selected
time frame. Must not contain NA values.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly \code{NULL}.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{date <- as.POSIXct(1, origin = "01/01/1970")
filter <- teal.slice:::DatetimeFilterState$new(
  c(date, date + 1, date + 2, date + 3),
  varname = "name"
)
filter$set_selected(c(date + 1, date + 2))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-DatetimeFilterState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-DatetimeFilterState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatetimeFilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
