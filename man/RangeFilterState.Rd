% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStateRange.R
\docType{class}
\name{RangeFilterState}
\alias{RangeFilterState}
\title{\code{FilterState} object for numeric variable}
\value{
invisibly \code{NULL}
}
\description{
\code{FilterState} object for numeric variable

\code{FilterState} object for numeric variable
}
\note{
Casts the passed object to \code{numeric} before validating the input
making it possible to pass any object coercible to \code{numeric} to this method.
}
\examples{
filter_state <- teal.slice:::RangeFilterState$new(
  c(NA, Inf, seq(1:10)),
  varname = "x",
  input_dataname = as.name("data"),
  extract_type = character(0)
)
isolate(filter_state$get_call())
isolate(filter_state$set_selected(c(3L, 8L)))
isolate(filter_state$set_keep_na(TRUE))
isolate(filter_state$set_keep_inf(TRUE))
isolate(filter_state$get_call())

## ------------------------------------------------
## Method `RangeFilterState$set_selected`
## ------------------------------------------------

filter <- teal.slice:::RangeFilterState$new(c(1, 2, 3, 4), varname = "name")
filter$set_selected(c(2, 3))

}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterState]{teal.slice::FilterState}} -> \code{RangeFilterState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RangeFilterState-new}{\code{RangeFilterState$new()}}
\item \href{#method-RangeFilterState-format}{\code{RangeFilterState$format()}}
\item \href{#method-RangeFilterState-is_any_filtered}{\code{RangeFilterState$is_any_filtered()}}
\item \href{#method-RangeFilterState-get_call}{\code{RangeFilterState$get_call()}}
\item \href{#method-RangeFilterState-get_keep_inf}{\code{RangeFilterState$get_keep_inf()}}
\item \href{#method-RangeFilterState-get_state}{\code{RangeFilterState$get_state()}}
\item \href{#method-RangeFilterState-ui}{\code{RangeFilterState$ui()}}
\item \href{#method-RangeFilterState-server}{\code{RangeFilterState$server()}}
\item \href{#method-RangeFilterState-set_keep_inf}{\code{RangeFilterState$set_keep_inf()}}
\item \href{#method-RangeFilterState-set_keep_inf_reactive}{\code{RangeFilterState$set_keep_inf_reactive()}}
\item \href{#method-RangeFilterState-set_state}{\code{RangeFilterState$set_state()}}
\item \href{#method-RangeFilterState-set_state_reactive}{\code{RangeFilterState$set_state_reactive()}}
\item \href{#method-RangeFilterState-set_selected}{\code{RangeFilterState$set_selected()}}
\item \href{#method-RangeFilterState-clone}{\code{RangeFilterState$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="destroy_observers"><a href='../../teal.slice/html/FilterState.html#method-FilterState-destroy_observers'><code>teal.slice::FilterState$destroy_observers()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_dataname"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_dataname'><code>teal.slice::FilterState$get_dataname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_keep_na"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_keep_na'><code>teal.slice::FilterState$get_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_selected"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_selected'><code>teal.slice::FilterState$get_selected()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_varlabel"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_varlabel'><code>teal.slice::FilterState$get_varlabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_varname"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_varname'><code>teal.slice::FilterState$get_varname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="print"><a href='../../teal.slice/html/FilterState.html#method-FilterState-print'><code>teal.slice::FilterState$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_keep_na"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_keep_na'><code>teal.slice::FilterState$set_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_keep_na_reactive"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_keep_na_reactive'><code>teal.slice::FilterState$set_keep_na_reactive()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_na_rm"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_na_rm'><code>teal.slice::FilterState$set_na_rm()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_selected_reactive"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_selected_reactive'><code>teal.slice::FilterState$set_selected_reactive()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-new"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilterState} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$new(
  x,
  varname,
  varlabel = character(0),
  input_dataname = NULL,
  extract_type = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{numeric})\cr
values of the variable used in filter}

\item{\code{varname}}{(\code{character}, \code{name})\cr
name of the variable}

\item{\code{varlabel}}{(\code{character(1)})\cr
label of the variable (optional).}

\item{\code{input_dataname}}{(\code{name} or \code{call})\cr
name of dataset where \code{x} is taken from}

\item{\code{extract_type}}{(\code{character(0)}, \code{character(1)})\cr
whether condition calls should be prefixed by dataname. Possible values:
\itemize{
\item{\code{character(0)} (default)}{ \code{varname} in the condition call will not be prefixed}
\item{\code{"list"}}{ \code{varname} in the condition call will be returned as \verb{<input_dataname>$<varname>}}
\item{\code{"matrix"}}{ \code{varname} in the condition call will be returned as \verb{<input_dataname>[, <varname>]}}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-format"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{LogicalFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces before after each new line character of the formatted string.
Default: 0}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-is_any_filtered"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-is_any_filtered}{}}}
\subsection{Method \code{is_any_filtered()}}{
Answers the question of whether the current settings and values selected actually filters out any values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$is_any_filtered()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical scalar
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection.
For this class returned call looks like
\verb{<varname> >= <min value> & <varname> <= <max value>} with
optional \verb{is.na(<varname>)} and \verb{is.finite(<varname>)}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$get_call()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{call})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-get_keep_inf"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-get_keep_inf}{}}}
\subsection{Method \code{get_keep_inf()}}{
Returns current \code{keep_inf} selection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$get_keep_inf()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{logical(1)})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-get_state"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-get_state}{}}}
\subsection{Method \code{get_state()}}{
Returns the filtering state.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$get_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} containing values taken from the reactive fields:
\itemize{
\item \code{selected} (\code{numeric(2)}) range of the filter.
\item \code{keep_na} (\code{logical(1)}) whether \code{NA} should be kept.
\item \code{keep_inf} (\code{logical(1)})  whether \code{Inf} should be kept.
UI Module for \code{RangeFilterState}.
This UI element contains two values for \code{min} and \code{max}
of the range and two checkboxes whether to keep the \code{NA} or \code{Inf}  values.
}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-ui"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-ui}{}}}
\subsection{Method \code{ui()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-server"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-server}{}}}
\subsection{Method \code{server()}}{
Server module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-set_keep_inf"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-set_keep_inf}{}}}
\subsection{Method \code{set_keep_inf()}}{
Set if \code{Inf} should be kept
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_keep_inf(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{logical(1)})\cr
Value(s) which come from the filter selection. Value is set in \code{server}
modules after selecting check-box-input in the shiny interface. Values are set to
\code{private$keep_inf} which is reactive.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-set_keep_inf_reactive"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-set_keep_inf_reactive}{}}}
\subsection{Method \code{set_keep_inf_reactive()}}{
Set if \code{Inf} should be kept when passing filters using \code{set_filter_state}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_keep_inf_reactive(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{logical(1)})\cr
Value(s) which come from the filter set by the user. Value is set in \code{server}
modules after setting the filters using \code{set_filter_state}. Values are set to
\code{private$keep_inf_reactive} which is reactive.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-set_state"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-set_state}{}}}
\subsection{Method \code{set_state()}}{
Set state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{list})\cr
contains fields relevant for a specific class
\itemize{
\item{\code{selected}}{ defines initial selection}
\item{\code{keep_na} (\code{logical})}{ defines whether to keep or remove \code{NA} values}
\item{\code{keep_inf} (\code{logical})}{ defines whether to keep or remove \code{Inf} values}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-set_state_reactive"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-set_state_reactive}{}}}
\subsection{Method \code{set_state_reactive()}}{
Set state when using \code{set_filter_state}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_state_reactive(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{list})\cr
contains fields relevant for a specific class
\itemize{
\item{\code{selected}}{ defines initial selection}
\item{\code{keep_na} (\code{logical})}{ defines whether to keep or remove \code{NA} values}
\item{\code{keep_inf} (\code{logical})}{ defines whether to keep or remove \code{Inf} values}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-set_selected"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-set_selected}{}}}
\subsection{Method \code{set_selected()}}{
Sets the selected values of this \code{RangeFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_selected(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{numeric(2)}) the two-elements array of the lower and upper bound
of the selected range. Must not contain NA values.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{filter <- teal.slice:::RangeFilterState$new(c(1, 2, 3, 4), varname = "name")
filter$set_selected(c(2, 3))

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
