% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStateRange.R
\docType{class}
\name{RangeFilterState}
\alias{RangeFilterState}
\title{\code{InteractiveFilterState} object for numeric variable}
\value{
invisibly \code{NULL}
}
\description{
Manages choosing a numeric range
}
\note{
Casts the passed object to \code{numeric} before validating the input
making it possible to pass any object coercible to \code{numeric} to this method.
}
\examples{
filter_state <- teal.slice:::RangeFilterState$new(
  x = c(NA, Inf, seq(1:10)),
  varname = "x",
  dataname = "data",
  extract_type = character(0)
)
isolate(filter_state$get_call())
isolate(filter_state$set_selected(c(3L, 8L)))
isolate(filter_state$set_keep_na(TRUE))
isolate(filter_state$set_keep_inf(TRUE))
isolate(filter_state$get_call())

\dontrun{
# working filter in an app
library(shiny)
library(shinyjs)

data_range <- c(runif(100, 0, 1), NA, Inf)
filter_state_range <- RangeFilterState$new(
  x = data_range,
  dataname = "data"
  varname = "variable"
)
filter_state_range$set_state(
  filter_var("data", "variable", selected = c(0.15, 0.93), keep_na = TRUE, keep_inf = TRUE)
)

ui <- fluidPage(
  useShinyjs(),
  include_css_files(pattern = "filter-panel"),
  include_js_files(pattern = "count-bar-labels"),
  column(4, div(
    h4("RangeFilterState"),
    isolate(filter_state_range$ui("fs"))
  )),
  column(4, div(
    id = "outputs", # div id is needed for toggling the element
    h4("Condition (i.e. call)"), # display the subsetting call generated by this FilterState
    textOutput("condition_range"), br(),
    h4("Unformatted state"), # display raw filter state
    textOutput("unformatted_range"), br(),
    h4("Formatted state"), # display human readable filter state
    textOutput("formatted_range"), br()
  )),
  column(4, div(
    h4("Programmatic filter control"),
    actionButton("button1_range", "set drop NA", width = "100\%"), br(),
    actionButton("button2_range", "set keep NA", width = "100\%"), br(),
    actionButton("button3_range", "set drop Inf", width = "100\%"), br(),
    actionButton("button4_range", "set keep Inf", width = "100\%"), br(),
    actionButton("button5_range", "set a range", width = "100\%"), br(),
    actionButton("button6_range", "set full range", width = "100\%"), br(),
    actionButton("button0_range", "set initial state", width = "100\%"), br()
  ))
)

server <- function(input, output, session) {
  filter_state_range$server("fs")
  output$condition_range <- renderPrint(filter_state_range$get_call())
  output$formatted_range <- renderText(filter_state_range$format())
  output$unformatted_range <- renderPrint(filter_state_range$get_state())
  # modify filter state programmatically
  observeEvent(input$button1_range, filter_state_range$set_keep_na(FALSE))
  observeEvent(input$button2_range, filter_state_range$set_keep_na(TRUE))
  observeEvent(input$button3_range, filter_state_range$set_keep_inf(FALSE))
  observeEvent(input$button4_range, filter_state_range$set_keep_inf(TRUE))
  observeEvent(input$button5_range, filter_state_range$set_selected(c(0.2, 0.74)))
  observeEvent(input$button6_range, filter_state_range$set_selected(c(0, 1)))
  observeEvent(
    input$button0_range,
    filter_state_range$set_state(
      filter_var("data", "variable", selected = c(0.15, 0.93), keep_na = TRUE, keep_inf = TRUE)
    )
  )
}

if (interactive()) {
  shinyApp(ui, server)
}
}


## ------------------------------------------------
## Method `RangeFilterState$set_selected`
## ------------------------------------------------

filter <- teal.slice:::RangeFilterState$new(c(1, 2, 3, 4), varname = "name")
filter$set_selected(c(2, 3))

}
\keyword{internal}
\section{Super classes}{
\code{\link[teal.slice:FilterState]{teal.slice::FilterState}} -> \code{\link[teal.slice:InteractiveFilterState]{teal.slice::InteractiveFilterState}} -> \code{RangeFilterState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-RangeFilterState-new}{\code{RangeFilterState$new()}}
\item \href{#method-RangeFilterState-format}{\code{RangeFilterState$format()}}
\item \href{#method-RangeFilterState-is_any_filtered}{\code{RangeFilterState$is_any_filtered()}}
\item \href{#method-RangeFilterState-get_call}{\code{RangeFilterState$get_call()}}
\item \href{#method-RangeFilterState-set_selected}{\code{RangeFilterState$set_selected()}}
\item \href{#method-RangeFilterState-clone}{\code{RangeFilterState$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="destroy_observers"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-destroy_observers'><code>teal.slice::InteractiveFilterState$destroy_observers()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="get_dataname"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-get_dataname'><code>teal.slice::InteractiveFilterState$get_dataname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="get_keep_inf"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-get_keep_inf'><code>teal.slice::InteractiveFilterState$get_keep_inf()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="get_keep_na"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-get_keep_na'><code>teal.slice::InteractiveFilterState$get_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="get_selected"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-get_selected'><code>teal.slice::InteractiveFilterState$get_selected()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="get_state"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-get_state'><code>teal.slice::InteractiveFilterState$get_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="get_varlabel"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-get_varlabel'><code>teal.slice::InteractiveFilterState$get_varlabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="get_varname"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-get_varname'><code>teal.slice::InteractiveFilterState$get_varname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="print"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-print'><code>teal.slice::InteractiveFilterState$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="server"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-server'><code>teal.slice::InteractiveFilterState$server()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="set_keep_inf"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-set_keep_inf'><code>teal.slice::InteractiveFilterState$set_keep_inf()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="set_keep_na"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-set_keep_na'><code>teal.slice::InteractiveFilterState$set_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="set_na_rm"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-set_na_rm'><code>teal.slice::InteractiveFilterState$set_na_rm()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="set_state"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-set_state'><code>teal.slice::InteractiveFilterState$set_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="InteractiveFilterState" data-id="ui"><a href='../../teal.slice/html/InteractiveFilterState.html#method-InteractiveFilterState-ui'><code>teal.slice::InteractiveFilterState$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-new"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{InteractiveFilterState} object for range selection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$new(
  x,
  x_reactive = reactive(NULL),
  dataname,
  varname,
  choices = NULL,
  selected = NULL,
  keep_na = NULL,
  keep_inf = NULL,
  fixed = FALSE,
  extract_type = character(0),
  ...
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{numeric})\cr
values of the variable used in filter}

\item{\code{x_reactive}}{(\code{reactive})\cr
returning vector of the same type as \code{x}. Is used to update
counts following the change in values of the filtered dataset.
If it is set to \code{reactive(NULL)} then counts based on filtered
dataset are not shown.}

\item{\code{dataname}}{(\code{character(1)})\cr
optional name of dataset where \code{x} is taken from. Must be specified
if \code{extract_type} argument is not empty.}

\item{\code{varname}}{(\code{character(1)})\cr
name of the variable.}

\item{\code{choices}}{(\code{atomic}, \code{NULL})\cr
vector specifying allowed selection values}

\item{\code{selected}}{(\code{atomic}, \code{NULL})\cr
vector specifying selection}

\item{\code{keep_na}}{(\code{logical(1)}, \code{NULL})\cr
flag specifying whether to keep missing values}

\item{\code{keep_inf}}{(\code{logical(1)}, \code{NULL})\cr
flag specifying whether to keep infinite values}

\item{\code{fixed}}{(\code{logical(1)})\cr
flag specifying whether the \code{FilterState} is initiated fixed}

\item{\code{extract_type}}{(\code{character(0)}, \code{character(1)})\cr
whether condition calls should be prefixed by dataname. Possible values:
\itemize{
\item{\code{character(0)} (default)}{ \code{varname} in the condition call will not be prefixed}
\item{\code{"list"}}{ \code{varname} in the condition call will be returned as \verb{<dataname>$<varname>}}
\item{\code{"matrix"}}{ \code{varname} in the condition call will be returned as \verb{<dataname>[, <varname>]}}
}}

\item{\code{...}}{additional arguments to be saved as a list in \code{private$extras} field}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-format"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-format}{}}}
\subsection{Method \code{format()}}{
Returns a formatted string representing this \code{RangeFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)})
the number of spaces before after each new line character of the formatted string.
Default: 0}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-is_any_filtered"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-is_any_filtered}{}}}
\subsection{Method \code{is_any_filtered()}}{
Answers the question of whether the current settings and values selected actually filters out any values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$is_any_filtered()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical scalar
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection.
For this class returned call looks like
\verb{<varname> >= <min value> & <varname> <= <max value>} with
optional \verb{is.na(<varname>)} and \verb{is.finite(<varname>)}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$get_call(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{name of data set; defaults to \code{private$dataname}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{call})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-set_selected"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-set_selected}{}}}
\subsection{Method \code{set_selected()}}{
Sets the selected values of this \code{RangeFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_selected(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{numeric(2)}) the two-elements array of the lower and upper bound
of the selected range. Must not contain NA values.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{filter <- teal.slice:::RangeFilterState$new(c(1, 2, 3, 4), varname = "name")
filter$set_selected(c(2, 3))

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-RangeFilterState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-RangeFilterState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
