% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStatesSE.R
\name{SEFilterStates}
\alias{SEFilterStates}
\title{\code{SEFilterStates}}
\description{
Specialization of \code{FilterStates} for \code{SummaryExperiment}.
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterStates]{teal.slice::FilterStates}} -> \code{SEFilterStates}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SEFilterStates-new}{\code{SEFilterStates$new()}}
\item \href{#method-SEFilterStates-format}{\code{SEFilterStates$format()}}
\item \href{#method-SEFilterStates-server}{\code{SEFilterStates$server()}}
\item \href{#method-SEFilterStates-get_filter_state}{\code{SEFilterStates$get_filter_state()}}
\item \href{#method-SEFilterStates-set_filter_state}{\code{SEFilterStates$set_filter_state()}}
\item \href{#method-SEFilterStates-remove_filter_state}{\code{SEFilterStates$remove_filter_state()}}
\item \href{#method-SEFilterStates-ui_add_filter_state}{\code{SEFilterStates$ui_add_filter_state()}}
\item \href{#method-SEFilterStates-srv_add_filter_state}{\code{SEFilterStates$srv_add_filter_state()}}
\item \href{#method-SEFilterStates-clone}{\code{SEFilterStates$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_call"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_call'><code>teal.slice::FilterStates$get_call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_datalabel"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_datalabel'><code>teal.slice::FilterStates$get_datalabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_filter_count"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_filter_count'><code>teal.slice::FilterStates$get_filter_count()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_fun"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_fun'><code>teal.slice::FilterStates$get_fun()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="print"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-print'><code>teal.slice::FilterStates$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="state_list_empty"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-state_list_empty'><code>teal.slice::FilterStates$state_list_empty()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="state_list_get"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-state_list_get'><code>teal.slice::FilterStates$state_list_get()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="state_list_push"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-state_list_push'><code>teal.slice::FilterStates$state_list_push()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="state_list_remove"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-state_list_remove'><code>teal.slice::FilterStates$state_list_remove()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="ui"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-ui'><code>teal.slice::FilterStates$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-new"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-new}{}}}
\subsection{Method \code{new()}}{
Initialize \code{SEFilterStates} object

Initialize \code{SEFilterStates} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$new(dataname, datalabel)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character(1)})\cr
name of the data used in the expression
specified to the function argument attached to this \code{FilterStates}.}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-format"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-format}{}}}
\subsection{Method \code{format()}}{
Returns the formatted string representing this \code{MAEFilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces before each line of the representation}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-server"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-server}{}}}
\subsection{Method \code{server()}}{
Server module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Gets the reactive values from the active \code{FilterState} objects.

Gets all active filters from this dataset in form of the nested list.
The output list is a compatible input to \code{self$set_filter_state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} containing one or two lists  depending on the number of
\code{state_list} object (I.e. if \code{rowData} and \code{colData} exist). Each
\code{list} contains elements number equal to number of active filter variables.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$set_filter_state(data, state, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{SummarizedExperiment})\cr
data which are supposed to be filtered.}

\item{\code{state}}{(\verb{named list})\cr
this list should contain \code{subset} and \code{select} element where
each should be a named list containing values as a selection in the \code{FilterState}.
Names of each the \code{list} element in \code{subset} and \code{select} should correspond to
the name of the column in \code{rowData(data)} and \code{colData(data)}.}

\item{\code{...}}{ignored.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Remove a variable from the \code{state_list} and its corresponding UI element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$remove_filter_state(state_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state_id}}{(\code{character(1)})\cr name of \code{state_list} element.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-ui_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-ui_add_filter_state}{}}}
\subsection{Method \code{ui_add_filter_state()}}{
Shiny UI module to add filter variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$ui_add_filter_state(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny module}

\item{\code{data}}{(\code{SummarizedExperiment})\cr
object containing \code{colData} and \code{rowData} which columns
are used to choose filter variables. Column selection from \code{colData}
and \code{rowData} are separate shiny entities.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny.tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-srv_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-srv_add_filter_state}{}}}
\subsection{Method \code{srv_add_filter_state()}}{
Shiny server module to add filter variable

Module controls available choices to select as a filter variable.
Selected filter variable is being removed from available choices.
Removed filter variable gets back to available choices.
This module unlike other \code{FilterStates} classes manages two
sets of filter variables - one for \code{colData} and another for
\code{rowData}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$srv_add_filter_state(id, data, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{data}}{(\code{SummarizedExperiment})\cr
object containing \code{colData} and \code{rowData} which columns
are used to choose filter variables. Column selection from \code{colData}
and \code{rowData} are separate shiny entities.}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
