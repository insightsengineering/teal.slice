% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStatesSE.R
\name{SEFilterStates}
\alias{SEFilterStates}
\title{\code{FilterStates} subclass for SummarizedExperiments}
\description{
Handles filter states in a \code{SummaryExperiment}
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterStates]{teal.slice::FilterStates}} -> \code{SEFilterStates}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-SEFilterStates-new}{\code{SEFilterStates$new()}}
\item \href{#method-SEFilterStates-format}{\code{SEFilterStates$format()}}
\item \href{#method-SEFilterStates-get_filter_state}{\code{SEFilterStates$get_filter_state()}}
\item \href{#method-SEFilterStates-set_filter_state}{\code{SEFilterStates$set_filter_state()}}
\item \href{#method-SEFilterStates-remove_filter_state}{\code{SEFilterStates$remove_filter_state()}}
\item \href{#method-SEFilterStates-srv_active}{\code{SEFilterStates$srv_active()}}
\item \href{#method-SEFilterStates-ui_add}{\code{SEFilterStates$ui_add()}}
\item \href{#method-SEFilterStates-srv_add}{\code{SEFilterStates$srv_add()}}
\item \href{#method-SEFilterStates-clone}{\code{SEFilterStates$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="clear_filter_states"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-clear_filter_states'><code>teal.slice::FilterStates$clear_filter_states()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_call"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_call'><code>teal.slice::FilterStates$get_call()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_datalabel"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_datalabel'><code>teal.slice::FilterStates$get_datalabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_filter_count"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_filter_count'><code>teal.slice::FilterStates$get_filter_count()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="get_fun"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-get_fun'><code>teal.slice::FilterStates$get_fun()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="print"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-print'><code>teal.slice::FilterStates$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterStates" data-id="ui_active"><a href='../../teal.slice/html/FilterStates.html#method-FilterStates-ui_active'><code>teal.slice::FilterStates$ui_active()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-new"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-new}{}}}
\subsection{Method \code{new()}}{
Initialize \code{SEFilterStates} object

Initialize \code{SEFilterStates} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$new(
  data,
  data_reactive = function(sid = "") NULL,
  dataname,
  datalabel = character(0),
  excluded_varnames = character(0),
  count_type = c("none", "all", "hierarchical")
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{SummarizedExperiment})\cr
the R object which \code{subset} function is applied on.}

\item{\code{data_reactive}}{(\verb{function(sid)})\cr
should return a \code{SummarizedExperiment} object or \code{NULL}.
This object is needed for the \code{FilterState} counts being updated
on a change in filters. If function returns \code{NULL} then filtered counts are not shown.
Function has to have \code{sid} argument being a character.}

\item{\code{dataname}}{(\code{character(1)})\cr
name of the data used in the expression
specified to the function argument attached to this \code{FilterStates}.}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value.}

\item{\code{excluded_varnames}}{(\code{character})\cr
names of variables that can \strong{not} be filtered on.}

\item{\code{count_type}}{\code{character(1)}\cr
specifying how observations are tallied}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-format"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-format}{}}}
\subsection{Method \code{format()}}{
Returns the formatted string representing this \code{MAEFilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$format(indent = 0)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{indent}}{(\code{numeric(1)}) the number of spaces before each line of the representation}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{character(1)} the formatted string
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Returns active \code{FilterState} objects.

Gets all filter state information from this dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{teal_slices}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$set_filter_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{teal_slices})\cr
\code{teal_slice} objects targeting \code{rowData(data)} should contain the field \code{target = "subset"}\cr
\code{teal_slice} objects targeting \code{colData(data)} should contain the field \code{target = "select"}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Remove one or more \code{FilterState}s from \code{state_list}s along with their corresponding UI elements.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$remove_filter_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{teal_slices})\cr
specifying \code{FilterState} objects to remove;
\code{teal_slice}s may contain only \code{dataname} and \code{varname}, other elements are ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL} invisibly
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-srv_active"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-srv_active}{}}}
\subsection{Method \code{srv_active()}}{
Server module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$srv_active(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-ui_add"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-ui_add}{}}}
\subsection{Method \code{ui_add()}}{
Shiny UI module to add filter variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$ui_add(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny module}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny.tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-srv_add"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-srv_add}{}}}
\subsection{Method \code{srv_add()}}{
Shiny server module to add filter variable

Module controls available choices to select as a filter variable.
Selected filter variable is being removed from available choices.
Removed filter variable gets back to available choices.
This module unlike other \code{FilterStates} classes manages two
sets of filter variables - one for \code{colData} and another for
\code{rowData}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$srv_add(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-SEFilterStates-clone"></a>}}
\if{latex}{\out{\hypertarget{method-SEFilterStates-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
