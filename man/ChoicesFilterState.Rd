% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStateChoices.R
\docType{class}
\name{ChoicesFilterState}
\alias{ChoicesFilterState}
\title{\code{FilterState} object for factor or character variable}
\description{
\code{FilterState} object for factor or character variable

\code{FilterState} object for factor or character variable
}
\note{
Casts the passed object to \code{character} before validating the input
making it possible to pass any object coercible to \code{character} to this method.
}
\examples{
filter_state <- teal.slice:::ChoicesFilterState$new(
  c(LETTERS, NA),
  varname = "x",
  input_dataname = as.name("data"),
  extract_type = character(0)
)
isolate(filter_state$get_call())
isolate(filter_state$set_selected("B"))
isolate(filter_state$set_keep_na(TRUE))
isolate(filter_state$get_call())

## ------------------------------------------------
## Method `ChoicesFilterState$set_selected`
## ------------------------------------------------

filter <- teal.slice:::ChoicesFilterState$new(c("a", "b", "c"), varname = "name")
filter$set_selected(c("c", "a"))
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterState]{teal.slice::FilterState}} -> \code{ChoicesFilterState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-ChoicesFilterState-new}{\code{ChoicesFilterState$new()}}
\item \href{#method-ChoicesFilterState-is_any_filtered}{\code{ChoicesFilterState$is_any_filtered()}}
\item \href{#method-ChoicesFilterState-get_call}{\code{ChoicesFilterState$get_call()}}
\item \href{#method-ChoicesFilterState-set_state}{\code{ChoicesFilterState$set_state()}}
\item \href{#method-ChoicesFilterState-set_selected}{\code{ChoicesFilterState$set_selected()}}
\item \href{#method-ChoicesFilterState-clone}{\code{ChoicesFilterState$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="destroy_observers"><a href='../../teal.slice/html/FilterState.html#method-FilterState-destroy_observers'><code>teal.slice::FilterState$destroy_observers()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="format"><a href='../../teal.slice/html/FilterState.html#method-FilterState-format'><code>teal.slice::FilterState$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_dataname"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_dataname'><code>teal.slice::FilterState$get_dataname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_keep_na"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_keep_na'><code>teal.slice::FilterState$get_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_selected"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_selected'><code>teal.slice::FilterState$get_selected()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_state"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_state'><code>teal.slice::FilterState$get_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_varlabel"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_varlabel'><code>teal.slice::FilterState$get_varlabel()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_varname"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_varname'><code>teal.slice::FilterState$get_varname()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="print"><a href='../../teal.slice/html/FilterState.html#method-FilterState-print'><code>teal.slice::FilterState$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="server"><a href='../../teal.slice/html/FilterState.html#method-FilterState-server'><code>teal.slice::FilterState$server()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_keep_na"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_keep_na'><code>teal.slice::FilterState$set_keep_na()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_na_rm"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_na_rm'><code>teal.slice::FilterState$set_na_rm()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="ui"><a href='../../teal.slice/html/FilterState.html#method-FilterState-ui'><code>teal.slice::FilterState$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChoicesFilterState-new"></a>}}
\if{latex}{\out{\hypertarget{method-ChoicesFilterState-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilterState} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChoicesFilterState$new(
  x,
  varname,
  varlabel = character(0),
  input_dataname = NULL,
  extract_type = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{character} or \code{factor})\cr
values of the variable used in filter}

\item{\code{varname}}{(\code{character}, \code{name})\cr
name of the variable}

\item{\code{varlabel}}{(\code{character(1)})\cr
label of the variable (optional).}

\item{\code{input_dataname}}{(\code{name} or \code{call})\cr
name of dataset where \code{x} is taken from}

\item{\code{extract_type}}{(\code{character(0)}, \code{character(1)})\cr
whether condition calls should be prefixed by dataname. Possible values:
\itemize{
\item{\code{character(0)} (default)}{ \code{varname} in the condition call will not be prefixed}
\item{\code{"list"}}{ \code{varname} in the condition call will be returned as \verb{<input_dataname>$<varname>}}
\item{\code{"matrix"}}{ \code{varname} in the condition call will be returned as \verb{<input_dataname>[, <varname>]}}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChoicesFilterState-is_any_filtered"></a>}}
\if{latex}{\out{\hypertarget{method-ChoicesFilterState-is_any_filtered}{}}}
\subsection{Method \code{is_any_filtered()}}{
Answers the question of whether the current settings and values selected actually filters out any values.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChoicesFilterState$is_any_filtered()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
logical scalar
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChoicesFilterState-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-ChoicesFilterState-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection.
For this class returned call looks like
\verb{<varname> \%in\%  c(<values selected>)} with
optional \verb{is.na(<varname>)}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChoicesFilterState$get_call()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{call})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChoicesFilterState-set_state"></a>}}
\if{latex}{\out{\hypertarget{method-ChoicesFilterState-set_state}{}}}
\subsection{Method \code{set_state()}}{
Set state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChoicesFilterState$set_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{list})\cr
contains fields relevant for a specific class
\itemize{
\item{\code{selected}}{ defines initial selection}
\item{\code{keep_na} (\code{logical})}{ defines whether to keep or remove \code{NA} values}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChoicesFilterState-set_selected"></a>}}
\if{latex}{\out{\hypertarget{method-ChoicesFilterState-set_selected}{}}}
\subsection{Method \code{set_selected()}}{
Sets the selected values of this \code{ChoicesFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChoicesFilterState$set_selected(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{character}) the array of the selected choices.
Must not contain NA values.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly \code{NULL}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{filter <- teal.slice:::ChoicesFilterState$new(c("a", "b", "c"), varname = "name")
filter$set_selected(c("c", "a"))
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ChoicesFilterState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-ChoicesFilterState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{ChoicesFilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
