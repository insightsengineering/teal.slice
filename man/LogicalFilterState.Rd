% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStateLogical.R
\docType{class}
\name{LogicalFilterState}
\alias{LogicalFilterState}
\title{\code{FilterState} object for logical variable}
\description{
Manages choosing a logical state.
}
\seealso{
examples found here: \code{vignette("internal_function_examples", package = "teal.slice")}.
}
\keyword{internal}
\section{Super class}{
\code{\link[teal.slice:FilterState]{teal.slice::FilterState}} -> \code{LogicalFilterState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-LogicalFilterState-new}{\code{LogicalFilterState$new()}}
\item \href{#method-LogicalFilterState-get_call}{\code{LogicalFilterState$get_call()}}
\item \href{#method-LogicalFilterState-clone}{\code{LogicalFilterState$clone()}}
}
}
\if{html}{\out{
<details><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="destroy_observers"><a href='../../teal.slice/html/FilterState.html#method-FilterState-destroy_observers'><code>teal.slice::FilterState$destroy_observers()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="format"><a href='../../teal.slice/html/FilterState.html#method-FilterState-format'><code>teal.slice::FilterState$format()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="get_state"><a href='../../teal.slice/html/FilterState.html#method-FilterState-get_state'><code>teal.slice::FilterState$get_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="print"><a href='../../teal.slice/html/FilterState.html#method-FilterState-print'><code>teal.slice::FilterState$print()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="server"><a href='../../teal.slice/html/FilterState.html#method-FilterState-server'><code>teal.slice::FilterState$server()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="set_state"><a href='../../teal.slice/html/FilterState.html#method-FilterState-set_state'><code>teal.slice::FilterState$set_state()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.slice" data-topic="FilterState" data-id="ui"><a href='../../teal.slice/html/FilterState.html#method-FilterState-ui'><code>teal.slice::FilterState$ui()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LogicalFilterState-new"></a>}}
\if{latex}{\out{\hypertarget{method-LogicalFilterState-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilterState} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LogicalFilterState$new(
  x,
  x_reactive = reactive(NULL),
  extract_type = character(0),
  slice
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{logical})\cr
values of the variable used in filter}

\item{\code{x_reactive}}{(\code{reactive})\cr
returning vector of the same type as \code{x}. Is used to update
counts following the change in values of the filtered dataset.
If it is set to \code{reactive(NULL)} then counts based on filtered
dataset are not shown.}

\item{\code{extract_type}}{(\code{character(0)}, \code{character(1)})\cr
whether condition calls should be prefixed by \code{dataname}. Possible values:
\itemize{
\item \code{character(0)} (default) \code{varname} in the condition call will not be prefixed
\item \code{"list"} \code{varname} in the condition call will be returned as \verb{<dataname>$<varname>}
\item \code{"matrix"} \code{varname} in the condition call will be returned as \verb{<dataname>[, <varname>]}
}}

\item{\code{slice}}{(\code{teal_slice})\cr
object created using \code{\link[=teal_slice]{teal_slice()}}. \code{teal_slice} is stored
in the class and \code{set_state} directly manipulates values within \code{teal_slice}. \code{get_state}
returns \code{teal_slice} object which can be reused in other places. Beware, that \code{teal_slice}
is a \code{reactiveValues} which means that changes in particular object are automatically
reflected in all places which refer to the same \code{teal_slice}.}

\item{\code{...}}{additional arguments to be saved as a list in \code{private$extras} field}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LogicalFilterState-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-LogicalFilterState-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection.
For \code{LogicalFilterState} it's a \verb{!<varname>} or \verb{<varname>} and optionally
\verb{is.na(<varname>)}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LogicalFilterState$get_call(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{name of data set; defaults to \code{private$get_dataname()}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{call})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-LogicalFilterState-clone"></a>}}
\if{latex}{\out{\hypertarget{method-LogicalFilterState-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{LogicalFilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
