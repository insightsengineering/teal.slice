<?xml version="1.0" encoding="UTF-8"?>
<testsuites>
  <testsuite name="ChoicesFilterState" timestamp="2023-06-21T11:56:29Z" hostname="23b19630c45c" tests="59" skipped="0" failures="0" errors="0" time="1.431">
    <testcase time="0.127" classname="ChoicesFilterState" name="constructor_accepts_all_data_classes"/>
    <testcase time="0.0499999999999998" classname="ChoicesFilterState" name="constructor_accepts_all_data_classes"/>
    <testcase time="0.0250000000000001" classname="ChoicesFilterState" name="constructor_accepts_all_data_classes"/>
    <testcase time="0.0209999999999999" classname="ChoicesFilterState" name="constructor_accepts_all_data_classes"/>
    <testcase time="0.0170000000000001" classname="ChoicesFilterState" name="constructor_accepts_all_data_classes"/>
    <testcase time="0.0169999999999999" classname="ChoicesFilterState" name="constructor_accepts_all_data_classes"/>
    <testcase time="0.028" classname="ChoicesFilterState" name="constructor_raises_warning_if_choices_out_of_range"/>
    <testcase time="0.024" classname="ChoicesFilterState" name="constructor_raises_warning_if_choices_out_of_range"/>
    <testcase time="0.02" classname="ChoicesFilterState" name="constructor_raises_warning_if_choices_out_of_range"/>
    <testcase time="0.018" classname="ChoicesFilterState" name="constructor_raises_warning_if_selected_out_of_range"/>
    <testcase time="0.0169999999999999" classname="ChoicesFilterState" name="constructor_raises_warning_if_selected_out_of_range"/>
    <testcase time="0.0370000000000001" classname="ChoicesFilterState" name="constructor_sets_default_state"/>
    <testcase time="0.0229999999999999" classname="ChoicesFilterState" name="constructor_forces_single_selected_when_multiple_is_FALSE"/>
    <testcase time="0.00399999999999978" classname="ChoicesFilterState" name="constructor_forces_single_selected_when_multiple_is_FALSE"/>
    <testcase time="0.022" classname="ChoicesFilterState" name="method_get_call_of_default_ChoicesFilterState_object_returns_NULL"/>
    <testcase time="0.026" classname="ChoicesFilterState" name="get_call_returns_NULL_if_all_choices_are_selected"/>
    <testcase time="0.0190000000000001" classname="ChoicesFilterState" name="get_call_returns_call_selected_different_than_choices"/>
    <testcase time="0.018" classname="ChoicesFilterState" name="get_call_returns_call_always_if_choices_are_limited_regardless_of_selected"/>
    <testcase time="0.0189999999999999" classname="ChoicesFilterState" name="get_call_prefixes_varname_by_dataname_varname_if_extract_type_list_"/>
    <testcase time="0.022" classname="ChoicesFilterState" name="get_call_prefixes_varname_by_dataname_varname_if_extract_type_matrix_"/>
    <testcase time="0.018" classname="ChoicesFilterState" name="get_call_uses_comparison_when_single_value_selected"/>
    <testcase time="0.0189999999999999" classname="ChoicesFilterState" name="get_call_adds_is.na_var_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.02" classname="ChoicesFilterState" name="get_call_returns_call_if_all_selected_but_NA_exists"/>
    <testcase time="0.022" classname="ChoicesFilterState" name="get_call_returns_calls_appropriate_for_factor_var"/>
    <testcase time="0.0190000000000001" classname="ChoicesFilterState" name="get_call_returns_calls_appropriate_for_numeric_var"/>
    <testcase time="0.0189999999999999" classname="ChoicesFilterState" name="get_call_returns_calls_appropriate_for_date_var"/>
    <testcase time="0.02" classname="ChoicesFilterState" name="get_call_returns_calls_appropriate_for_posixct_var"/>
    <testcase time="0.0229999999999999" classname="ChoicesFilterState" name="get_call_returns_calls_appropriate_for_posixlt_var"/>
    <testcase time="0.0290000000000001" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.0129999999999999" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.032" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.0130000000000001" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.0279999999999998" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.0170000000000001" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.028" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.014" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.032" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.014" classname="ChoicesFilterState" name="set_state_raises_warning_when_selection_not_within_allowed_choices"/>
    <testcase time="0.0289999999999999" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.0609999999999999" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.028" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.0289999999999999" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.00300000000000011" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.0350000000000001" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.00299999999999967" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.0290000000000004" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.004" classname="ChoicesFilterState" name="set_state_sets_intersection_of_choices_and_passed_values"/>
    <testcase time="0.0339999999999998" classname="ChoicesFilterState" name="set_state_sets_multiple_option"/>
    <testcase time="0.028" classname="ChoicesFilterState" name="set_state_sets_multiple_option"/>
    <testcase time="0.0270000000000001" classname="ChoicesFilterState" name="set_state_sets_multiple_option"/>
    <testcase time="0.0429999999999997" classname="ChoicesFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0190000000000001" classname="ChoicesFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0150000000000001" classname="ChoicesFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.016" classname="ChoicesFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0109999999999997" classname="ChoicesFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.024" classname="ChoicesFilterState" name="format_returns_properly_formatted_string_representation"/>
    <testcase time="0.00800000000000001" classname="ChoicesFilterState" name="format_returns_properly_formatted_string_representation"/>
    <testcase time="0.0420000000000003" classname="ChoicesFilterState" name="print_returns_properly_formatted_string_representation"/>
    <testcase time="0.0089999999999999" classname="ChoicesFilterState" name="print_returns_properly_formatted_string_representation"/>
  </testsuite>
  <testsuite name="DFFilterStates" timestamp="2023-06-21T11:56:31Z" hostname="23b19630c45c" tests="3" skipped="0" failures="0" errors="1" time="0.063">
    <testcase time="0.0310000000000001" classname="DFFilterStates" name="contructor_accepts_keys_as_string"/>
    <testcase time="0.0129999999999999" classname="DFFilterStates" name="get_filter_state_return_teal_slices_with_include_varnames_by_default"/>
    <testcase time="0.0190000000000001" classname="DFFilterStates" name="get_call_returns_filter_call_on_dataname_with_unprefixed_variables_in_logical_expression">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DFFilterStates.R:28:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(fs)
       at test-DFFilterStates.R:28:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="DateFilterState" timestamp="2023-06-21T11:56:31Z" hostname="23b19630c45c" tests="36" skipped="0" failures="0" errors="0" time="0.878">
    <testcase time="0.103" classname="DateFilterState" name="constructor_accepts_a_Date_object"/>
    <testcase time="0.0100000000000002" classname="DateFilterState" name="constructor_accepts_a_Date_object"/>
    <testcase time="0.0209999999999999" classname="DateFilterState" name="constructor_raises_warning_when_selected_out_of_range"/>
    <testcase time="0.0310000000000001" classname="DateFilterState" name="constructor_raises_warning_when_selected_is_not_sorted"/>
    <testcase time="0.0209999999999999" classname="DateFilterState" name="constructor_raises_error_when_selection_is_not_Date"/>
    <testcase time="0.02" classname="DateFilterState" name="constructor_raises_warning_when_chioces_is_not_sorted"/>
    <testcase time="0.0229999999999997" classname="DateFilterState" name="constructor_raises_warning_when_chioces_out_of_range"/>
    <testcase time="0.0180000000000002" classname="DateFilterState" name="constructor_raises_error_when_selection_is_not_Date"/>
    <testcase time="0.024" classname="DateFilterState" name="constructor_sets_default_state"/>
    <testcase time="0.052" classname="DateFilterState" name="set_state_selected_accepts_vector_of_two_coercible_to_Date_elements"/>
    <testcase time="0.012" classname="DateFilterState" name="set_state_selected_accepts_vector_of_two_coercible_to_Date_elements"/>
    <testcase time="0.0219999999999998" classname="DateFilterState" name="set_state_selected_accepts_vector_of_two_coercible_to_Date_elements"/>
    <testcase time="0.0140000000000002" classname="DateFilterState" name="set_state_selected_accepts_vector_of_two_coercible_to_Date_elements"/>
    <testcase time="0.122" classname="DateFilterState" name="set_state_selected_raises_warning_when_selection_is_not_within_the_possible_range"/>
    <testcase time="0.0139999999999998" classname="DateFilterState" name="set_state_selected_raises_warning_when_selection_is_not_within_the_possible_range"/>
    <testcase time="0.0140000000000002" classname="DateFilterState" name="set_state_selected_raises_warning_when_selection_is_not_within_the_possible_range"/>
    <testcase time="0.028" classname="DateFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.0139999999999998" classname="DateFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.0140000000000002" classname="DateFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.044" classname="DateFilterState" name="set_state_selected_raises_error_when_selection_is_not_a_Date_or_coercible"/>
    <testcase time="0.0249999999999999" classname="DateFilterState" name="method_get_call_of_default_DateFilterState_object_returns_NULL"/>
    <testcase time="0.02" classname="DateFilterState" name="get_call_returns_call_selected_different_than_choices"/>
    <testcase time="0.02" classname="DateFilterState" name="get_call_returns_call_always_if_choices_are_limited_regardless_of_selected"/>
    <testcase time="0.02" classname="DateFilterState" name="get_call_prefixes_varname_by_dataname_varname_if_extract_type_list_"/>
    <testcase time="0.0209999999999999" classname="DateFilterState" name="get_call_prefixes_varname_by_dataname_varname_if_extract_type_matrix_"/>
    <testcase time="0.0249999999999999" classname="DateFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.0180000000000002" classname="DateFilterState" name="get_call_returns_call_if_all_selected_but_NA_exists"/>
    <testcase time="0.0179999999999998" classname="DateFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00499999999999989" classname="DateFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00900000000000034" classname="DateFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00999999999999979" classname="DateFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0089999999999999" classname="DateFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0210000000000004" classname="DateFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00699999999999967" classname="DateFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0209999999999999" classname="DateFilterState" name="print_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00800000000000001" classname="DateFilterState" name="print_returns_a_properly_formatted_string_representation"/>
  </testsuite>
  <testsuite name="DatetimeFilterState" timestamp="2023-06-21T11:56:32Z" hostname="23b19630c45c" tests="42" skipped="0" failures="0" errors="0" time="0.706">
    <testcase time="0.028" classname="DatetimeFilterState" name="constructor_accepts_a_POSIXct_or_POSIXlt_object"/>
    <testcase time="0.0140000000000002" classname="DatetimeFilterState" name="constructor_accepts_a_POSIXct_or_POSIXlt_object"/>
    <testcase time="0.0110000000000001" classname="DatetimeFilterState" name="constructor_accepts_a_POSIXct_or_POSIXlt_object"/>
    <testcase time="0.0259999999999998" classname="DatetimeFilterState" name="constructor_raises_warning_when_selected_is_out_of_range"/>
    <testcase time="0.0169999999999999" classname="DatetimeFilterState" name="constructor_raises_warning_when_selected_is_not_sorted"/>
    <testcase time="0.0190000000000001" classname="DatetimeFilterState" name="constructor_raises_error_when_selection_is_not_Datetime_or_coercible"/>
    <testcase time="0.0179999999999998" classname="DatetimeFilterState" name="constructor_raises_warning_when_choices_is_out_of_range"/>
    <testcase time="0.0180000000000002" classname="DatetimeFilterState" name="constructor_raises_warning_when_choices_is_not_sorted"/>
    <testcase time="0.016" classname="DatetimeFilterState" name="constructor_raises_error_when_choices_is_not_Date"/>
    <testcase time="0.0430000000000001" classname="DatetimeFilterState" name="set_state_selected_accepts_vector_of_two_POSIXct_objects_or_coercible"/>
    <testcase time="0.0129999999999999" classname="DatetimeFilterState" name="set_state_selected_accepts_vector_of_two_POSIXct_objects_or_coercible"/>
    <testcase time="0.0129999999999999" classname="DatetimeFilterState" name="set_state_selected_accepts_vector_of_two_POSIXct_objects_or_coercible"/>
    <testcase time="0.0139999999999998" classname="DatetimeFilterState" name="set_state_selected_accepts_vector_of_two_POSIXct_objects_or_coercible"/>
    <testcase time="0.0330000000000004" classname="DatetimeFilterState" name="set_state_selected_raises_warning_when_selection_not_fully_included_in_range"/>
    <testcase time="0.0129999999999999" classname="DatetimeFilterState" name="set_state_selected_raises_warning_when_selection_not_fully_included_in_range"/>
    <testcase time="0.0150000000000001" classname="DatetimeFilterState" name="set_state_selected_raises_warning_when_selection_not_fully_included_in_range"/>
    <testcase time="0.0289999999999999" classname="DatetimeFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.0139999999999998" classname="DatetimeFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.0150000000000001" classname="DatetimeFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.028" classname="DatetimeFilterState" name="set_state_selected_raises_error_when_selection_is_not_a_Date_or_coercible"/>
    <testcase time="0.0219999999999998" classname="DatetimeFilterState" name="get_call_method_of_default_DatetimeFilterState_object_returns_NULL"/>
    <testcase time="0.0190000000000001" classname="DatetimeFilterState" name="get_call_returns_call_selected_different_than_choices"/>
    <testcase time="0.0169999999999999" classname="DatetimeFilterState" name="get_call_returns_call_always_if_choices_are_limited_regardless_of_selected"/>
    <testcase time="0.0179999999999998" classname="DatetimeFilterState" name="get_call_prefixes_varname_by_dataname_varname_if_extract_type_list_"/>
    <testcase time="0.0270000000000001" classname="DatetimeFilterState" name="get_call_prefixes_varname_by_dataname_varname_if_extract_type_matrix_"/>
    <testcase time="0.0179999999999998" classname="DatetimeFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.00800000000000001" classname="DatetimeFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.00800000000000001" classname="DatetimeFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.00900000000000034" classname="DatetimeFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.0109999999999997" classname="DatetimeFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.00900000000000034" classname="DatetimeFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.00699999999999967" classname="DatetimeFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.02" classname="DatetimeFilterState" name="get_call_returns_call_if_all_selected_but_NA_exists"/>
    <testcase time="0.0190000000000001" classname="DatetimeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00499999999999989" classname="DatetimeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0100000000000002" classname="DatetimeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0089999999999999" classname="DatetimeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0089999999999999" classname="DatetimeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0219999999999998" classname="DatetimeFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0120000000000005" classname="DatetimeFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0220000000000002" classname="DatetimeFilterState" name="print_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00800000000000001" classname="DatetimeFilterState" name="print_returns_a_properly_formatted_string_representation"/>
  </testsuite>
  <testsuite name="DefaultFilteredDataset" timestamp="2023-06-21T11:56:32Z" hostname="23b19630c45c" tests="19" skipped="0" failures="1" errors="8" time="0.604">
    <testcase time="0.124" classname="DefaultFilteredDataset" name="constructor_accepts_data.frame_object_with_a_dataname"/>
    <testcase time="0.00800000000000001" classname="DefaultFilteredDataset" name="constructor_accepts_data.frame_object_with_a_dataname"/>
    <testcase time="0.00900000000000034" classname="DefaultFilteredDataset" name="constructor_accepts_data.frame_object_with_a_dataname"/>
    <testcase time="0.00699999999999967" classname="DefaultFilteredDataset" name="constructor_accepts_data.frame_object_with_a_dataname"/>
    <testcase time="0.016" classname="DefaultFilteredDataset" name="constructor_accepts_data.frame_object_with_a_dataname"/>
    <testcase time="0.0279999999999996" classname="DefaultFilteredDataset" name="filter_states_list_is_initialized_with_single_FilterStates_element_named_filter"/>
    <testcase time="0.0289999999999999" classname="DefaultFilteredDataset" name="set_filter_state_accepts_teal_slices_">
      <failure type="failure" message="Expected `dataset$set_filter_state(state = fs)` to run without any errors. ('test-DefaultFilteredDataset.R:31:3')">Expected `dataset$set_filter_state(state = fs)` to run without any errors.
ℹ Actually got a &lt;simpleError&gt;:
  Error in `FUN()`:
  ! Assertion on 'dataname matches private$dataname' failed: Must be TRUE.</failure>
    </testcase>
    <testcase time="0.0230000000000006" classname="DefaultFilteredDataset" name="set_filter_state_accepts_teal_slices_"/>
    <testcase time="0.00999999999999979" classname="DefaultFilteredDataset" name="set_filter_state_accepts_teal_slices_"/>
    <testcase time="0.0190000000000001" classname="DefaultFilteredDataset" name="set_filter_state_sets_teal_slice_">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DefaultFilteredDataset.R:52:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(fs)
       at test-DefaultFilteredDataset.R:52:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0419999999999998" classname="DefaultFilteredDataset" name="format_returns_a_properly_formatted_string_representation">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DefaultFilteredDataset.R:73:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(fs)
       at test-DefaultFilteredDataset.R:73:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0600000000000005" classname="DefaultFilteredDataset" name="print_returns_a_properly_formatted_string_representation">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DefaultFilteredDataset.R:106:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(fs)
       at test-DefaultFilteredDataset.R:106:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0419999999999998" classname="DefaultFilteredDataset" name="remove_filter_state_removes_desired_filter">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DefaultFilteredDataset.R:125:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-DefaultFilteredDataset.R:125:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0430000000000001" classname="DefaultFilteredDataset" name="remove_filter_state_can_remove_multiple_filters">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DefaultFilteredDataset.R:136:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-DefaultFilteredDataset.R:136:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.032" classname="DefaultFilteredDataset" name="get_filter_overview_returns_overview_data.frame_with_obs_filter_counts"/>
    <testcase time="0.0209999999999999" classname="DefaultFilteredDataset" name="get_filter_overview_returns_overview_data.frame_with_obs_filter_counts">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DefaultFilteredDataset.R:162:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset_iris$set_filter_state(fs)
       at test-DefaultFilteredDataset.R:162:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0379999999999994" classname="DefaultFilteredDataset" name="get_filter_overview_returns_overview_data.frame_with_obs_and_subject_filter_counts_">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DefaultFilteredDataset.R:174:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset_iris$set_filter_state(fs)
       at test-DefaultFilteredDataset.R:174:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.032" classname="DefaultFilteredDataset" name="get_call_returns_a_list_of_calls_or_NULL"/>
    <testcase time="0.0209999999999999" classname="DefaultFilteredDataset" name="get_call_returns_a_list_of_calls_or_NULL">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-DefaultFilteredDataset.R:192:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filtered_dataset$set_filter_state(state = fs)
       at test-DefaultFilteredDataset.R:192:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="EmptyFilterState" timestamp="2023-06-21T11:56:33Z" hostname="23b19630c45c" tests="11" skipped="0" failures="0" errors="0" time="0.146">
    <testcase time="0.0450000000000008" classname="EmptyFilterState" name="get_call_of_default_EmptyFilterState_returns_NULL_by_default"/>
    <testcase time="0.0119999999999996" classname="EmptyFilterState" name="get_call_of_default_EmptyFilterState_returns_is.na_call_if_keep_na_is_FALSE"/>
    <testcase time="0.0129999999999999" classname="EmptyFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00400000000000045" classname="EmptyFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00899999999999945" classname="EmptyFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0140000000000002" classname="EmptyFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00800000000000001" classname="EmptyFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0140000000000002" classname="EmptyFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00600000000000023" classname="EmptyFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0140000000000002" classname="EmptyFilterState" name="print_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00699999999999967" classname="EmptyFilterState" name="print_returns_a_properly_formatted_string_representation"/>
  </testsuite>
  <testsuite name="FilterState-utils" timestamp="2023-06-21T11:56:33Z" hostname="23b19630c45c" tests="8" skipped="0" failures="0" errors="0" time="0.056">
    <testcase time="0.00700000000000056" classname="FilterState_utils" name="check_in_range_raises_errors_as_desired"/>
    <testcase time="0.00699999999999967" classname="FilterState_utils" name="check_in_range_raises_errors_as_desired"/>
    <testcase time="0.00699999999999967" classname="FilterState_utils" name="check_in_range_raises_errors_as_desired"/>
    <testcase time="0.00600000000000023" classname="FilterState_utils" name="check_in_range_raises_errors_as_desired"/>
    <testcase time="0.00999999999999979" classname="FilterState_utils" name="check_in_subset_prepends_error_message"/>
    <testcase time="0.00400000000000045" classname="FilterState_utils" name="check_in_subset_raises_errors_as_desired"/>
    <testcase time="0.00699999999999967" classname="FilterState_utils" name="check_in_subset_raises_errors_as_desired"/>
    <testcase time="0.00800000000000001" classname="FilterState_utils" name="check_in_subset_prepends_error_message"/>
  </testsuite>
  <testsuite name="FilterState" timestamp="2023-06-21T11:56:33Z" hostname="23b19630c45c" tests="36" skipped="0" failures="0" errors="0" time="0.465">
    <testcase time="0.0140000000000002" classname="FilterState" name="constructor_checks_arguments"/>
    <testcase time="0.00699999999999967" classname="FilterState" name="constructor_checks_arguments"/>
    <testcase time="0.00999999999999979" classname="FilterState" name="constructor_checks_arguments"/>
    <testcase time="0.0100000000000007" classname="FilterState" name="constructor_checks_arguments"/>
    <testcase time="0.0190000000000001" classname="FilterState" name="set_state_can_set_mutable_fields"/>
    <testcase time="0.00800000000000001" classname="FilterState" name="set_state_can_set_mutable_fields"/>
    <testcase time="0.00699999999999967" classname="FilterState" name="set_state_can_set_mutable_fields"/>
    <testcase time="0.00699999999999967" classname="FilterState" name="get_state_returns_a_teal_slice_object_passed_via_constructor"/>
    <testcase time="0.0190000000000001" classname="FilterState" name="get_state_returns_a_teal_slice_identical_to_set_state_input"/>
    <testcase time="0.0140000000000002" classname="FilterState" name="set_state_only_sets_properties_defined_in_teal_slice"/>
    <testcase time="0.00999999999999979" classname="FilterState" name="set_state_only_sets_properties_defined_in_teal_slice"/>
    <testcase time="0.0110000000000001" classname="FilterState" name="set_state_only_sets_properties_defined_in_teal_slice"/>
    <testcase time="0.016" classname="FilterState" name="set_state_cannot_set_mutable_fields_in_a_fixed_FilterState"/>
    <testcase time="0.00699999999999967" classname="FilterState" name="set_state_cannot_set_mutable_fields_in_a_fixed_FilterState"/>
    <testcase time="0.0190000000000001" classname="FilterState" name="set_state_can_set_mutable_fields_in_a_locked_FilterState"/>
    <testcase time="0.0119999999999996" classname="FilterState" name="constructor_initializes_selected_NULL_by_default"/>
    <testcase time="0.0110000000000001" classname="FilterState" name="constructor_initializes_keep_na_TRUE_by_default_if_data_contains_NAs"/>
    <testcase time="0.00999999999999979" classname="FilterState" name="constructor_initializes_keep_na_TRUE_by_default_if_data_contains_NAs"/>
    <testcase time="0.0120000000000005" classname="FilterState" name="get_call_raises_error"/>
    <testcase time="0.00999999999999979" classname="FilterState" name="set_selected_sets_value_get_selected_returns_the_same_value"/>
    <testcase time="0.0330000000000004" classname="FilterState" name="add_keep_na_call_modifies_call_if_keep_na_set_to_TRUE"/>
    <testcase time="0.00899999999999945" classname="FilterState" name="add_keep_na_call_modifies_call_if_keep_na_set_to_TRUE"/>
    <testcase time="0.0100000000000007" classname="FilterState" name="setting_private_na_rm_to_TRUE_adds_is.na_before_condition_via_add_keep_na_call"/>
    <testcase time="0.00899999999999945" classname="FilterState" name="setting_private_na_rm_to_TRUE_doesn_t_add_is.na_before_condition_via_add_keep_na_call_when_variable_has_no_NAs"/>
    <testcase time="0.00800000000000001" classname="FilterState" name="get_varlabel_returns_a_string_if_x_has_the_label_attribute_different_to_varname"/>
    <testcase time="0.0680000000000005" classname="FilterState" name="get_varlabel_returns_a_string_if_x_has_the_label_attribute_different_to_varname"/>
    <testcase time="0.00899999999999945" classname="FilterState" name="get_varlabel_returns_a_string_if_x_has_the_label_attribute_different_to_varname"/>
    <testcase time="0.00999999999999979" classname="FilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00400000000000045" classname="FilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00999999999999979" classname="FilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00900000000000034" classname="FilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0140000000000002" classname="FilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0119999999999996" classname="FilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00699999999999967" classname="FilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0130000000000008" classname="FilterState" name="print_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00699999999999967" classname="FilterState" name="print_returns_a_properly_formatted_string_representation"/>
  </testsuite>
  <testsuite name="FilterStateExpr" timestamp="2023-06-21T11:56:33Z" hostname="23b19630c45c" tests="7" skipped="0" failures="0" errors="0" time="0.068">
    <testcase time="0.0119999999999996" classname="FilterStateExpr" name="initialize_require_teal_slice_expr"/>
    <testcase time="0.00900000000000034" classname="FilterStateExpr" name="initialize_require_teal_slice_expr"/>
    <testcase time="0.00600000000000023" classname="FilterStateExpr" name="get_call_returns_call_identical_to_one_passed_in_the_constructor"/>
    <testcase time="0.0110000000000001" classname="FilterStateExpr" name="get_state_returns_list_of_state_values"/>
    <testcase time="0.0119999999999996" classname="FilterStateExpr" name="set_state_ignores_every_attribute"/>
    <testcase time="0.00900000000000034" classname="FilterStateExpr" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00899999999999945" classname="FilterStateExpr" name="print_returns_a_properly_formatted_string_representation"/>
  </testsuite>
  <testsuite name="FilterStates" timestamp="2023-06-21T11:56:34Z" hostname="23b19630c45c" tests="29" skipped="0" failures="0" errors="19" time="1.097">
    <testcase time="0.0140000000000002" classname="FilterStates" name="constructor_accepts_only_a_string_as_dataname"/>
    <testcase time="0.00800000000000001" classname="FilterStates" name="constructor_accepts_only_a_string_as_dataname"/>
    <testcase time="0.00800000000000001" classname="FilterStates" name="constructor_accepts_only_a_string_as_dataname"/>
    <testcase time="0.00600000000000023" classname="FilterStates" name="get_filter_state_returns_default_count_type_all_"/>
    <testcase time="0.0110000000000001" classname="FilterStates" name="set_filter_state_sets_include_variables_by_excluding_unsupported_cols_from_inputed_list">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:25:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(teal_slices)
       at test-FilterStates.R:25:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0389999999999997" classname="FilterStates" name="set_filter_state_sets_count_type">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:37:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(filter_settings(count_type = "none"))
       at test-FilterStates.R:37:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0359999999999996" classname="FilterStates" name="set_filter_state_ignores_teal_slice_for_inexisting_variables_with_log_warning">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:46:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. utils::capture.output(...)
       at test-FilterStates.R:46:2
  3. filter_states$set_filter_state(...)
 16. base::lapply(...)
 17. teal.slice (local) FUN(X[[i]], ...)
 18. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 19. checkmate::makeAssertion(x, res, .var.name, add)
 20. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0360000000000005" classname="FilterStates" name="set_filter_state_and_get_filter_state_sets_and_returns_the_same_fully_specified_teal_slices">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:61:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(fs)
       at test-FilterStates.R:61:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0359999999999996" classname="FilterStates" name="set_filter_state_updates_FilterState_when_dataname_and_varname_are_matched_between_teal_slice_and_existing_filter">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:75:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(fs)
       at test-FilterStates.R:75:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0440000000000005" classname="FilterStates" name="set_filter_state_allows_to_create_two_filters_on_the_same_variable_if_combination_of_their_fields_dataname_varname_varlabel_arg_id_differ">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:91:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(fs)
       at test-FilterStates.R:91:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.04" classname="FilterStates" name="set_filter_state_creates_a_new_FilterStateExpr">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:102:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(fs)
       at test-FilterStates.R:102:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0409999999999995" classname="FilterStates" name="remove_filter_state_of_inexistent_FilterState_raiser_warning">
      <error type="error" message="Error in `..stacktraceon..(expr)`: Assertion on 'state_id' failed: Must be of type 'character', not 'NULL'. ('test-FilterStates.R:108:3')">Error in `..stacktraceon..(expr)`: Assertion on 'state_id' failed: Must be of type 'character', not 'NULL'.
Backtrace:
  1. testthat::expect_warning(...)
       at test-FilterStates.R:108:2
  6. filter_states$remove_filter_state(...)
 19. base::lapply(...)
 20. teal.slice (local) FUN(X[[i]], ...)
 21. private$state_list_remove(state_id = state_id)
 34. checkmate::assert_character(state_id)
 35. checkmate::makeAssertion(x, res, .var.name, add)
 36. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0449999999999999" classname="FilterStates" name="remove_filter_state_removes_FilterState_objects_identified_by_dataname_datalabel_varname_arg_and_or_id_">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:124:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(fs)
       at test-FilterStates.R:124:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0270000000000001" classname="FilterStates" name="clearing_empty_FilterStates_does_not_raise_errors"/>
    <testcase time="0.0280000000000005" classname="FilterStates" name="clear_filter_state_empties_the_state_list">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:160:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(fs)
       at test-FilterStates.R:160:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0289999999999999" classname="FilterStates" name="get_call_returns_NULL_after_initialization_if_no_filter_applied"/>
    <testcase time="0.0140000000000002" classname="FilterStates" name="get_call_returns_subset_call_with_dataname_and_logical_expressions_by_default">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:174:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. fs$set_filter_state(...)
       at test-FilterStates.R:174:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0369999999999999" classname="FilterStates" name="get_call_returns_custom_fun_call">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:192:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. fs$set_filter_state(...)
       at test-FilterStates.R:192:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0359999999999996" classname="FilterStates" name="get_call_returns_subset_call_on_custom_dataname_prefixed">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:214:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. fs$set_filter_state(...)
       at test-FilterStates.R:214:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.04" classname="FilterStates" name="get_call_returns_subset_with_varnames_prefixed_depending_on_a_extract_type">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:233:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. fs$set_filter_state(...)
       at test-FilterStates.R:233:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0380000000000003" classname="FilterStates" name="get_call_returns_subset_with_multiple_filter_expressions_combined_by_operator">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:245:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. fs$set_filter_state(...)
       at test-FilterStates.R:245:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0430000000000001" classname="FilterStates" name="get_call_skips_conditions_form_FilterState_which_are_identified_by_sid">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:270:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(...)
       at test-FilterStates.R:270:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0270000000000001" classname="FilterStates" name="ui_add_returns_a_message_inside_a_div_when_data_has_no_columns_or_no_rows"/>
    <testcase time="0.255999999999999" classname="FilterStates" name="Selecting_a_new_variable_initializes_a_new_filter_state_with_default_states"/>
    <testcase time="0.0529999999999999" classname="FilterStates" name="Selecting_a_new_variable_initializes_a_new_filter_state_with_default_states"/>
    <testcase time="0.0170000000000003" classname="FilterStates" name="Adding_var_to_add_adds_another_filter_state">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:344:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(state = fs)
       at test-FilterStates.R:344:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0419999999999998" classname="FilterStates" name="srv_add_determines_labels_for_the_choices_based_on_the_column_attribute"/>
    <testcase time="0.0120000000000005" classname="FilterStates" name="srv_add_limits_choices_to_the_include_varnames">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:407:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(...)
       at test-FilterStates.R:407:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0339999999999998" classname="FilterStates" name="srv_add_flags_keys_as_primary_key">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilterStates.R:442:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(...)
       at test-FilterStates.R:442:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="FilteredData" timestamp="2023-06-21T11:56:35Z" hostname="23b19630c45c" tests="87" skipped="0" failures="18" errors="10" time="10.877">
    <testcase time="6.448" classname="FilteredData" name="constructor_accepts_call_with_only_dataset_specified"/>
    <testcase time="0.600000000000001" classname="FilteredData" name="constructor_accepts_call_with_only_dataset_specified"/>
    <testcase time="0.00799999999999912" classname="FilteredData" name="constructor_accepts_call_with_only_dataset_specified"/>
    <testcase time="0.00900000000000034" classname="FilteredData" name="constructor_accepts_join_keys_to_be_JoinKeys_or_NULL"/>
    <testcase time="0.00699999999999967" classname="FilteredData" name="constructor_accepts_join_keys_to_be_JoinKeys_or_NULL"/>
    <testcase time="0.00699999999999967" classname="FilteredData" name="constructor_accepts_join_keys_to_be_JoinKeys_or_NULL"/>
    <testcase time="0.00900000000000034" classname="FilteredData" name="constructor_accepts_code_to_be_CodeClass_or_NULL"/>
    <testcase time="0.00600000000000023" classname="FilteredData" name="constructor_accepts_code_to_be_CodeClass_or_NULL"/>
    <testcase time="0.00799999999999912" classname="FilteredData" name="constructor_accepts_code_to_be_CodeClass_or_NULL"/>
    <testcase time="0.0080000000000009" classname="FilteredData" name="constructor_accepts_check_to_be_a_flag"/>
    <testcase time="0.00799999999999912" classname="FilteredData" name="constructor_accepts_check_to_be_a_flag"/>
    <testcase time="0.00700000000000145" classname="FilteredData" name="constructor_accepts_check_to_be_a_flag"/>
    <testcase time="0.016" classname="FilteredData" name="FilteredData_preserves_the_check_field_when_check_is_TRUE"/>
    <testcase time="0.0149999999999988" classname="FilteredData" name="FilteredData_preserves_the_check_field_when_check_is_TRUE"/>
    <testcase time="0.0579999999999998" classname="FilteredData" name="FilteredData_forbids_cyclic_graphs_of_datasets_relationship"/>
    <testcase time="0.0140000000000011" classname="FilteredData" name="filtered_data_datanames_returns_character_vector_of_datasets_names"/>
    <testcase time="0.0269999999999992" classname="FilteredData" name="datanames_are_ordered_topologically_from_parent_to_child">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilteredData.R:103:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. FilteredData$new(...)
       at test-FilteredData.R:103:2
  2. teal.slice (local) initialize(...)
  3. self$set_dataset(...)
  5. teal.slice:::init_filtered_dataset.data.frame(...)
  6. DefaultFilteredDataset$new(...)
  7. teal.slice (local) initialize(...)
  8. self$set_filter_state(fs)
 21. base::lapply(...)
 22. teal.slice (local) FUN(X[[i]], ...)
 23. checkmate::assert_true(...)
 24. checkmate::makeAssertion(x, res, .var.name, add)
 25. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0410000000000004" classname="FilteredData" name="set_dataset_accepts_data_being_data.frame_"/>
    <testcase time="0.00900000000000034" classname="FilteredData" name="set_dataset_returns_self"/>
    <testcase time="0.00999999999999979" classname="FilteredData" name="set_dataset_creates_FilteredDataset_object"/>
    <testcase time="0.0280000000000005" classname="FilteredData" name="set_datasets_creates_FilteredDataset_object_linked_with_parent">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilteredData.R:164:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filtered_data$set_dataset(...)
       at test-FilteredData.R:164:2
  3. teal.slice:::init_filtered_dataset.data.frame(...)
  4. DefaultFilteredDataset$new(...)
  5. teal.slice (local) initialize(...)
  6. self$set_filter_state(fs)
 19. base::lapply(...)
 20. teal.slice (local) FUN(X[[i]], ...)
 21. checkmate::assert_true(...)
 22. checkmate::makeAssertion(x, res, .var.name, add)
 23. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0399999999999991" classname="FilteredData" name="get_join_keys_returns_empty_JoinKeys_object"/>
    <testcase time="0.0109999999999992" classname="FilteredData" name="get_keys_returns_keys_of_the_dataset_specified_via_join_keys"/>
    <testcase time="0.0230000000000015" classname="FilteredData" name="get_join_keys_returns_join_keys_object_if_it_exists"/>
    <testcase time="0.0179999999999989" classname="FilteredData" name="get_datalabel_returns_character_0_for_dataset_with_no_label"/>
    <testcase time="0.0140000000000011" classname="FilteredData" name="get_datalabel_returns_the_label_of_a_passed_dataset"/>
    <testcase time="0.0190000000000001" classname="FilteredData" name="get_metadata_raises_error_if_dataset_does_not_exist"/>
    <testcase time="0.016" classname="FilteredData" name="get_metadata_returns_metadata_if_dataset_exists"/>
    <testcase time="0.00799999999999912" classname="FilteredData" name="get_metadata_returns_metadata_if_dataset_exists"/>
    <testcase time="0.011000000000001" classname="FilteredData" name="get_code_returns_the_code_passed_to_CodeClass_set_code"/>
    <testcase time="0.00600000000000023" classname="FilteredData" name="get_code_returns_a_string_when_FilteredData_has_no_code"/>
    <testcase time="0.0179999999999989" classname="FilteredData" name="get_call_returns_a_NULL_if_no_filters_applied"/>
    <testcase time="0.00699999999999967" classname="FilteredData" name="get_call_returns_a_NULL_if_no_filters_applied"/>
    <testcase time="0.027000000000001" classname="FilteredData" name="get_call_return_a_list_of_calls_when_filter_applied">
      <failure type="failure" message="shiny::isolate(datasets$get_call(&quot;iris&quot;)) not identical to list(...). ('test-FilteredData.R:274:3')">shiny::isolate(datasets$get_call("iris")) not identical to list(...).
target is NULL, current is list</failure>
    </testcase>
    <testcase time="0.0239999999999991" classname="FilteredData" name="get_call_return_a_list_of_calls_when_filter_applied">
      <failure type="failure" message="shiny::isolate(datasets$get_call(&quot;mtcars&quot;)) not identical to list(...). ('test-FilteredData.R:280:3')">shiny::isolate(datasets$get_call("mtcars")) not identical to list(...).
target is NULL, current is list</failure>
    </testcase>
    <testcase time="0.0360000000000014" classname="FilteredData" name="get_call_raises_error_if_dataname_doesn_t_match_available_datasets"/>
    <testcase time="0.0149999999999988" classname="FilteredData" name="get_filter_expr_returns_empty_string_when_no_filters_applied"/>
    <testcase time="0.0300000000000011" classname="FilteredData" name="get_filter_expr_returns_all_filter_calls_as_character">
      <failure type="failure" message="shiny::isolate(get_filter_expr(datasets)) not identical to paste(...). ('test-FilteredData.R:319:3')">shiny::isolate(get_filter_expr(datasets)) not identical to paste(...).
1/1 mismatches
x[1]: ""
y[1]: "iris &lt;- dplyr::filter(iris, Sepal.Length &gt;= 5.1 &amp; Sepal.Length &lt;= 6.4)\nm
y[1]: tcars &lt;- dplyr::filter(mtcars, cyl %in% c(4, 6))"</failure>
    </testcase>
    <testcase time="0.0249999999999986" classname="FilteredData" name="get_data_argument_filtered_must_be_a_flag"/>
    <testcase time="0.0220000000000002" classname="FilteredData" name="get_data_argument_filtered_must_be_a_flag"/>
    <testcase time="0.0120000000000005" classname="FilteredData" name="get_data_requires_that_dataname_be_subset_of_datanames"/>
    <testcase time="0.00900000000000034" classname="FilteredData" name="get_data_requires_that_dataname_be_subset_of_datanames"/>
    <testcase time="0.00999999999999979" classname="FilteredData" name="get_data_filtered_FALSE_returns_the_same_object_as_passed_to_the_constructor"/>
    <testcase time="0.0109999999999992" classname="FilteredData" name="get_data_returns_the_same_object_as_passed_to_the_constructor_if_no_filter_applied"/>
    <testcase time="0.290000000000001" classname="FilteredData" name="get_data_returns_an_object_filtered_by_set_filters"/>
    <testcase time="0.00600000000000023" classname="FilteredData" name="get_data_returns_an_object_filtered_by_set_filters">
      <failure type="failure" message="shiny::isolate(datasets$get_data(&quot;iris&quot;)) not identical to dplyr::filter(iris, Sepal.Length &gt;= 5.1 &amp; Sepal.Length &lt;= 6.4). ('test-FilteredData.R:366:3')">shiny::isolate(datasets$get_data("iris")) not identical to dplyr::filter(iris, Sepal.Length &gt;= 5.1 &amp; Sepal.Length &lt;= 6.4).
Attributes: &lt; Component "row.names": Numeric: lengths (150, 83) differ &gt;
Component "Sepal.Length": Numeric: lengths (150, 83) differ
Component "Sepal.Width": Numeric: lengths (150, 83) differ
Component "Petal.Length": Numeric: lengths (150, 83) differ
Component "Petal.Width": Numeric: lengths (150, 83) differ
Component "Species": Lengths: 150, 83
Component "Species": Lengths (150, 83) differ (string compare on first 83)
Component "Species": 51 string mismatches</failure>
    </testcase>
    <testcase time="0.0359999999999996" classname="FilteredData" name="get_data_of_the_child_is_dependent_on_the_ancestor_filter">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilteredData.R:380:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. FilteredData$new(...)
       at test-FilteredData.R:380:2
  2. teal.slice (local) initialize(...)
  3. self$set_dataset(...)
  5. teal.slice:::init_filtered_dataset.data.frame(...)
  6. DefaultFilteredDataset$new(...)
  7. teal.slice (local) initialize(...)
  8. self$set_filter_state(fs)
 21. base::lapply(...)
 22. teal.slice (local) FUN(X[[i]], ...)
 23. checkmate::assert_true(...)
 24. checkmate::makeAssertion(x, res, .var.name, add)
 25. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.188000000000001" classname="FilteredData" name="set_filter_state_accepts_teal_slices_and_nested_list_and_both_set_identical_settings"/>
    <testcase time="0.0190000000000001" classname="FilteredData" name="set_filter_state_accepts_teal_slices_and_nested_list_and_both_set_identical_settings"/>
    <testcase time="0.0280000000000005" classname="FilteredData" name="get_filter_state_returns_teal_slices_with_features_identical_to_those_in_input_adds_format"/>
    <testcase time="0.00500000000000078" classname="FilteredData" name="get_filter_state_returns_teal_slices_with_features_identical_to_those_in_input_adds_format"/>
    <testcase time="0.122999999999999" classname="FilteredData" name="print_returns_properly_formatted_string_representing_teal_slices_">
      <failure type="failure" message="utils::capture.output(shiny::isolate(datasets$print())) not identical to c(&quot;FilteredData:&quot;, utils::capture.output(print(fs))). ('test-FilteredData.R:539:3')">utils::capture.output(shiny::isolate(datasets$print())) not identical to c("FilteredData:", utils::capture.output(print(fs))).
Lengths differ: 2 is not 50</failure>
    </testcase>
    <testcase time="0.0289999999999999" classname="FilteredData" name="print_returns_properly_formatted_string_representing_teal_slices_">
      <failure type="failure" message="utils::capture.output(shiny::isolate(datasets$print(show_all = TRUE))) not identical to c(&quot;FilteredData:&quot;, utils::capture.output(print(fs, show_all = TRUE))). ('test-FilteredData.R:543:3')">utils::capture.output(shiny::isolate(datasets$print(show_all = TRUE))) not identical to c("FilteredData:", utils::capture.output(print(fs, show_all = TRUE))).
Lengths differ: 2 is not 50</failure>
    </testcase>
    <testcase time="0.0540000000000003" classname="FilteredData" name="remove_filter_state_removes_states_specified_by_teal_slices">
      <error type="error" message="Error in `slices_field(datasets$get_filter_state(), &quot;varname&quot;)`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'. ('test-FilteredData.R:571:3')">Error in `slices_field(datasets$get_filter_state(), "varname")`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'.
Backtrace:
  1. testthat::expect_identical(...)
       at test-FilteredData.R:571:2
 16. teal.slice:::slices_field(datasets$get_filter_state(), "varname")
 17. checkmate::assert_class(tss, "teal_slices")
 18. checkmate::makeAssertion(x, res, .var.name, add)
 19. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0540000000000003" classname="FilteredData" name="remove_filter_state_does_not_remove_locked_filters">
      <failure type="failure" message="shiny::isolate(datasets$get_filter_state()) has length 0, not length 2. ('test-FilteredData.R:601:3')">shiny::isolate(datasets$get_filter_state()) has length 0, not length 2.</failure>
    </testcase>
    <testcase time="0.0219999999999985" classname="FilteredData" name="remove_filter_state_does_not_remove_locked_filters">
      <error type="error" message="Error in `teal.slice:::slices_field(datasets$get_filter_state(), &quot;locked&quot;)`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'. ('test-FilteredData.R:602:3')">Error in `teal.slice:::slices_field(datasets$get_filter_state(), "locked")`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'.
Backtrace:
  1. testthat::expect_true(...)
       at test-FilteredData.R:602:2
 16. teal.slice:::slices_field(datasets$get_filter_state(), "locked")
 17. checkmate::assert_class(tss, "teal_slices")
 18. checkmate::makeAssertion(x, res, .var.name, add)
 19. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0540000000000003" classname="FilteredData" name="clear_filter_states_removes_all_filters_of_all_datasets_in_FilteredData"/>
    <testcase time="0.0340000000000007" classname="FilteredData" name="clear_filter_states_removes_filters_of_desired_dataset_only">
      <error type="error" message="Error in `slices_field(datasets$get_filter_state(), &quot;dataname&quot;)`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'. ('test-FilteredData.R:644:3')">Error in `slices_field(datasets$get_filter_state(), "dataname")`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'.
Backtrace:
  1. testthat::expect_identical(...)
       at test-FilteredData.R:644:2
 16. teal.slice:::slices_field(datasets$get_filter_state(), "dataname")
 17. checkmate::assert_class(tss, "teal_slices")
 18. checkmate::makeAssertion(x, res, .var.name, add)
 19. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.052999999999999" classname="FilteredData" name="clear_filter_states_does_not_remove_locked_filters">
      <failure type="failure" message="shiny::isolate(datasets$get_filter_state()) has length 0, not length 2. ('test-FilteredData.R:672:3')">shiny::isolate(datasets$get_filter_state()) has length 0, not length 2.</failure>
    </testcase>
    <testcase time="0.0230000000000015" classname="FilteredData" name="clear_filter_states_does_not_remove_locked_filters">
      <error type="error" message="Error in `teal.slice:::slices_field(datasets$get_filter_state(), &quot;locked&quot;)`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'. ('test-FilteredData.R:673:3')">Error in `teal.slice:::slices_field(datasets$get_filter_state(), "locked")`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'.
Backtrace:
  1. testthat::expect_true(...)
       at test-FilteredData.R:673:2
 16. teal.slice:::slices_field(datasets$get_filter_state(), "locked")
 17. checkmate::assert_class(tss, "teal_slices")
 18. checkmate::makeAssertion(x, res, .var.name, add)
 19. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.036999999999999" classname="FilteredData" name="get_filter_overview_checks_arguments"/>
    <testcase time="0.00500000000000078" classname="FilteredData" name="get_filter_overview_checks_arguments"/>
    <testcase time="0.00900000000000034" classname="FilteredData" name="get_filter_overview_checks_arguments"/>
    <testcase time="0.00899999999999856" classname="FilteredData" name="get_filter_overview_checks_arguments"/>
    <testcase time="0.00900000000000034" classname="FilteredData" name="get_filter_overview_checks_arguments"/>
    <testcase time="0.00900000000000034" classname="FilteredData" name="get_filter_overview_checks_arguments"/>
    <testcase time="0.0169999999999995" classname="FilteredData" name="get_filter_overview_returns_overview_data.frame_with_obs_counts_if_the_keys_are_not_specified"/>
    <testcase time="0.0360000000000014" classname="FilteredData" name="get_filter_overview_returns_overview_data.frame_with_filtered_counts">
      <failure type="failure" message="shiny::isolate(datasets$get_filter_overview(datasets$datanames())) not equal to data.frame(...). ('test-FilteredData.R:733:3')">shiny::isolate(datasets$get_filter_overview(datasets$datanames())) not equal to data.frame(...).
Component "obs_filtered": Mean relative difference: 0.9120879</failure>
    </testcase>
    <testcase time="0.0359999999999996" classname="FilteredData" name="get_filter_overview_return_counts_based_on_reactive_filtering_by_ancestors">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilteredData.R:751:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. FilteredData$new(...)
       at test-FilteredData.R:751:2
  2. teal.slice (local) initialize(...)
  3. self$set_dataset(...)
  5. teal.slice:::init_filtered_dataset.data.frame(...)
  6. DefaultFilteredDataset$new(...)
  7. teal.slice (local) initialize(...)
  8. self$set_filter_state(fs)
 21. base::lapply(...)
 22. teal.slice (local) FUN(X[[i]], ...)
 23. checkmate::assert_true(...)
 24. checkmate::makeAssertion(x, res, .var.name, add)
 25. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.714999999999998" classname="FilteredData" name="active_datanames_fails_if_returns_dataname_which_isn_t_a_subset_of_available_datanames"/>
    <testcase time="0.207000000000001" classname="FilteredData" name="srv_active_output_teal_filters_count_returns_reactive_number_of_current_filters_applied">
      <error type="error" message="&lt;shiny.silent.error/validation/error/condition&gt; ('test-FilteredData.R:807:3')">&lt;shiny.silent.error/validation/error/condition&gt;
Error: 
Backtrace:
  1. shiny::testServer(...)
       at test-FilteredData.R:807:2
 26. shiny:::`$.shinyoutput`(output, teal_filters_count)
 27. .subset2(x, "impl")$getOutput(name)</error>
    </testcase>
    <testcase time="0.188000000000002" classname="FilteredData" name="srv_active_clicking_remove_all_button_clears_filters"/>
    <testcase time="0.0459999999999994" classname="FilteredData" name="get_filter_count_properly_tallies_active_filter_states"/>
    <testcase time="0.0199999999999996" classname="FilteredData" name="get_filter_count_properly_tallies_active_filter_states">
      <failure type="failure" message="datasets$get_filter_count() not equal to 4L. ('test-FilteredData.R:862:3')">datasets$get_filter_count() not equal to 4L.
1/1 mismatches
[1] 0 - 4 == -4
Backtrace:
  1. shiny::isolate(...)
       at test-FilteredData.R:862:2
 13. testthat::expect_equal(datasets$get_filter_count(), 4L)</failure>
    </testcase>
    <testcase time="0.0599999999999987" classname="FilteredData" name="get_filter_count_properly_tallies_active_filter_states_for_MAE_objects"/>
    <testcase time="0.032" classname="FilteredData" name="get_filter_count_properly_tallies_active_filter_states_for_MAE_objects">
      <failure type="failure" message="datasets$get_filter_count() not equal to 4L. ('test-FilteredData.R:902:3')">datasets$get_filter_count() not equal to 4L.
1/1 mismatches
[1] 0 - 4 == -4
Backtrace:
  1. shiny::isolate(...)
       at test-FilteredData.R:902:2
 13. testthat::expect_equal(datasets$get_filter_count(), 4L)</failure>
    </testcase>
    <testcase time="0.0740000000000016" classname="FilteredData" name="slices_interactive_reactive_returns_interactive_filters"/>
    <testcase time="0.149999999999999" classname="FilteredData" name="slices_interactive_reactive_returns_interactive_filters">
      <failure type="failure" message="setequal(reactiveValuesToList(x), reactiveValuesToList(y)) is not TRUE ('test-FilteredData.R:934:7')">setequal(reactiveValuesToList(x), reactiveValuesToList(y)) is not TRUE

`actual`:   FALSE
`expected`: TRUE 
Backtrace:
  1. teal.slice:::expect_identical_slices(...)
       at test-FilteredData.R:934:6
 14. base::mapply(...)
 15. teal.slice (local) `&lt;fn&gt;`(x = dots[[1L]][[1L]], y = dots[[2L]][[2L]])
 16. teal.slice:::expect_identical_slice(x, y)
 29. testthat::expect_true(setequal(reactiveValuesToList(x), reactiveValuesToList(y)))</failure>
    </testcase>
    <testcase time="0.0489999999999995" classname="FilteredData" name="slices_interactive_reactive_returns_interactive_filters">
      <failure type="failure" message="setequal(reactiveValuesToList(x), reactiveValuesToList(y)) is not TRUE ('test-FilteredData.R:934:7')">setequal(reactiveValuesToList(x), reactiveValuesToList(y)) is not TRUE

`actual`:   FALSE
`expected`: TRUE 
Backtrace:
  1. teal.slice:::expect_identical_slices(...)
       at test-FilteredData.R:934:6
 14. base::mapply(...)
 15. teal.slice (local) `&lt;fn&gt;`(x = dots[[1L]][[1L]], y = dots[[2L]][[3L]])
 16. teal.slice:::expect_identical_slice(x, y)
 29. testthat::expect_true(setequal(reactiveValuesToList(x), reactiveValuesToList(y)))</failure>
    </testcase>
    <testcase time="0.0229999999999997" classname="FilteredData" name="slices_interactive_reactive_returns_interactive_filters"/>
    <testcase time="0.0120000000000005" classname="FilteredData" name="slices_fixed_reactive_returns_fixed_filters_and_teal_slice_expr"/>
    <testcase time="0.137999999999998" classname="FilteredData" name="FilteredData_srv_available_slices_locked_slices_ommited">
      <failure type="failure" message="slices() not identical to fs[-1]. ('test-FilteredData.R:940:7')">slices() not identical to fs[-1].
Length mismatch: comparison on first 1 components
Component 1: Component 1: Component 2: Component 3: 1 string mismatch
Component 1: Component 1: Component 4: Component 10: Component 1: Component 1: Component 27: Component 31: Component 3: 1 string mismatch
Component 1: Component 1: Component 4: Component 10: Component 1: Component 1: Component 27: Component 32: Component 3: 1 string mismatch
Component 1: Component 1: Component 6: 1 string mismatch
Component 1: Component 1: Component 8: Component 3: 1 string mismatch
Component 1: Component 1: Component 9: 1 string mismatch
Component 1: Component 1: Component 10: Component 10: Component 1: Component 1: Component 27: Component 23: 1 string mismatch
Component 1: Component 1: Component 10: Component 10: Component 1: Component 1: Component 27: Component 25: 1 element mismatch
...</failure>
    </testcase>
    <testcase time="0.0530000000000008" classname="FilteredData" name="FilteredData_srv_available_slices_new_state_in_external_list_reflected_in_available_slices">
      <error type="error" message="Error in `vapply(slices(), `[[`, character(1), &quot;id&quot;)`: values must be length 1, ('test-FilteredData.R:946:7')">Error in `vapply(slices(), `[[`, character(1), "id")`: values must be length 1,
 but FUN(X[[1]]) result is length 0
Backtrace:
  1. testthat::expect_identical(...)
       at test-FilteredData.R:946:6
  4. shiny (local) available_slices_id()
  6. self$.updateValue()
  7. ctx$run(...)
 14. env$runWith(self, func)
 15. shiny (local) contextFunc()
 18. shiny (local) .func()
 20. teal.slice (local) `&lt;reactive&gt;`(...)
 21. base::vapply(slices(), `[[`, character(1), "id")</error>
    </testcase>
    <testcase time="0.0340000000000025" classname="FilteredData" name="active_slices_id_returns_list_of_currently_active_filters">
      <failure type="failure" message="active_slices_id() not identical to c(&quot;iris Sepal.Length&quot;, &quot;iris Sepal.Width&quot;). ('test-FilteredData.R:953:7')">active_slices_id() not identical to c("iris Sepal.Length", "iris Sepal.Width").
Lengths differ: 0 is not 2</failure>
    </testcase>
    <testcase time="0.0819999999999972" classname="FilteredData" name="FilteredData_srv_available_slices_changing_input_values_de_activate_states">
      <failure type="failure" message="active_slices_id() not identical to c(&quot;iris Sepal.Length&quot;). ('test-FilteredData.R:959:7')">active_slices_id() not identical to c("iris Sepal.Length").
Lengths differ: 0 is not 1</failure>
    </testcase>
    <testcase time="0.0280000000000022" classname="FilteredData" name="FilteredData_srv_available_slices_changing_input_values_de_activate_states">
      <failure type="failure" message="active_slices_id() not identical to c(&quot;iris Sepal.Length&quot;, &quot;iris Sepal.Width&quot;, &quot;iris Species&quot;). ('test-FilteredData.R:962:7')">active_slices_id() not identical to c("iris Sepal.Length", "iris Sepal.Width", "iris Species").
Lengths differ: 0 is not 3</failure>
    </testcase>
    <testcase time="0.0259999999999998" classname="FilteredData" name="FilteredData_srv_available_slices_deactivating_all_keeps_locked_states">
      <failure type="failure" message="active_slices_id() not identical to &quot;iris Sepal.Length&quot;. ('test-FilteredData.R:967:7')">active_slices_id() not identical to "iris Sepal.Length".
Lengths differ: 0 is not 1</failure>
    </testcase>
  </testsuite>
  <testsuite name="FilteredDataset" timestamp="2023-06-21T11:56:46Z" hostname="23b19630c45c" tests="13" skipped="0" failures="0" errors="4" time="0.222">
    <testcase time="0.0229999999999997" classname="FilteredDataset" name="constructor_creates_FilteredDataset_with_empty_filter_states"/>
    <testcase time="0.00499999999999901" classname="FilteredDataset" name="clear_filter_states_does_not_raise_errors_after_initializing_FilteredDataset"/>
    <testcase time="0.00400000000000134" classname="FilteredDataset" name="get_dataset_returns_the_dataset_passed_to_the_constructor"/>
    <testcase time="0.00399999999999778" classname="FilteredDataset" name="get_dataname_returns_the_dataname_passed_to_the_constructor"/>
    <testcase time="0.00300000000000011" classname="FilteredDataset" name="get_dataset_label_retruns_the_dataset_label_passed_to_the_constructor"/>
    <testcase time="0.00400000000000134" classname="FilteredDataset" name="get_keys_returns_the_keys_passed_to_the_constructor"/>
    <testcase time="0.00399999999999778" classname="FilteredDataset" name="get_metadata_returns_the_metadata_of_the_data_passed_to_the_constructor"/>
    <testcase time="0.00600000000000023" classname="FilteredDataset" name="get_metadata_returns_the_metadata_of_the_data_passed_to_the_constructor"/>
    <testcase time="0.0180000000000007" classname="FilteredDataset" name="format_returns_a_string_representation_of_filters">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilteredDataset.R:64:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-FilteredDataset.R:64:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0390000000000015" classname="FilteredDataset" name="print_returns_a_string_representation_of_filters">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilteredDataset.R:83:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-FilteredDataset.R:83:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0399999999999991" classname="FilteredDataset" name="get_call_returns_the_filter_call_of_the_dataset">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilteredDataset.R:102:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. shiny::isolate(dataset$set_filter_state(state = fs))
       at test-FilteredDataset.R:102:2
 13. dataset$set_filter_state(state = fs)
 26. base::lapply(...)
 27. teal.slice (local) FUN(X[[i]], ...)
 28. checkmate::assert_true(...)
 29. checkmate::makeAssertion(x, res, .var.name, add)
 30. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0429999999999993" classname="FilteredDataset" name="get_filter_overview_returns_a_data_frame">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-FilteredDataset.R:125:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-FilteredDataset.R:125:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(...)
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0289999999999999" classname="FilteredDataset" name="ui_add_is_pure_virtual"/>
  </testsuite>
  <testsuite name="LogicalFilterState" timestamp="2023-06-21T11:56:46Z" hostname="23b19630c45c" tests="29" skipped="0" failures="0" errors="0" time="0.383">
    <testcase time="0.0229999999999997" classname="LogicalFilterState" name="constructor_accepts_logical_values"/>
    <testcase time="0.00900000000000034" classname="LogicalFilterState" name="constructor_accepts_logical_values"/>
    <testcase time="0.0129999999999981" classname="LogicalFilterState" name="constructor_raises_error_when_selection_is_not_logical"/>
    <testcase time="0.0130000000000017" classname="LogicalFilterState" name="constructor_forces_single_selected_when_multiple_is_FALSE"/>
    <testcase time="0.00199999999999889" classname="LogicalFilterState" name="constructor_forces_single_selected_when_multiple_is_FALSE"/>
    <testcase time="0.0229999999999997" classname="LogicalFilterState" name="set_state_selected_accepts_a_logical_or_coercible_of_length_2"/>
    <testcase time="0.0100000000000016" classname="LogicalFilterState" name="set_state_selected_accepts_a_logical_or_coercible_of_length_2"/>
    <testcase time="0.00900000000000034" classname="LogicalFilterState" name="set_state_selected_accepts_a_logical_or_coercible_of_length_2"/>
    <testcase time="0.014999999999997" classname="LogicalFilterState" name="set_state_selected_accepts_a_logical_or_coercible_of_length_2"/>
    <testcase time="0.0130000000000017" classname="LogicalFilterState" name="set_state_selected_accepts_a_logical_or_coercible_of_length_2"/>
    <testcase time="0.0229999999999997" classname="LogicalFilterState" name="set_state_multiple_parameters_accepting_boolean_and_null_values"/>
    <testcase time="0.00900000000000034" classname="LogicalFilterState" name="set_state_multiple_parameters_accepting_boolean_and_null_values"/>
    <testcase time="0.00700000000000145" classname="LogicalFilterState" name="set_state_multiple_parameters_accepting_boolean_and_null_values"/>
    <testcase time="0.0119999999999969" classname="LogicalFilterState" name="set_state_multiple_parameters_accepting_boolean_and_null_values"/>
    <testcase time="0.0150000000000006" classname="LogicalFilterState" name="LogicalFilterState_get_call_returns_variable_name_when_multiple"/>
    <testcase time="0.0150000000000006" classname="LogicalFilterState" name="get_call_returns_call_selected_different_than_choices"/>
    <testcase time="0.0169999999999995" classname="LogicalFilterState" name="get_call_returns_call_always_if_choices_are_limited_regardless_of_selected"/>
    <testcase time="0.0139999999999993" classname="LogicalFilterState" name="get_call_prefixes_varname_by_dataname_varname_if_extract_type_list_"/>
    <testcase time="0.0150000000000006" classname="LogicalFilterState" name="get_call_prefixes_varname_by_dataname_varname_if_extract_type_matrix_"/>
    <testcase time="0.0160000000000018" classname="LogicalFilterState" name="get_call_adds_is.na_variable_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.0169999999999995" classname="LogicalFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00499999999999901" classname="LogicalFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00799999999999912" classname="LogicalFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00800000000000267" classname="LogicalFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00900000000000034" classname="LogicalFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0249999999999986" classname="LogicalFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00600000000000023" classname="LogicalFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0249999999999986" classname="LogicalFilterState" name="print_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00700000000000145" classname="LogicalFilterState" name="print_returns_a_properly_formatted_string_representation"/>
  </testsuite>
  <testsuite name="MAEFilterStates" timestamp="2023-06-21T11:56:46Z" hostname="23b19630c45c" tests="4" skipped="0" failures="0" errors="1" time="0.105">
    <testcase time="0.0769999999999982" classname="MAEFilterStates" name="constructor_accepts_a_MultiAssayExperiment"/>
    <testcase time="0.00900000000000034" classname="MAEFilterStates" name="constructor_accepts_a_MultiAssayExperiment"/>
    <testcase time="0.00600000000000023" classname="MAEFilterStates" name="get_filter_state_returns_teal_slices_with_include_varname_by_default_and_count_type_all"/>
    <testcase time="0.0130000000000017" classname="MAEFilterStates" name="get_call_returns_subsetByColData_call_with_varnames_prefixed_by_dataname_">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilterStates.R:31:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(...)
       at test-MAEFilterStates.R:31:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="MAEFilteredDataset" timestamp="2023-06-21T11:56:46Z" hostname="23b19630c45c" tests="16" skipped="0" failures="0" errors="9" time="1.477">
    <testcase time="0.102999999999998" classname="MAEFilteredDataset" name="constructor_accepts_a_MultiAssayExperiment_object"/>
    <testcase time="0.00700000000000145" classname="MAEFilteredDataset" name="constructor_accepts_a_MultiAssayExperiment_object"/>
    <testcase time="0.00700000000000145" classname="MAEFilteredDataset" name="constructor_accepts_a_MultiAssayExperiment_object"/>
    <testcase time="0.075999999999997" classname="MAEFilteredDataset" name="filter_states_list_is_initialized_with_names_of_experiments"/>
    <testcase time="0.093" classname="MAEFilteredDataset" name="format_returns_properly_formatted_string">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:53:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filtered_dataset$set_filter_state(fs)
       at test-MAEFilteredDataset.R:53:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.113" classname="MAEFilteredDataset" name="print_returns_properly_formatted_string">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:88:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filtered_dataset$set_filter_state(fs)
       at test-MAEFilteredDataset.R:88:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.100000000000001" classname="MAEFilteredDataset" name="get_call_returns_NULL_when_no_filter_applied"/>
    <testcase time="0.102" classname="MAEFilteredDataset" name="get_call_returns_a_call_with_applying_filter">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:130:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filtered_dataset$set_filter_state(fs)
       at test-MAEFilteredDataset.R:130:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.175999999999998" classname="MAEFilteredDataset" name="get_filter_overview_info_returns_overview_matrix_for_MAEFilteredDataset_without_filtering"/>
    <testcase time="0.0910000000000011" classname="MAEFilteredDataset" name="get_filter_overview_info_returns_overview_matrix_for_MAEFilteredDataset_with_filtering">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:188:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filtered_dataset$set_filter_state(fs)
       at test-MAEFilteredDataset.R:188:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.106999999999999" classname="MAEFilteredDataset" name="MAEFilteredDataset_set_filter_state_sets_filters_in_FilterStates_specified_by_teal_slices">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:225:5')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-MAEFilteredDataset.R:225:4
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.100000000000001" classname="MAEFilteredDataset" name="MAEFilteredDataset_set_filter_state_only_acceps_teal_slices"/>
    <testcase time="0.0869999999999997" classname="MAEFilteredDataset" name="MAEFilteredDataset_get_filter_state_returns_list_identical_to_input">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:297:5')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-MAEFilteredDataset.R:297:4
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0990000000000002" classname="MAEFilteredDataset" name="MAEFilteredDataset_remove_filter_state_removes_desired_filter">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:325:5')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-MAEFilteredDataset.R:325:4
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.102" classname="MAEFilteredDataset" name="MAEFilteredDataset_remove_filter_state_only_accepts_teal_slices">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:360:5')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. dataset$set_filter_state(state = fs)
       at test-MAEFilteredDataset.R:360:4
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.113999999999997" classname="MAEFilteredDataset" name="remove_filters_button_removes_all_filters">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MAEFilteredDataset.R:389:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. shiny::isolate(filtered_dataset$set_filter_state(state = fs))
       at test-MAEFilteredDataset.R:389:2
 13. filtered_dataset$set_filter_state(state = fs)
 26. base::lapply(...)
 27. teal.slice (local) FUN(X[[i]], ...)
 28. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 29. checkmate::makeAssertion(x, res, .var.name, add)
 30. checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="MatrixFilterStates" timestamp="2023-06-21T11:56:48Z" hostname="23b19630c45c" tests="4" skipped="0" failures="0" errors="1" time="0.048">
    <testcase time="0.0250000000000021" classname="MatrixFilterStates" name="constructor_accepts_a_matrix"/>
    <testcase time="0.00600000000000023" classname="MatrixFilterStates" name="constructor_accepts_a_matrix"/>
    <testcase time="0.00499999999999901" classname="MatrixFilterStates" name="get_filter_state_returns_teal_slices_with_default_include_varnames"/>
    <testcase time="0.0120000000000005" classname="MatrixFilterStates" name="get_call_returns_executable_call_filtering_a_matrix_with_numeric_values">
      <error type="error" message="Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE. ('test-MatrixFilterStates.R:34:3')">Error in `FUN(X[[i]], ...)`: Assertion on 'dataname matches private$dataname' failed: Must be TRUE.
Backtrace:
  1. filter_states$set_filter_state(fs)
       at test-MatrixFilterStates.R:34:2
 14. base::lapply(...)
 15. teal.slice (local) FUN(X[[i]], ...)
 16. checkmate::assert_true(x$dataname == private$dataname, .var.name = "dataname matches private$dataname")
 17. checkmate::makeAssertion(x, res, .var.name, add)
 18. checkmate:::mstop(...)</error>
    </testcase>
  </testsuite>
  <testsuite name="RangeFilterState" timestamp="2023-06-21T11:56:48Z" hostname="23b19630c45c" tests="43" skipped="0" failures="0" errors="0" time="1.331">
    <testcase time="0.0769999999999982" classname="RangeFilterState" name="constructor_accepts_numerical_values"/>
    <testcase time="0.00700000000000145" classname="RangeFilterState" name="constructor_accepts_numerical_values"/>
    <testcase time="0.0440000000000005" classname="RangeFilterState" name="constructor_accepts_infinite_values_but_not_infinite_only"/>
    <testcase time="0.0069999999999979" classname="RangeFilterState" name="constructor_accepts_infinite_values_but_not_infinite_only"/>
    <testcase time="0.00700000000000145" classname="RangeFilterState" name="constructor_accepts_infinite_values_but_not_infinite_only"/>
    <testcase time="0.0459999999999994" classname="RangeFilterState" name="constructor_initializes_keep_inf_TRUE_by_default_if_x_contains_Infs"/>
    <testcase time="0.0450000000000017" classname="RangeFilterState" name="constructor_initializes_keep_inf_TRUE_by_default_if_x_contains_Infs"/>
    <testcase time="0.0159999999999982" classname="RangeFilterState" name="constructor_raises_error_when_selected_is_not_sorted"/>
    <testcase time="0.0150000000000006" classname="RangeFilterState" name="constructor_raises_error_when_selection_is_not_numeric_or_coercible"/>
    <testcase time="0.0450000000000017" classname="RangeFilterState" name="constructor_raises_error_when_choices_is_out_of_range"/>
    <testcase time="0.0449999999999982" classname="RangeFilterState" name="constructor_raises_warning_when_choices_is_not_sorted"/>
    <testcase time="0.0229999999999997" classname="RangeFilterState" name="constructor_raises_error_when_choices_is_not_numeric_or_coercible"/>
    <testcase time="0.0510000000000019" classname="RangeFilterState" name="set_state_selected_accepts_vector_of_two_numbers_or_coercible"/>
    <testcase time="0.0109999999999992" classname="RangeFilterState" name="set_state_selected_accepts_vector_of_two_numbers_or_coercible"/>
    <testcase time="0.0069999999999979" classname="RangeFilterState" name="set_state_selected_accepts_vector_of_two_numbers_or_coercible"/>
    <testcase time="0.0120000000000005" classname="RangeFilterState" name="set_state_selected_accepts_vector_of_two_numbers_or_coercible"/>
    <testcase time="0.00600000000000023" classname="RangeFilterState" name="set_state_selected_accepts_vector_of_two_numbers_or_coercible"/>
    <testcase time="0.0459999999999994" classname="RangeFilterState" name="set_state_selected_accepts_numeric_vector_of_length_2"/>
    <testcase time="0.0100000000000016" classname="RangeFilterState" name="set_state_selected_accepts_numeric_vector_of_length_2"/>
    <testcase time="0.0109999999999992" classname="RangeFilterState" name="set_state_selected_accepts_numeric_vector_of_length_2"/>
    <testcase time="0.0139999999999993" classname="RangeFilterState" name="set_state_selected_raises_error_when_selected_is_not_sorted"/>
    <testcase time="0.049000000000003" classname="RangeFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.00799999999999912" classname="RangeFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.00900000000000034" classname="RangeFilterState" name="set_state_selected_range_is_limited_to_lower_and_upper_bound_of_possible_range"/>
    <testcase time="0.0479999999999983" classname="RangeFilterState" name="set_state_selected_raises_error_when_selection_is_not_coercible_to_numeric"/>
    <testcase time="0.0470000000000006" classname="RangeFilterState" name="method_get_call_of_default_RangeFilterState_object_returns_NULL"/>
    <testcase time="0.0479999999999983" classname="RangeFilterState" name="get_call_returns_call_selected_different_than_choices"/>
    <testcase time="0.0530000000000008" classname="RangeFilterState" name="get_call_returns_call_always_if_choices_are_limited_regardless_of_selected"/>
    <testcase time="0.0500000000000007" classname="RangeFilterState" name="get_call_prefixes_varname_by_dataname_var_if_extract_type_list_"/>
    <testcase time="0.0510000000000019" classname="RangeFilterState" name="get_call_prefixes_varname_by_dataname_var_if_extract_type_matrix_"/>
    <testcase time="0.0519999999999996" classname="RangeFilterState" name="get_call_adds_is.na_var_to_returned_call_if_keep_na_is_true"/>
    <testcase time="0.0529999999999973" classname="RangeFilterState" name="get_call_returns_call_if_all_selected_but_NA_exists"/>
    <testcase time="0.0520000000000032" classname="RangeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00499999999999901" classname="RangeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00799999999999912" classname="RangeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00900000000000034" classname="RangeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.00799999999999912" classname="RangeFilterState" name="format_accepts_logical_show_all"/>
    <testcase time="0.0600000000000023" classname="RangeFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0069999999999979" classname="RangeFilterState" name="format_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0689999999999991" classname="RangeFilterState" name="print_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.00700000000000145" classname="RangeFilterState" name="print_returns_a_properly_formatted_string_representation"/>
    <testcase time="0.0470000000000006" classname="RangeFilterState" name="private_get_pretty_range_step_returns_pretty_step_size"/>
    <testcase time="0.0459999999999994" classname="RangeFilterState" name="private_get_pretty_range_step_returns_pretty_step_size"/>
  </testsuite>
  <testsuite name="SEFilterStates" timestamp="2023-06-21T11:56:49Z" hostname="23b19630c45c" tests="11" skipped="0" failures="3" errors="0" time="0.419">
    <testcase time="0.0670000000000002" classname="SEFilterStates" name="constructor_accepts_a_SummarizedExperiment"/>
    <testcase time="0.00799999999999912" classname="SEFilterStates" name="constructor_accepts_a_SummarizedExperiment"/>
    <testcase time="0.0650000000000013" classname="SEFilterStates" name="set_filter_state_only_accepts_teal_slices_"/>
    <testcase time="0.0359999999999978" classname="SEFilterStates" name="set_filter_state_only_accepts_teal_slices_"/>
    <testcase time="0.0440000000000005" classname="SEFilterStates" name="set_filter_state_arg_"/>
    <testcase time="0.00900000000000034" classname="SEFilterStates" name="set_filter_state_arg_"/>
    <testcase time="0.0459999999999994" classname="SEFilterStates" name="get_call_returns_executable_subset_call_">
      <failure type="failure" message="shiny::isolate(filter_states$get_call()) not equal to quote(...). ('test-SEFilterStates.R:80:3')">shiny::isolate(filter_states$get_call()) not equal to quote(...).
target is NULL, current is call</failure>
    </testcase>
    <testcase time="0.0579999999999998" classname="SEFilterStates" name="get_call_returns_executable_subset_call_">
      <failure type="failure" message="all(rowData(test)$feature_id %in% c(&quot;ID001&quot;, &quot;ID002&quot;)) is not TRUE ('test-SEFilterStates.R:88:3')">all(rowData(test)$feature_id %in% c("ID001", "ID002")) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.0289999999999999" classname="SEFilterStates" name="get_call_returns_executable_subset_call_">
      <failure type="failure" message="all(colData(test)$Treatment == &quot;ChIP&quot;) is not TRUE ('test-SEFilterStates.R:91:3')">all(colData(test)$Treatment == "ChIP") is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.0350000000000001" classname="SEFilterStates" name="ui_add_returns_a_message_inside_a_div_when_data_has_no_rows_or_no_columns"/>
    <testcase time="0.022000000000002" classname="SEFilterStates" name="ui_add_returns_a_message_inside_a_div_when_data_has_no_rows_or_no_columns"/>
  </testsuite>
  <testsuite name="calls_combine_by" timestamp="2023-06-21T11:56:50Z" hostname="23b19630c45c" tests="9" skipped="0" failures="0" errors="0" time="0.036">
    <testcase time="0.00600000000000023" classname="calls_combine_by" name="calls_combine_by_different_operators"/>
    <testcase time="0.00199999999999889" classname="calls_combine_by" name="calls_combine_by_different_operators"/>
    <testcase time="0.00100000000000122" classname="calls_combine_by" name="calls_combine_by_different_operators"/>
    <testcase time="0.0069999999999979" classname="calls_combine_by" name="calls_combine_by_different_operators"/>
    <testcase time="0.00600000000000023" classname="calls_combine_by" name="calls_combine_by_different_operators"/>
    <testcase time="0.00200000000000244" classname="calls_combine_by" name="calls_combine_by_different_operators"/>
    <testcase time="0.00499999999999901" classname="calls_combine_by" name="calls_combine_by_different_forms_of_calls"/>
    <testcase time="0.00100000000000122" classname="calls_combine_by" name="calls_combine_by_different_forms_of_calls"/>
    <testcase time="0.00600000000000023" classname="calls_combine_by" name="calls_combine_by_different_forms_of_calls"/>
  </testsuite>
  <testsuite name="count_labels" timestamp="2023-06-21T11:56:50Z" hostname="23b19630c45c" tests="50" skipped="0" failures="0" errors="0" time="0.273">
    <testcase time="0.00700000000000145" classname="count_labels" name="make_count_text_requires_label_to_be_a_character_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="make_count_text_requires_label_to_be_a_character_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="make_count_text_requires_label_to_be_a_character_1_"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="make_count_text_requires_countmax_to_be_a_numeric_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="make_count_text_requires_countmax_to_be_a_numeric_1_"/>
    <testcase time="0.00599999999999667" classname="count_labels" name="make_count_text_requires_countmax_to_be_a_numeric_1_"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="make_count_text_requires_countnow_to_be_a_numeric_1_or_NULL"/>
    <testcase time="0.00100000000000122" classname="count_labels" name="make_count_text_requires_countnow_to_be_a_numeric_1_or_NULL"/>
    <testcase time="0.00700000000000145" classname="count_labels" name="make_count_text_requires_countnow_to_be_a_numeric_1_or_NULL"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="make_count_text_requires_countnow_to_be_a_numeric_1_or_NULL"/>
    <testcase time="0.00199999999999889" classname="count_labels" name="make_count_text_returns_label_countnow_countmax_"/>
    <testcase time="0.00199999999999889" classname="count_labels" name="make_count_text_returns_label_countmax_when_countnow_is_NULL"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="countBar_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBar_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.0069999999999979" classname="count_labels" name="countBar_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBar_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBar_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="countBar_requires_label_to_be_a_character_1_"/>
    <testcase time="0.00700000000000145" classname="count_labels" name="countBar_requires_label_to_be_a_character_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBar_requires_label_to_be_a_character_1_"/>
    <testcase time="0.0069999999999979" classname="count_labels" name="countBar_requires_label_to_be_a_character_1_"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="countBar_requires_countmax_to_be_a_numeric_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBar_requires_countmax_to_be_a_numeric_1_"/>
    <testcase time="0.00700000000000145" classname="count_labels" name="countBar_requires_countmax_to_be_a_numeric_1_"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="countBar_requires_counttotal_to_be_a_numeric_1_"/>
    <testcase time="0.0069999999999979" classname="count_labels" name="countBar_requires_counttotal_to_be_a_numeric_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBar_requires_counttotal_to_be_a_numeric_1_"/>
    <testcase time="0.00400000000000134" classname="count_labels" name="countBar_requires_countnow_to_be_a_numeric_1_NULL"/>
    <testcase time="0.00199999999999889" classname="count_labels" name="countBar_requires_countnow_to_be_a_numeric_1_NULL"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBar_requires_countnow_to_be_a_numeric_1_NULL"/>
    <testcase time="0.00700000000000145" classname="count_labels" name="countBar_requires_countnow_to_be_a_numeric_1_NULL"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="countBar_returns_a_div_with_class_and_two_progressbars"/>
    <testcase time="0.00499999999999901" classname="count_labels" name="countBars_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBars_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.00700000000000145" classname="count_labels" name="countBars_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.0069999999999979" classname="count_labels" name="countBars_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.00600000000000023" classname="count_labels" name="countBars_requires_InputId_to_be_a_character_1_"/>
    <testcase time="0.00400000000000134" classname="count_labels" name="countBars_requires_choices_to_be_a_vector"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="countBars_requires_choices_to_be_a_vector"/>
    <testcase time="0.0069999999999979" classname="count_labels" name="countBars_requires_choices_to_be_a_vector"/>
    <testcase time="0.00400000000000134" classname="count_labels" name="countBars_requires_countsmax_to_be_a_numeric_of_the_same_length_as_choices"/>
    <testcase time="0.00700000000000145" classname="count_labels" name="countBars_requires_countsmax_to_be_a_numeric_of_the_same_length_as_choices"/>
    <testcase time="0.0069999999999979" classname="count_labels" name="countBars_requires_countsmax_to_be_a_numeric_of_the_same_length_as_choices"/>
    <testcase time="0.00700000000000145" classname="count_labels" name="countBars_requires_countsmax_to_be_a_numeric_of_the_same_length_as_choices"/>
    <testcase time="0.00399999999999778" classname="count_labels" name="countBars_requires_counstnow_to_be_a_numeric_lower_than_countsmax_NULL"/>
    <testcase time="0.00300000000000011" classname="count_labels" name="countBars_requires_counstnow_to_be_a_numeric_lower_than_countsmax_NULL"/>
    <testcase time="0.00700000000000145" classname="count_labels" name="countBars_requires_counstnow_to_be_a_numeric_lower_than_countsmax_NULL"/>
    <testcase time="0.00799999999999912" classname="count_labels" name="countBars_requires_counstnow_to_be_a_numeric_lower_than_countsmax_NULL"/>
    <testcase time="0.0160000000000018" classname="count_labels" name="countBars_requires_counstnow_to_be_a_numeric_lower_than_countsmax_NULL"/>
    <testcase time="0.00499999999999901" classname="count_labels" name="countBars_returns_a_list_of_countBar_s_"/>
  </testsuite>
  <testsuite name="filter_panel_api" timestamp="2023-06-21T11:56:50Z" hostname="23b19630c45c" tests="23" skipped="0" failures="13" errors="3" time="0.895">
    <testcase time="0.0199999999999996" classname="filter_panel_api" name="FilterPanelAPI_constructor_accepts_a_FilteredData_object"/>
    <testcase time="0.00600000000000023" classname="filter_panel_api" name="FilterPanelAPI_constructor_accepts_a_FilteredData_object"/>
    <testcase time="0.00700000000000145" classname="filter_panel_api" name="FilterPanelAPI_constructor_accepts_a_FilteredData_object"/>
    <testcase time="0.014999999999997" classname="filter_panel_api" name="FilterPanelAPI_set_filter_state_adds_filter_states">
      <failure type="failure" message="shiny::isolate(datasets$get_filter_state()) has length 0, not length 2. ('test-filter_panel_api.R:37:3')">shiny::isolate(datasets$get_filter_state()) has length 0, not length 2.</failure>
    </testcase>
    <testcase time="0.0460000000000029" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_those_in_input_adds_format">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:52:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.0309999999999988" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_those_in_input_adds_format">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:56:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.0309999999999988" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_those_in_input_adds_format">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:60:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.0340000000000025" classname="filter_panel_api" name="FilterPanelAPI_remove_filter_state_removes_filter_states_specified_by_teal_slices_">
      <error type="error" message="Error in `slices_field(datasets$get_filter_state(), &quot;varname&quot;)`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'. ('test-filter_panel_api.R:77:3')">Error in `slices_field(datasets$get_filter_state(), "varname")`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'.
Backtrace:
  1. testthat::expect_identical(...)
       at test-filter_panel_api.R:77:2
 16. teal.slice:::slices_field(datasets$get_filter_state(), "varname")
 17. checkmate::assert_class(tss, "teal_slices")
 18. checkmate::makeAssertion(x, res, .var.name, add)
 19. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.0359999999999978" classname="filter_panel_api" name="FilterPanelAPI_clear_filter_states_removes_all_filters_of_datasets_in_FilterPanelAPI">
      <failure type="failure" message="shiny::isolate(datasets$get_filter_state()) has length 0, not length 3. ('test-filter_panel_api.R:93:3')">shiny::isolate(datasets$get_filter_state()) has length 0, not length 3.</failure>
    </testcase>
    <testcase time="0.0160000000000018" classname="filter_panel_api" name="FilterPanelAPI_clear_filter_states_removes_all_filters_of_datasets_in_FilterPanelAPI"/>
    <testcase time="0.0169999999999995" classname="filter_panel_api" name="FilterPanelAPI_clear_filter_states_remove_the_filters_of_the_desired_dataset_only">
      <failure type="failure" message="shiny::isolate(datasets$get_filter_state()) has length 0, not length 3. ('test-filter_panel_api.R:109:3')">shiny::isolate(datasets$get_filter_state()) has length 0, not length 3.</failure>
    </testcase>
    <testcase time="0.0259999999999998" classname="filter_panel_api" name="FilterPanelAPI_clear_filter_states_remove_the_filters_of_the_desired_dataset_only">
      <failure type="failure" message="shiny::isolate(datasets$get_filter_state()) has length 0, not length 1. ('test-filter_panel_api.R:113:3')">shiny::isolate(datasets$get_filter_state()) has length 0, not length 1.</failure>
    </testcase>
    <testcase time="0.0189999999999984" classname="filter_panel_api" name="FilterPanelAPI_clear_filter_states_remove_the_filters_of_the_desired_dataset_only">
      <error type="error" message="Error in `slices_field(datasets$get_filter_state(), &quot;varname&quot;)`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'. ('test-filter_panel_api.R:115:3')">Error in `slices_field(datasets$get_filter_state(), "varname")`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'.
Backtrace:
  1. testthat::expect_identical(...)
       at test-filter_panel_api.R:115:2
 16. teal.slice:::slices_field(datasets$get_filter_state(), "varname")
 17. checkmate::assert_class(tss, "teal_slices")
 18. checkmate::makeAssertion(x, res, .var.name, add)
 19. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.150000000000002" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_to_those_in_input">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:145:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.0429999999999993" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_to_those_in_input">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:149:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.0330000000000013" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_to_those_in_input">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:153:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.032" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_to_those_in_input">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:157:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.0329999999999977" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_to_those_in_input">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:161:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.032" classname="filter_panel_api" name="get_filter_state_returns_teal_slices_with_features_identical_to_those_in_input">
      <failure type="failure" message="compare_slices(...) is not TRUE ('test-filter_panel_api.R:165:3')">compare_slices(...) is not TRUE

`actual`:   FALSE
`expected`: TRUE </failure>
    </testcase>
    <testcase time="0.117000000000001" classname="filter_panel_api" name="remove_filter_state_removes_filter_state_specified_by_teal_slices_"/>
    <testcase time="0.0129999999999981" classname="filter_panel_api" name="remove_filter_state_removes_filter_state_specified_by_teal_slices_">
      <error type="error" message="Error in `slices_field(get_filter_state(datasets), &quot;varname&quot;)`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'. ('test-filter_panel_api.R:195:3')">Error in `slices_field(get_filter_state(datasets), "varname")`: Assertion on 'tss' failed: Must inherit from class 'teal_slices', but has class 'NULL'.
Backtrace:
  1. testthat::expect_identical(...)
       at test-filter_panel_api.R:195:2
 16. teal.slice:::slices_field(get_filter_state(datasets), "varname")
 17. checkmate::assert_class(tss, "teal_slices")
 18. checkmate::makeAssertion(x, res, .var.name, add)
 19. checkmate:::mstop(...)</error>
    </testcase>
    <testcase time="0.127000000000002" classname="filter_panel_api" name="clear_filter_states_removes_all_filter_states"/>
    <testcase time="0.0109999999999992" classname="filter_panel_api" name="clear_filter_states_removes_all_filter_states"/>
  </testsuite>
  <testsuite name="get_supported_filter_varnames" timestamp="2023-06-21T11:56:51Z" hostname="23b19630c45c" tests="5" skipped="0" failures="0" errors="0" time="0.019">
    <testcase time="0.00700000000000145" classname="get_supported_filter_varnames" name="get_supported_filter_varnames_returns_character_0_for_an_empty_matrix"/>
    <testcase time="0.00300000000000011" classname="get_supported_filter_varnames" name="get_supported_filter_varnames_returns_character_0_for_an_empty_data.frame"/>
    <testcase time="0.00300000000000011" classname="get_supported_filter_varnames" name="get_supported_filter_varnames_returns_character_0_for_a_single_column_numeric_matrix"/>
    <testcase time="0.00199999999999889" classname="get_supported_filter_varnames" name="get_supported_filter_varnames_returns_character_0_for_a_single_column_of_NA_values"/>
    <testcase time="0.00399999999999778" classname="get_supported_filter_varnames" name="get_supported_filter_varnames_returns_column_names_for_a_non_empty_data.frame"/>
  </testsuite>
  <testsuite name="init_filter_state" timestamp="2023-06-21T11:56:51Z" hostname="23b19630c45c" tests="18" skipped="0" failures="0" errors="0" time="0.333">
    <testcase time="0.0120000000000005" classname="init_filter_state" name="init_filter_state_checks_arguments"/>
    <testcase time="0.00700000000000145" classname="init_filter_state" name="init_filter_state_checks_arguments"/>
    <testcase time="0.00900000000000034" classname="init_filter_state" name="init_filter_state_checks_arguments"/>
    <testcase time="0.00999999999999801" classname="init_filter_state" name="init_filter_state_returns_an_EmptyFilterState_if_all_values_provided_are_NA"/>
    <testcase time="0.0160000000000018" classname="init_filter_state" name="init_filter_state_returns_a_ChoicesFilterState_if_passed_a_numeric_of_length_1"/>
    <testcase time="0.0519999999999996" classname="init_filter_state" name="init_filter_state_returns_a_RangeFilterState_if_passed_a_longer_numeric"/>
    <testcase time="0.0189999999999984" classname="init_filter_state" name="init_filter_state_returns_a_ChoicesFilterState_object_if_passed_a_Date_object_of_length_1"/>
    <testcase time="0.0260000000000034" classname="init_filter_state" name="init_filter_state_returns_a_DateFilterState_object_if_passed_longer_a_Date_object"/>
    <testcase time="0.0169999999999995" classname="init_filter_state" name="init_filter_state_returns_a_ChoicesFilterState_object_if_passed_a_POSIXct_or_POSIXlt_of_length_1"/>
    <testcase time="0.0150000000000006" classname="init_filter_state" name="init_filter_state_returns_a_ChoicesFilterState_object_if_passed_a_POSIXct_or_POSIXlt_of_length_1"/>
    <testcase time="0.014999999999997" classname="init_filter_state" name="init_filter_state_returns_a_DatetimeFilterState_object_if_passed_a_longer_POSIXct_or_POSIXlt"/>
    <testcase time="0.0140000000000029" classname="init_filter_state" name="init_filter_state_returns_a_DatetimeFilterState_object_if_passed_a_longer_POSIXct_or_POSIXlt"/>
    <testcase time="0.0499999999999972" classname="init_filter_state" name="init_filter_state_returns_a_RangeFilterState_if_passed_a_numeric_vector_containing_Inf"/>
    <testcase time="0.017000000000003" classname="init_filter_state" name="init_filter_state_returns_a_ChoicesFilterState_if_passed_fewer_than_five_non_NA_elements"/>
    <testcase time="0.0159999999999982" classname="init_filter_state" name="init_filter_state_returns_a_ChoicesFilterState_if_passed_a_character_vector_of_any_length"/>
    <testcase time="0.0160000000000018" classname="init_filter_state" name="init_filter_state_returns_a_ChoicesFilterState_if_passed_a_factor_of_any_length"/>
    <testcase time="0.0139999999999993" classname="init_filter_state" name="init_filter_state_return_a_LogicalFilterState_if_passed_a_logical_vector"/>
    <testcase time="0.00799999999999912" classname="init_filter_state" name="init_filter_state_default_accepts_a_list"/>
  </testsuite>
  <testsuite name="init_filter_states" timestamp="2023-06-21T11:56:51Z" hostname="23b19630c45c" tests="8" skipped="0" failures="0" errors="0" time="0.037">
    <testcase time="0.00799999999999912" classname="init_filter_states" name="init_filter_states_returns_a_DFFilterStates_object_if_passed_an_empty_data.frame"/>
    <testcase time="0.00400000000000134" classname="init_filter_states" name="init_filter_states_returns_a_DFFilterStates_object_if_passed_an_empty_data.frame"/>
    <testcase time="0.00399999999999778" classname="init_filter_states" name="init_filter_states_returns_a_MatrixFilterStates_object_if_passed_an_empty_matrix"/>
    <testcase time="0.00400000000000134" classname="init_filter_states" name="init_filter_states_returns_a_MatrixFilterStates_object_if_passed_an_empty_matrix"/>
    <testcase time="0.00400000000000134" classname="init_filter_states" name="init_filter_states_returns_an_MAEFilterStates_object_if_passed_an_object_of_class_MAE"/>
    <testcase time="0.00499999999999901" classname="init_filter_states" name="init_filter_states_returns_an_MAEFilterStates_object_if_passed_an_object_of_class_MAE"/>
    <testcase time="0.00300000000000011" classname="init_filter_states" name="init_filter_states_returns_an_SEFilterStates_object_if_passed_an_object_of_class_SE"/>
    <testcase time="0.00499999999999901" classname="init_filter_states" name="init_filter_states_returns_an_SEFilterStates_object_if_passed_an_object_of_class_SE"/>
  </testsuite>
  <testsuite name="init_filtered_data" timestamp="2023-06-21T11:56:51Z" hostname="23b19630c45c" tests="8" skipped="0" failures="0" errors="0" time="0.101">
    <testcase time="0.032" classname="init_filtered_data" name="init_filtered_data_accepts_a_TealData_object"/>
    <testcase time="0.022000000000002" classname="init_filtered_data" name="init_filtered_data_accepts_a_CDISCTealData_with_mixed_CDISC_and_Dataset"/>
    <testcase time="0.0069999999999979" classname="init_filtered_data" name="init_filtered_data_accepts_a_list_of_data.frame_objects"/>
    <testcase time="0.00799999999999912" classname="init_filtered_data" name="init_filtered_data.default_asserts_x_has_unique_names"/>
    <testcase time="0.00800000000000267" classname="init_filtered_data" name="init_filtered_data.default_asserts_code_is_CodeClass_"/>
    <testcase time="0.0069999999999979" classname="init_filtered_data" name="init_filtered_data.default_accepts_NULL_passed_to_code"/>
    <testcase time="0.00800000000000267" classname="init_filtered_data" name="init_filtered_data.default_asserts_join_keys_is_JoinKeys_"/>
    <testcase time="0.00899999999999679" classname="init_filtered_data" name="init_filtered_data.default_asserts_check_is_logical_1_"/>
  </testsuite>
  <testsuite name="init_filtered_dataset" timestamp="2023-06-21T11:56:51Z" hostname="23b19630c45c" tests="4" skipped="0" failures="0" errors="0" time="0.097">
    <testcase time="0.00900000000000034" classname="init_filtered_dataset" name="init_filtered_dataset_returns_a_DefaultFilteredDataset_when_passed_a_data.frame"/>
    <testcase time="0.00400000000000134" classname="init_filtered_dataset" name="init_filtered_dataset_returns_a_DefaultFilteredDataset_when_passed_a_data.frame"/>
    <testcase time="0.0790000000000006" classname="init_filtered_dataset" name="init_filtered_dataset_returns_an_MAEFilteredDataset_when_passed_an_MAE"/>
    <testcase time="0.00499999999999901" classname="init_filtered_dataset" name="init_filtered_dataset_returns_an_MAEFilteredDataset_when_passed_an_MAE"/>
  </testsuite>
  <testsuite name="teal_slice" timestamp="2023-06-21T11:56:51Z" hostname="23b19630c45c" tests="121" skipped="0" failures="1" errors="1" time="0.924">
    <testcase time="0.0109999999999992" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.0069999999999979" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.0069999999999979" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.0189999999999984" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.0069999999999979" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="filter_var_checks_arguments"/>
    <testcase time="0.00499999999999901" classname="teal_slice" name="filter_var_returns_teal_slice_"/>
    <testcase time="0.00100000000000122" classname="teal_slice" name="filter_var_returns_teal_slice_"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_var_returns_teal_slice_"/>
    <testcase time="0.00199999999999889" classname="teal_slice" name="filter_var_returns_teal_slice_"/>
    <testcase time="0.00800000000000267" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.00599999999999667" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.00800000000000267" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.0069999999999979" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.00800000000000267" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.0069999999999979" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="filter_settings_checks_arguments"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="filter_settings_returns_teal_slices_"/>
    <testcase time="0.00199999999999889" classname="teal_slice" name="filter_settings_returns_teal_slices_"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_settings_returns_teal_slices_"/>
    <testcase time="0.00499999999999901" classname="teal_slice" name="filter_settings_returns_teal_slices_"/>
    <testcase time="0.00400000000000134" classname="teal_slice" name="filter_settings_returns_teal_slices_"/>
    <testcase time="0.00499999999999901" classname="teal_slice" name="filter_settings_returns_teal_slices_"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="filter_settings_returns_teal_slices_"/>
    <testcase time="0.00800000000000267" classname="teal_slice" name="is_functions_work"/>
    <testcase time="0.00399999999999778" classname="teal_slice" name="is_functions_work"/>
    <testcase time="0.00499999999999901" classname="teal_slice" name="is_functions_work"/>
    <testcase time="0.00200000000000244" classname="teal_slice" name="is_functions_work"/>
    <testcase time="0.00499999999999901" classname="teal_slice" name="is_functions_work"/>
    <testcase time="0.00400000000000134" classname="teal_slice" name="is_functions_work"/>
    <testcase time="0.0109999999999992" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00199999999999889" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00199999999999889" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00200000000000244" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.0069999999999979" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.0069999999999979" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00199999999999889" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="_.teal_slices_accepts_various_types_of_indices"/>
    <testcase time="0.0109999999999992" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00200000000000244" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00399999999999778" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00400000000000134" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00199999999999889" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00199999999999889" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.00199999999999889" classname="teal_slice" name="_.teal_slices_subsets_properly"/>
    <testcase time="0.0160000000000018" classname="teal_slice" name="_.teal_slices_also_subsets_the_exclude_varnames_attribute"/>
    <testcase time="0.00400000000000134" classname="teal_slice" name="_.teal_slices_also_subsets_the_exclude_varnames_attribute"/>
    <testcase time="0.00399999999999778" classname="teal_slice" name="_.teal_slices_also_subsets_the_exclude_varnames_attribute"/>
    <testcase time="0.00400000000000134" classname="teal_slice" name="_.teal_slices_also_subsets_the_exclude_varnames_attribute"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="_.teal_slices_also_subsets_the_exclude_varnames_attribute"/>
    <testcase time="0.00400000000000134" classname="teal_slice" name="_.teal_slices_also_subsets_the_exclude_varnames_attribute"/>
    <testcase time="0.00499999999999901" classname="teal_slice" name="_.teal_slices_also_subsets_the_exclude_varnames_attribute"/>
    <testcase time="0.0100000000000016" classname="teal_slice" name="_.teal_slices_preserves_count_type"/>
    <testcase time="0.0240000000000009" classname="teal_slice" name="c.teal_slices_concatenates_teal_slices_objects"/>
    <testcase time="0.0069999999999979" classname="teal_slice" name="c.teal_slices_concatenates_teal_slices_objects"/>
    <testcase time="0.00400000000000134" classname="teal_slice" name="c.teal_slices_concatenates_teal_slices_objects"/>
    <testcase time="0.00399999999999778" classname="teal_slice" name="c.teal_slices_concatenates_teal_slices_objects"/>
    <testcase time="0.0150000000000006" classname="teal_slice" name="c.teal_slices_handles_attributes"/>
    <testcase time="0.00400000000000134" classname="teal_slice" name="c.teal_slices_handles_attributes"/>
    <testcase time="0.00300000000000011" classname="teal_slice" name="c.teal_slices_handles_attributes"/>
    <testcase time="0.0109999999999992" classname="teal_slice" name="format.teal_slice_returns_a_character_string"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="format.teal_slice_returns_a_character_string"/>
    <testcase time="0.0109999999999992" classname="teal_slice" name="format.teal_slice_skips_empty_mandatory_fields_show_all_is_FALSE"/>
    <testcase time="0.0109999999999992" classname="teal_slice" name="format.teal_slice_prints_optional_fields"/>
    <testcase time="0.00600000000000023" classname="teal_slice" name="format.teal_slice_prints_optional_fields"/>
    <testcase time="0.00499999999999901" classname="teal_slice" name="format.teal_slice_prints_optional_fields"/>
    <testcase time="0.0160000000000018" classname="teal_slice" name="format.teal_slices_returns_a_character_string"/>
    <testcase time="0.0180000000000007" classname="teal_slice" name="format.teal_slices_contains_literal_formatted_representations_of_all_included_teal_slice_s"/>
    <testcase time="0.0199999999999996" classname="teal_slice" name="format.teal_slices_contains_literal_formatted_representations_of_all_included_teal_slice_s">
      <failure type="failure" message="any(grepl(gsub(&quot; &quot;, &quot;&quot;, x), gsub(&quot; &quot;, &quot;&quot;, ffs), fixed = TRUE)) is not TRUE ('test-teal_slice.R:416:3')">any(grepl(gsub(" ", "", x), gsub(" ", "", ffs), fixed = TRUE)) is not TRUE

`actual`:   FALSE
`expected`: TRUE 
Backtrace:
 1. base::lapply(...)
      at test-teal_slice.R:416:2
 2. teal.slice (local) FUN(X[[i]], ...)
 3. testthat::expect_true(...)
      at test-teal_slice.R:417:4</failure>
    </testcase>
    <testcase time="0.0330000000000013" classname="teal_slice" name="format.teal_slices_prints_include_varnames_attribute_if_not_empty"/>
    <testcase time="0.0109999999999992" classname="teal_slice" name="format.teal_slices_prints_include_varnames_attribute_if_not_empty"/>
    <testcase time="0.0150000000000006" classname="teal_slice" name="format.teal_slices_prints_exclude_varnames_attribute_if_not_empty"/>
    <testcase time="0.0109999999999992" classname="teal_slice" name="format.teal_slices_prints_exclude_varnames_attribute_if_not_empty"/>
    <testcase time="0.0150000000000006" classname="teal_slice" name="format.teal_slices_prints_count_type_attribute_if_not_empty"/>
    <testcase time="0.0109999999999992" classname="teal_slice" name="slices_field_works"/>
    <testcase time="0.00700000000000145" classname="teal_slice" name="slices_field_works"/>
    <testcase time="0.0150000000000006" classname="teal_slice" name="slices_field_works">
      <error type="error" message="&lt;vctrs_error_scalar_type/vctrs_error/rlang_error/error/condition&gt; ('test-teal_slice.R:466:3')">&lt;vctrs_error_scalar_type/vctrs_error/rlang_error/error/condition&gt;
Error in `testthat::expect_vector(slices_field(fs, "dataname"))`: `slices_field(fs, "dataname")` must be a vector, not `NULL`.
Backtrace:
 1. testthat::expect_vector(slices_field(fs, "dataname"))
      at test-teal_slice.R:466:2</error>
    </testcase>
    <testcase time="0.0749999999999993" classname="teal_slice" name="filter_expr_id_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_id_has_to_be_a_string"/>
    <testcase time="0.0180000000000007" classname="teal_slice" name="filter_expr_id_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_id_has_to_be_a_string"/>
    <testcase time="0.00500000000000256" classname="teal_slice" name="filter_expr_title_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_title_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_title_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_title_has_to_be_a_string"/>
    <testcase time="0.00500000000000256" classname="teal_slice" name="filter_expr_dataname_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_dataname_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_dataname_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_dataname_has_to_be_a_string"/>
    <testcase time="0.00500000000000256" classname="teal_slice" name="filter_expr_expr_has_to_be_a_string"/>
    <testcase time="0.00499999999999901" classname="teal_slice" name="filter_expr_expr_has_to_be_a_string"/>
    <testcase time="0.00799999999999912" classname="teal_slice" name="filter_expr_expr_has_to_be_a_string"/>
  </testsuite>
  <testsuite name="utils" timestamp="2023-06-21T11:56:52Z" hostname="23b19630c45c" tests="37" skipped="0" failures="0" errors="0" time="0.174">
    <testcase time="0.00900000000000034" classname="utils" name="check_ellipsis_with_no_unused"/>
    <testcase time="0.00799999999999912" classname="utils" name="check_ellipsis_with_extra_unamed_arguments"/>
    <testcase time="0.00200000000000244" classname="utils" name="check_ellipsis_with_extra_unamed_arguments"/>
    <testcase time="0.0069999999999979" classname="utils" name="check_ellipsis_with_extra_named_arguments"/>
    <testcase time="0.00200000000000244" classname="utils" name="check_ellipsis_with_extra_named_arguments"/>
    <testcase time="0.0069999999999979" classname="utils" name="check_ellipsis_with_extra_named_and_unamed_arguments"/>
    <testcase time="0.00199999999999889" classname="utils" name="check_ellipsis_with_extra_named_and_unamed_arguments"/>
    <testcase time="0.00800000000000267" classname="utils" name="check_ellipsis_with_extra_named_and_unamed_arguments_in_wrong_order"/>
    <testcase time="0.00199999999999889" classname="utils" name="check_ellipsis_with_extra_named_and_unamed_arguments_in_wrong_order"/>
    <testcase time="0.00300000000000011" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.00600000000000023" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.00700000000000145" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.00599999999999667" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.00200000000000244" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.0069999999999979" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.00200000000000244" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.00300000000000011" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.00199999999999889" classname="utils" name="check_ellipsis_with_allowed_args"/>
    <testcase time="0.00300000000000011" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00199999999999889" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00200000000000244" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00199999999999889" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00300000000000011" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00199999999999889" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00199999999999889" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00199999999999889" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00600000000000023" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00700000000000145" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00600000000000023" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.0069999999999979" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00600000000000023" classname="utils" name="check_simple_name_behaves_as_expected"/>
    <testcase time="0.00600000000000023" classname="utils" name="get_teal_bs_theme"/>
    <testcase time="0.022000000000002" classname="utils" name="get_teal_bs_theme"/>
    <testcase time="0.00399999999999778" classname="utils" name="make_c_call"/>
    <testcase time="0.00100000000000122" classname="utils" name="make_c_call"/>
  </testsuite>
</testsuites>
